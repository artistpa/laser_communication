
Laser_Receiver_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d58  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008f38  08008f38  00009f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800934c  0800934c  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800934c  0800934c  0000a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009354  08009354  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009354  08009354  0000a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009358  08009358  0000a358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800935c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001d4  08009530  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08009530  0000b494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dd3  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266c  00000000  00000000  0001dfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00020648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d58  00000000  00000000  00021760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027164  00000000  00000000  000224b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013703  00000000  00000000  0004961c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd8ce  00000000  00000000  0005cd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a5ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000585c  00000000  00000000  0015a630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0015fe8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008f20 	.word	0x08008f20

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08008f20 	.word	0x08008f20

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fcd9 	bl	80018de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f850 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 f950 	bl	80011d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f34:	f000 f902 	bl	800113c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f38:	f000 f88a 	bl	8001050 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CCR3 = 500;
 8000f3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f40:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4819      	ldr	r0, [pc, #100]	@ (8000fb0 <main+0x8c>)
 8000f4a:	f002 f9ad 	bl	80032a8 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4918      	ldr	r1, [pc, #96]	@ (8000fb4 <main+0x90>)
 8000f52:	4819      	ldr	r0, [pc, #100]	@ (8000fb8 <main+0x94>)
 8000f54:	f003 faf8 	bl	8004548 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Transmit(&huart2, (uint8_t*)"Please, insert your message\n\r",29 , 10);
 8000f58:	230a      	movs	r3, #10
 8000f5a:	221d      	movs	r2, #29
 8000f5c:	4917      	ldr	r1, [pc, #92]	@ (8000fbc <main+0x98>)
 8000f5e:	4816      	ldr	r0, [pc, #88]	@ (8000fb8 <main+0x94>)
 8000f60:	f003 fa64 	bl	800442c <HAL_UART_Transmit>
	  while (transfer_cplt != 1){
 8000f64:	e002      	b.n	8000f6c <main+0x48>
		  HAL_Delay(100);
 8000f66:	2064      	movs	r0, #100	@ 0x64
 8000f68:	f000 fd2a 	bl	80019c0 <HAL_Delay>
	  while (transfer_cplt != 1){
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <main+0x9c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d1f8      	bne.n	8000f66 <main+0x42>
	  }
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Starting transmission\n\r", 23, 5);
 8000f74:	2305      	movs	r3, #5
 8000f76:	2217      	movs	r2, #23
 8000f78:	4912      	ldr	r1, [pc, #72]	@ (8000fc4 <main+0xa0>)
 8000f7a:	480f      	ldr	r0, [pc, #60]	@ (8000fb8 <main+0x94>)
 8000f7c:	f003 fa56 	bl	800442c <HAL_UART_Transmit>
	  Transmit_message_PPM(rx_buffer, 100);
 8000f80:	2164      	movs	r1, #100	@ 0x64
 8000f82:	4811      	ldr	r0, [pc, #68]	@ (8000fc8 <main+0xa4>)
 8000f84:	f000 f97e 	bl	8001284 <Transmit_message_PPM>
	  HAL_Delay(80);
 8000f88:	2050      	movs	r0, #80	@ 0x50
 8000f8a:	f000 fd19 	bl	80019c0 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"\n\rTransmission complete\n\r", 25, 5);
 8000f8e:	2305      	movs	r3, #5
 8000f90:	2219      	movs	r2, #25
 8000f92:	490e      	ldr	r1, [pc, #56]	@ (8000fcc <main+0xa8>)
 8000f94:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <main+0x94>)
 8000f96:	f003 fa49 	bl	800442c <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa2:	f001 f881 	bl	80020a8 <HAL_GPIO_WritePin>
	  transfer_cplt = 0;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <main+0x9c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Please, insert your message\n\r",29 , 10);
 8000fac:	e7d4      	b.n	8000f58 <main+0x34>
 8000fae:	bf00      	nop
 8000fb0:	200001f0 	.word	0x200001f0
 8000fb4:	200002d4 	.word	0x200002d4
 8000fb8:	2000023c 	.word	0x2000023c
 8000fbc:	08008f38 	.word	0x08008f38
 8000fc0:	2000033c 	.word	0x2000033c
 8000fc4:	08008f58 	.word	0x08008f58
 8000fc8:	200002d8 	.word	0x200002d8
 8000fcc:	08008f70 	.word	0x08008f70

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	@ 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0318 	add.w	r3, r7, #24
 8000fda:	2238      	movs	r2, #56	@ 0x38
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f006 f879 	bl	80070d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ff6:	f001 f86f 	bl	80020d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001004:	2340      	movs	r3, #64	@ 0x40
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f915 	bl	8002240 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800101c:	f000 fa46 	bl	80014ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	230f      	movs	r3, #15
 8001022:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001024:	2301      	movs	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fc13 	bl	8002864 <HAL_RCC_ClockConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001044:	f000 fa32 	bl	80014ac <Error_Handler>
  }
}
 8001048:	bf00      	nop
 800104a:	3750      	adds	r7, #80	@ 0x50
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	@ 0x38
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001082:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <MX_TIM2_Init+0xe8>)
 8001084:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001088:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800108a:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <MX_TIM2_Init+0xe8>)
 800108c:	220f      	movs	r2, #15
 800108e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <MX_TIM2_Init+0xe8>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001096:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <MX_TIM2_Init+0xe8>)
 8001098:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800109c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <MX_TIM2_Init+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <MX_TIM2_Init+0xe8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010aa:	4823      	ldr	r0, [pc, #140]	@ (8001138 <MX_TIM2_Init+0xe8>)
 80010ac:	f002 f844 	bl	8003138 <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010b6:	f000 f9f9 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c4:	4619      	mov	r1, r3
 80010c6:	481c      	ldr	r0, [pc, #112]	@ (8001138 <MX_TIM2_Init+0xe8>)
 80010c8:	f002 fb14 	bl	80036f4 <HAL_TIM_ConfigClockSource>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010d2:	f000 f9eb 	bl	80014ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010d6:	4818      	ldr	r0, [pc, #96]	@ (8001138 <MX_TIM2_Init+0xe8>)
 80010d8:	f002 f885 	bl	80031e6 <HAL_TIM_PWM_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010e2:	f000 f9e3 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4810      	ldr	r0, [pc, #64]	@ (8001138 <MX_TIM2_Init+0xe8>)
 80010f6:	f003 f8b3 	bl	8004260 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001100:	f000 f9d4 	bl	80014ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001104:	2360      	movs	r3, #96	@ 0x60
 8001106:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	2208      	movs	r2, #8
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	@ (8001138 <MX_TIM2_Init+0xe8>)
 800111c:	f002 f9d6 	bl	80034cc <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001126:	f000 f9c1 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800112a:	4803      	ldr	r0, [pc, #12]	@ (8001138 <MX_TIM2_Init+0xe8>)
 800112c:	f000 fa06 	bl	800153c <HAL_TIM_MspPostInit>

}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	@ 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200001f0 	.word	0x200001f0

0800113c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001142:	4a23      	ldr	r2, [pc, #140]	@ (80011d0 <MX_USART2_UART_Init+0x94>)
 8001144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001146:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115a:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001172:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001184:	4811      	ldr	r0, [pc, #68]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001186:	f003 f901 	bl	800438c <HAL_UART_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001190:	f000 f98c 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	480d      	ldr	r0, [pc, #52]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 8001198:	f005 f977 	bl	800648a <HAL_UARTEx_SetTxFifoThreshold>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011a2:	f000 f983 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a6:	2100      	movs	r1, #0
 80011a8:	4808      	ldr	r0, [pc, #32]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 80011aa:	f005 f9ac 	bl	8006506 <HAL_UARTEx_SetRxFifoThreshold>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011b4:	f000 f97a 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	@ (80011cc <MX_USART2_UART_Init+0x90>)
 80011ba:	f005 f92d 	bl	8006418 <HAL_UARTEx_DisableFifoMode>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011c4:	f000 f972 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000023c 	.word	0x2000023c
 80011d0:	40004400 	.word	0x40004400

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b24      	ldr	r3, [pc, #144]	@ (800127c <MX_GPIO_Init+0xa8>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a23      	ldr	r2, [pc, #140]	@ (800127c <MX_GPIO_Init+0xa8>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b21      	ldr	r3, [pc, #132]	@ (800127c <MX_GPIO_Init+0xa8>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <MX_GPIO_Init+0xa8>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4a1d      	ldr	r2, [pc, #116]	@ (800127c <MX_GPIO_Init+0xa8>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_GPIO_Init+0xa8>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_GPIO_Init+0xa8>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	4a17      	ldr	r2, [pc, #92]	@ (800127c <MX_GPIO_Init+0xa8>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_GPIO_Init+0xa8>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2120      	movs	r1, #32
 8001236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123a:	f000 ff35 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800123e:	2320      	movs	r3, #32
 8001240:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001258:	f000 fda4 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800125c:	2320      	movs	r3, #32
 800125e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_GPIO_Init+0xac>)
 8001270:	f000 fd98 	bl	8001da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	48000800 	.word	0x48000800

08001284 <Transmit_message_PPM>:
			return;
		}
	}
}

static void Transmit_message_PPM(uint8_t* message, uint8_t n){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	2120      	movs	r1, #32
 8001294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001298:	f000 ff06 	bl	80020a8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800129c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012a0:	f000 fb8e 	bl	80019c0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2120      	movs	r1, #32
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ac:	f000 fefc 	bl	80020a8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < n; i+=2){
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e097      	b.n	80013e6 <Transmit_message_PPM+0x162>
		HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, 5);
 80012b6:	2305      	movs	r3, #5
 80012b8:	2201      	movs	r2, #1
 80012ba:	4950      	ldr	r1, [pc, #320]	@ (80013fc <Transmit_message_PPM+0x178>)
 80012bc:	4850      	ldr	r0, [pc, #320]	@ (8001400 <Transmit_message_PPM+0x17c>)
 80012be:	f003 f8b5 	bl	800442c <HAL_UART_Transmit>
		if (message[i] == 48 && message[i + 1] == 48){
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b30      	cmp	r3, #48	@ 0x30
 80012cc:	d11b      	bne.n	8001306 <Transmit_message_PPM+0x82>
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	3301      	adds	r3, #1
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b30      	cmp	r3, #48	@ 0x30
 80012da:	d114      	bne.n	8001306 <Transmit_message_PPM+0x82>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80012dc:	2201      	movs	r2, #1
 80012de:	2120      	movs	r1, #32
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e4:	f000 fee0 	bl	80020a8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80012e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012ec:	f000 fb68 	bl	80019c0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2120      	movs	r1, #32
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f8:	f000 fed6 	bl	80020a8 <HAL_GPIO_WritePin>
			HAL_Delay(3000);
 80012fc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001300:	f000 fb5e 	bl	80019c0 <HAL_Delay>
 8001304:	e06c      	b.n	80013e0 <Transmit_message_PPM+0x15c>
		}else if (message[i] == 48 && message[i + 1] == 49){
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b30      	cmp	r3, #48	@ 0x30
 8001310:	d11f      	bne.n	8001352 <Transmit_message_PPM+0xce>
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	3301      	adds	r3, #1
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b31      	cmp	r3, #49	@ 0x31
 800131e:	d118      	bne.n	8001352 <Transmit_message_PPM+0xce>
			HAL_Delay(1000);
 8001320:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001324:	f000 fb4c 	bl	80019c0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001328:	2201      	movs	r2, #1
 800132a:	2120      	movs	r1, #32
 800132c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001330:	f000 feba 	bl	80020a8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001334:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001338:	f000 fb42 	bl	80019c0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2120      	movs	r1, #32
 8001340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001344:	f000 feb0 	bl	80020a8 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8001348:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800134c:	f000 fb38 	bl	80019c0 <HAL_Delay>
 8001350:	e046      	b.n	80013e0 <Transmit_message_PPM+0x15c>
		}else if(message[i] == 49 && message[i + 1] == 48){
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b31      	cmp	r3, #49	@ 0x31
 800135c:	d11f      	bne.n	800139e <Transmit_message_PPM+0x11a>
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	3301      	adds	r3, #1
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b30      	cmp	r3, #48	@ 0x30
 800136a:	d118      	bne.n	800139e <Transmit_message_PPM+0x11a>
			HAL_Delay(2000);
 800136c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001370:	f000 fb26 	bl	80019c0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001374:	2201      	movs	r2, #1
 8001376:	2120      	movs	r1, #32
 8001378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137c:	f000 fe94 	bl	80020a8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001380:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001384:	f000 fb1c 	bl	80019c0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2120      	movs	r1, #32
 800138c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001390:	f000 fe8a 	bl	80020a8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001394:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001398:	f000 fb12 	bl	80019c0 <HAL_Delay>
 800139c:	e020      	b.n	80013e0 <Transmit_message_PPM+0x15c>
		}else if(message[i] == 49 && message[i + 1] == 49){
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b31      	cmp	r3, #49	@ 0x31
 80013a8:	d123      	bne.n	80013f2 <Transmit_message_PPM+0x16e>
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	3301      	adds	r3, #1
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b31      	cmp	r3, #49	@ 0x31
 80013b6:	d11c      	bne.n	80013f2 <Transmit_message_PPM+0x16e>
			HAL_Delay(3000);
 80013b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013bc:	f000 fb00 	bl	80019c0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2120      	movs	r1, #32
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c8:	f000 fe6e 	bl	80020a8 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80013cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013d0:	f000 faf6 	bl	80019c0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2120      	movs	r1, #32
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013dc:	f000 fe64 	bl	80020a8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < n; i+=2){
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3302      	adds	r3, #2
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	f4ff af63 	bcc.w	80012b6 <Transmit_message_PPM+0x32>
 80013f0:	e000      	b.n	80013f4 <Transmit_message_PPM+0x170>
		}else{
			return;
 80013f2:	bf00      	nop
		}
	}
}
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	08008f8c 	.word	0x08008f8c
 8001400:	2000023c 	.word	0x2000023c

08001404 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  if (huart->Instance == USART2){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1f      	ldr	r2, [pc, #124]	@ (8001490 <HAL_UART_RxCpltCallback+0x8c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d137      	bne.n	8001486 <HAL_UART_RxCpltCallback+0x82>
	  if (rx_indx == 0){
 8001416:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <HAL_UART_RxCpltCallback+0x90>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10c      	bne.n	8001438 <HAL_UART_RxCpltCallback+0x34>
		  for (uint8_t i = 0; i < 100; i++){
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e006      	b.n	8001432 <HAL_UART_RxCpltCallback+0x2e>
			  rx_buffer[i] = 2;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <HAL_UART_RxCpltCallback+0x94>)
 8001428:	2102      	movs	r1, #2
 800142a:	54d1      	strb	r1, [r2, r3]
		  for (uint8_t i = 0; i < 100; i++){
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	3301      	adds	r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2b63      	cmp	r3, #99	@ 0x63
 8001436:	d9f5      	bls.n	8001424 <HAL_UART_RxCpltCallback+0x20>
		  }
	  }
	  if (*rx_data != 13){
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <HAL_UART_RxCpltCallback+0x98>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b0d      	cmp	r3, #13
 800143e:	d00b      	beq.n	8001458 <HAL_UART_RxCpltCallback+0x54>
		  rx_buffer[rx_indx++] = rx_data[0];
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <HAL_UART_RxCpltCallback+0x90>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	b2d1      	uxtb	r1, r2
 8001448:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <HAL_UART_RxCpltCallback+0x90>)
 800144a:	7011      	strb	r1, [r2, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <HAL_UART_RxCpltCallback+0x98>)
 8001450:	7819      	ldrb	r1, [r3, #0]
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_UART_RxCpltCallback+0x94>)
 8001454:	5499      	strb	r1, [r3, r2]
 8001456:	e00b      	b.n	8001470 <HAL_UART_RxCpltCallback+0x6c>
	  }else{
		  rx_indx = 0;
 8001458:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <HAL_UART_RxCpltCallback+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
		  transfer_cplt = 1;
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <HAL_UART_RxCpltCallback+0x9c>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
		  //rx_buffer[rx_indx++] = 5;
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, 5);
 8001464:	2305      	movs	r3, #5
 8001466:	2202      	movs	r2, #2
 8001468:	490e      	ldr	r1, [pc, #56]	@ (80014a4 <HAL_UART_RxCpltCallback+0xa0>)
 800146a:	480f      	ldr	r0, [pc, #60]	@ (80014a8 <HAL_UART_RxCpltCallback+0xa4>)
 800146c:	f002 ffde 	bl	800442c <HAL_UART_Transmit>
	  }

	  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	490a      	ldr	r1, [pc, #40]	@ (800149c <HAL_UART_RxCpltCallback+0x98>)
 8001474:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <HAL_UART_RxCpltCallback+0xa4>)
 8001476:	f003 f867 	bl	8004548 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, rx_data, 1, 5);
 800147a:	2305      	movs	r3, #5
 800147c:	2201      	movs	r2, #1
 800147e:	4907      	ldr	r1, [pc, #28]	@ (800149c <HAL_UART_RxCpltCallback+0x98>)
 8001480:	4809      	ldr	r0, [pc, #36]	@ (80014a8 <HAL_UART_RxCpltCallback+0xa4>)
 8001482:	f002 ffd3 	bl	800442c <HAL_UART_Transmit>
  }
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40004400 	.word	0x40004400
 8001494:	200002d0 	.word	0x200002d0
 8001498:	200002d8 	.word	0x200002d8
 800149c:	200002d4 	.word	0x200002d4
 80014a0:	2000033c 	.word	0x2000033c
 80014a4:	08008f90 	.word	0x08008f90
 80014a8:	2000023c 	.word	0x2000023c

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <Error_Handler+0x8>

080014b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_MspInit+0x44>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c2:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <HAL_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_MspInit+0x44>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HAL_MspInit+0x44>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <HAL_MspInit+0x44>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_MspInit+0x44>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014ee:	f000 fe97 	bl	8002220 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001510:	d10b      	bne.n	800152a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_TIM_Base_MspInit+0x38>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <HAL_TIM_Base_MspInit+0x38>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6593      	str	r3, [r2, #88]	@ 0x58
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_TIM_Base_MspInit+0x38>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800155c:	d11c      	bne.n	8001598 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_TIM_MspPostInit+0x64>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a0f      	ldr	r2, [pc, #60]	@ (80015a0 <HAL_TIM_MspPostInit+0x64>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_TIM_MspPostInit+0x64>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800157a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001588:	2301      	movs	r3, #1
 800158a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4619      	mov	r1, r3
 8001592:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <HAL_TIM_MspPostInit+0x68>)
 8001594:	f000 fc06 	bl	8001da4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000400 	.word	0x48000400

080015a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09e      	sub	sp, #120	@ 0x78
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	2254      	movs	r2, #84	@ 0x54
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f005 fd84 	bl	80070d6 <memset>
  if(huart->Instance==USART2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a23      	ldr	r2, [pc, #140]	@ (8001660 <HAL_UART_MspInit+0xb8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d13e      	bne.n	8001656 <HAL_UART_MspInit+0xae>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 fb59 	bl	8002c9c <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015f0:	f7ff ff5c 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_UART_MspInit+0xbc>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001664 <HAL_UART_MspInit+0xbc>)
 80015fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_UART_MspInit+0xbc>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_UART_MspInit+0xbc>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <HAL_UART_MspInit+0xbc>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_UART_MspInit+0xbc>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001624:	230c      	movs	r3, #12
 8001626:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001634:	2307      	movs	r3, #7
 8001636:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001642:	f000 fbaf 	bl	8001da4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2026      	movs	r0, #38	@ 0x26
 800164c:	f000 fab5 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001650:	2026      	movs	r0, #38	@ 0x26
 8001652:	f000 facc 	bl	8001bee <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001656:	bf00      	nop
 8001658:	3778      	adds	r7, #120	@ 0x78
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40004400 	.word	0x40004400
 8001664:	40021000 	.word	0x40021000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <NMI_Handler+0x4>

08001670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <MemManage_Handler+0x4>

08001680 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <UsageFault_Handler+0x4>

08001690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016be:	f000 f961 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <USART2_IRQHandler+0x10>)
 80016ce:	f002 ff87 	bl	80045e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000023c 	.word	0x2000023c

080016dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_kill>:

int _kill(int pid, int sig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f6:	f005 fd41 	bl	800717c <__errno>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2216      	movs	r2, #22
 80016fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_exit>:

void _exit (int status)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffe7 	bl	80016ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800171e:	bf00      	nop
 8001720:	e7fd      	b.n	800171e <_exit+0x12>

08001722 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e00a      	b.n	800174a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001734:	f3af 8000 	nop.w
 8001738:	4601      	mov	r1, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	b2ca      	uxtb	r2, r1
 8001742:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	dbf0      	blt.n	8001734 <_read+0x12>
  }

  return len;
 8001752:	687b      	ldr	r3, [r7, #4]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e009      	b.n	8001782 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	dbf1      	blt.n	800176e <_write+0x12>
  }
  return len;
 800178a:	687b      	ldr	r3, [r7, #4]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_close>:

int _close(int file)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017bc:	605a      	str	r2, [r3, #4]
  return 0;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_isatty>:

int _isatty(int file)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	@ (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f005 fca6 	bl	800717c <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20020000 	.word	0x20020000
 800185c:	00000400 	.word	0x00000400
 8001860:	20000340 	.word	0x20000340
 8001864:	20000498 	.word	0x20000498

08001868 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <SystemInit+0x20>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <SystemInit+0x20>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800188c:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800188e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001890:	f7ff ffea 	bl	8001868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001896:	490d      	ldr	r1, [pc, #52]	@ (80018cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001898:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <LoopForever+0xe>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018ac:	4c0a      	ldr	r4, [pc, #40]	@ (80018d8 <LoopForever+0x16>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ba:	f005 fc65 	bl	8007188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018be:	f7ff fb31 	bl	8000f24 <main>

080018c2 <LoopForever>:

LoopForever:
    b LoopForever
 80018c2:	e7fe      	b.n	80018c2 <LoopForever>
  ldr   r0, =_estack
 80018c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018cc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018d0:	0800935c 	.word	0x0800935c
  ldr r2, =_sbss
 80018d4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018d8:	20000494 	.word	0x20000494

080018dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC1_2_IRQHandler>

080018de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 f95b 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ee:	200f      	movs	r0, #15
 80018f0:	f000 f80e 	bl	8001910 <HAL_InitTick>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	e001      	b.n	8001904 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001900:	f7ff fdda 	bl	80014b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001904:	79fb      	ldrb	r3, [r7, #7]

}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <HAL_InitTick+0x68>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d022      	beq.n	800196a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001924:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_InitTick+0x6c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <HAL_InitTick+0x68>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001930:	fbb1 f3f3 	udiv	r3, r1, r3
 8001934:	fbb2 f3f3 	udiv	r3, r2, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f966 	bl	8001c0a <HAL_SYSTICK_Config>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10f      	bne.n	8001964 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b0f      	cmp	r3, #15
 8001948:	d809      	bhi.n	800195e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194a:	2200      	movs	r2, #0
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	f04f 30ff 	mov.w	r0, #4294967295
 8001952:	f000 f932 	bl	8001bba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <HAL_InitTick+0x70>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	e007      	b.n	800196e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
 8001962:	e004      	b.n	800196e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e001      	b.n	800196e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000008 	.word	0x20000008
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_IncTick+0x1c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_IncTick+0x20>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4413      	add	r3, r2
 8001992:	4a03      	ldr	r2, [pc, #12]	@ (80019a0 <HAL_IncTick+0x1c>)
 8001994:	6013      	str	r3, [r2, #0]
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000344 	.word	0x20000344
 80019a4:	20000008 	.word	0x20000008

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	@ (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000344 	.word	0x20000344

080019c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff ffee 	bl	80019a8 <HAL_GetTick>
 80019cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d004      	beq.n	80019e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <HAL_Delay+0x40>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e4:	bf00      	nop
 80019e6:	f7ff ffdf 	bl	80019a8 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d8f7      	bhi.n	80019e6 <HAL_Delay+0x26>
  {
  }
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000008 	.word	0x20000008

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	@ (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	@ (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	@ (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	@ 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	@ 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff29 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff40 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff90 	bl	8001af8 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5f 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff33 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffa4 	bl	8001b60 <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d005      	beq.n	8001c46 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e037      	b.n	8001cb6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 020e 	bic.w	r2, r2, #14
 8001c54:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c64:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	f003 021f 	and.w	r2, r3, #31
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	2101      	movs	r1, #1
 8001c84:	fa01 f202 	lsl.w	r2, r1, r2
 8001c88:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c92:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00c      	beq.n	8001cb6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001caa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001cb4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d00d      	beq.n	8001d08 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	e047      	b.n	8001d98 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 020e 	bic.w	r2, r2, #14
 8001d16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00c      	beq.n	8001d78 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
    }
  }
  return status;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001db2:	e15a      	b.n	800206a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 814c 	beq.w	8002064 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d005      	beq.n	8001de4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d130      	bne.n	8001e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 0201 	and.w	r2, r3, #1
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d017      	beq.n	8001e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d123      	bne.n	8001ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	6939      	ldr	r1, [r7, #16]
 8001ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0203 	and.w	r2, r3, #3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80a6 	beq.w	8002064 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f18:	4b5b      	ldr	r3, [pc, #364]	@ (8002088 <HAL_GPIO_Init+0x2e4>)
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1c:	4a5a      	ldr	r2, [pc, #360]	@ (8002088 <HAL_GPIO_Init+0x2e4>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f24:	4b58      	ldr	r3, [pc, #352]	@ (8002088 <HAL_GPIO_Init+0x2e4>)
 8001f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f30:	4a56      	ldr	r2, [pc, #344]	@ (800208c <HAL_GPIO_Init+0x2e8>)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f5a:	d01f      	beq.n	8001f9c <HAL_GPIO_Init+0x1f8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a4c      	ldr	r2, [pc, #304]	@ (8002090 <HAL_GPIO_Init+0x2ec>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d019      	beq.n	8001f98 <HAL_GPIO_Init+0x1f4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a4b      	ldr	r2, [pc, #300]	@ (8002094 <HAL_GPIO_Init+0x2f0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d013      	beq.n	8001f94 <HAL_GPIO_Init+0x1f0>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8002098 <HAL_GPIO_Init+0x2f4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00d      	beq.n	8001f90 <HAL_GPIO_Init+0x1ec>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a49      	ldr	r2, [pc, #292]	@ (800209c <HAL_GPIO_Init+0x2f8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d007      	beq.n	8001f8c <HAL_GPIO_Init+0x1e8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a48      	ldr	r2, [pc, #288]	@ (80020a0 <HAL_GPIO_Init+0x2fc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d101      	bne.n	8001f88 <HAL_GPIO_Init+0x1e4>
 8001f84:	2305      	movs	r3, #5
 8001f86:	e00a      	b.n	8001f9e <HAL_GPIO_Init+0x1fa>
 8001f88:	2306      	movs	r3, #6
 8001f8a:	e008      	b.n	8001f9e <HAL_GPIO_Init+0x1fa>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x1fa>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x1fa>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x1fa>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x1fa>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fae:	4937      	ldr	r1, [pc, #220]	@ (800208c <HAL_GPIO_Init+0x2e8>)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fbc:	4b39      	ldr	r3, [pc, #228]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fe0:	4a30      	ldr	r2, [pc, #192]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800200a:	4a26      	ldr	r2, [pc, #152]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002010:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002034:	4a1b      	ldr	r2, [pc, #108]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800205e:	4a11      	ldr	r2, [pc, #68]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3301      	adds	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f47f ae9d 	bne.w	8001db4 <HAL_GPIO_Init+0x10>
  }
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40021000 	.word	0x40021000
 800208c:	40010000 	.word	0x40010000
 8002090:	48000400 	.word	0x48000400
 8002094:	48000800 	.word	0x48000800
 8002098:	48000c00 	.word	0x48000c00
 800209c:	48001000 	.word	0x48001000
 80020a0:	48001400 	.word	0x48001400
 80020a4:	40010400 	.word	0x40010400

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d141      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f2:	d131      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f4:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020fa:	4a46      	ldr	r2, [pc, #280]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002100:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002104:	4b43      	ldr	r3, [pc, #268]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800210c:	4a41      	ldr	r2, [pc, #260]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002112:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002114:	4b40      	ldr	r3, [pc, #256]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2232      	movs	r2, #50	@ 0x32
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	4a3f      	ldr	r2, [pc, #252]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	0c9b      	lsrs	r3, r3, #18
 8002126:	3301      	adds	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800212a:	e002      	b.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3b01      	subs	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002132:	4b38      	ldr	r3, [pc, #224]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213e:	d102      	bne.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f2      	bne.n	800212c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002146:	4b33      	ldr	r3, [pc, #204]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002152:	d158      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e057      	b.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002158:	4b2e      	ldr	r3, [pc, #184]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800215e:	4a2d      	ldr	r2, [pc, #180]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002164:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002168:	e04d      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002170:	d141      	bne.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002172:	4b28      	ldr	r3, [pc, #160]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217e:	d131      	bne.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002180:	4b24      	ldr	r3, [pc, #144]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002186:	4a23      	ldr	r2, [pc, #140]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800218c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002190:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002198:	4a1e      	ldr	r2, [pc, #120]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800219e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2232      	movs	r2, #50	@ 0x32
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	4a1c      	ldr	r2, [pc, #112]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	0c9b      	lsrs	r3, r3, #18
 80021b2:	3301      	adds	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b6:	e002      	b.n	80021be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ca:	d102      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f2      	bne.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021de:	d112      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e011      	b.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021f4:	e007      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021fe:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002200:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002204:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40007000 	.word	0x40007000
 8002218:	20000000 	.word	0x20000000
 800221c:	431bde83 	.word	0x431bde83

08002220 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800222a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800222e:	6093      	str	r3, [r2, #8]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e2fe      	b.n	8002850 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d075      	beq.n	800234a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225e:	4b97      	ldr	r3, [pc, #604]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002268:	4b94      	ldr	r3, [pc, #592]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d102      	bne.n	800227e <HAL_RCC_OscConfig+0x3e>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d002      	beq.n	8002284 <HAL_RCC_OscConfig+0x44>
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d10b      	bne.n	800229c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	4b8d      	ldr	r3, [pc, #564]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d05b      	beq.n	8002348 <HAL_RCC_OscConfig+0x108>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d157      	bne.n	8002348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e2d9      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a4:	d106      	bne.n	80022b4 <HAL_RCC_OscConfig+0x74>
 80022a6:	4b85      	ldr	r3, [pc, #532]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a84      	ldr	r2, [pc, #528]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e01d      	b.n	80022f0 <HAL_RCC_OscConfig+0xb0>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x98>
 80022be:	4b7f      	ldr	r3, [pc, #508]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a7e      	ldr	r2, [pc, #504]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b7c      	ldr	r3, [pc, #496]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7b      	ldr	r2, [pc, #492]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0xb0>
 80022d8:	4b78      	ldr	r3, [pc, #480]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a77      	ldr	r2, [pc, #476]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b75      	ldr	r3, [pc, #468]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a74      	ldr	r2, [pc, #464]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7ff fb56 	bl	80019a8 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7ff fb52 	bl	80019a8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e29e      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002312:	4b6a      	ldr	r3, [pc, #424]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0xc0>
 800231e:	e014      	b.n	800234a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff fb42 	bl	80019a8 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fb3e 	bl	80019a8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e28a      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233a:	4b60      	ldr	r3, [pc, #384]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0xe8>
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4b59      	ldr	r3, [pc, #356]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002360:	4b56      	ldr	r3, [pc, #344]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	d102      	bne.n	8002376 <HAL_RCC_OscConfig+0x136>
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d002      	beq.n	800237c <HAL_RCC_OscConfig+0x13c>
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d11f      	bne.n	80023bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	4b4f      	ldr	r3, [pc, #316]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_OscConfig+0x154>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e25d      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b49      	ldr	r3, [pc, #292]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	4946      	ldr	r1, [pc, #280]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023a8:	4b45      	ldr	r3, [pc, #276]	@ (80024c0 <HAL_RCC_OscConfig+0x280>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff faaf 	bl	8001910 <HAL_InitTick>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d043      	beq.n	8002440 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e249      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d023      	beq.n	800240c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c4:	4b3d      	ldr	r3, [pc, #244]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3c      	ldr	r2, [pc, #240]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7ff faea 	bl	80019a8 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d8:	f7ff fae6 	bl	80019a8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e232      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ea:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b31      	ldr	r3, [pc, #196]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	061b      	lsls	r3, r3, #24
 8002404:	492d      	ldr	r1, [pc, #180]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
 800240a:	e01a      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240c:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2a      	ldr	r2, [pc, #168]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002412:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff fac6 	bl	80019a8 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002420:	f7ff fac2 	bl	80019a8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e20e      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002432:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x1e0>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d041      	beq.n	80024d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d01c      	beq.n	8002490 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002456:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245c:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7ff fa9f 	bl	80019a8 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246e:	f7ff fa9b 	bl	80019a8 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1e7      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ef      	beq.n	800246e <HAL_RCC_OscConfig+0x22e>
 800248e:	e020      	b.n	80024d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002490:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002496:	4a09      	ldr	r2, [pc, #36]	@ (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7ff fa82 	bl	80019a8 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a6:	e00d      	b.n	80024c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a8:	f7ff fa7e 	bl	80019a8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d906      	bls.n	80024c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1ca      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c4:	4b8c      	ldr	r3, [pc, #560]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80024c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1ea      	bne.n	80024a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80a6 	beq.w	800262c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024e4:	4b84      	ldr	r3, [pc, #528]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2b4>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x2b6>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b7f      	ldr	r3, [pc, #508]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	4a7e      	ldr	r2, [pc, #504]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002504:	6593      	str	r3, [r2, #88]	@ 0x58
 8002506:	4b7c      	ldr	r3, [pc, #496]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002516:	4b79      	ldr	r3, [pc, #484]	@ (80026fc <HAL_RCC_OscConfig+0x4bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002522:	4b76      	ldr	r3, [pc, #472]	@ (80026fc <HAL_RCC_OscConfig+0x4bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a75      	ldr	r2, [pc, #468]	@ (80026fc <HAL_RCC_OscConfig+0x4bc>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252e:	f7ff fa3b 	bl	80019a8 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7ff fa37 	bl	80019a8 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e183      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	4b6c      	ldr	r3, [pc, #432]	@ (80026fc <HAL_RCC_OscConfig+0x4bc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d108      	bne.n	800256e <HAL_RCC_OscConfig+0x32e>
 800255c:	4b66      	ldr	r3, [pc, #408]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002562:	4a65      	ldr	r2, [pc, #404]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800256c:	e024      	b.n	80025b8 <HAL_RCC_OscConfig+0x378>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b05      	cmp	r3, #5
 8002574:	d110      	bne.n	8002598 <HAL_RCC_OscConfig+0x358>
 8002576:	4b60      	ldr	r3, [pc, #384]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257c:	4a5e      	ldr	r2, [pc, #376]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002586:	4b5c      	ldr	r3, [pc, #368]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258c:	4a5a      	ldr	r2, [pc, #360]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002596:	e00f      	b.n	80025b8 <HAL_RCC_OscConfig+0x378>
 8002598:	4b57      	ldr	r3, [pc, #348]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259e:	4a56      	ldr	r2, [pc, #344]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a8:	4b53      	ldr	r3, [pc, #332]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ae:	4a52      	ldr	r2, [pc, #328]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d016      	beq.n	80025ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7ff f9f2 	bl	80019a8 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c8:	f7ff f9ee 	bl	80019a8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e138      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025de:	4b46      	ldr	r3, [pc, #280]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ed      	beq.n	80025c8 <HAL_RCC_OscConfig+0x388>
 80025ec:	e015      	b.n	800261a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7ff f9db 	bl	80019a8 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7ff f9d7 	bl	80019a8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e121      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800260c:	4b3a      	ldr	r3, [pc, #232]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1ed      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800261a:	7ffb      	ldrb	r3, [r7, #31]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002620:	4b35      	ldr	r3, [pc, #212]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002624:	4a34      	ldr	r2, [pc, #208]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800262a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d03c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01c      	beq.n	800267a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002640:	4b2d      	ldr	r3, [pc, #180]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002642:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002646:	4a2c      	ldr	r2, [pc, #176]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7ff f9aa 	bl	80019a8 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002658:	f7ff f9a6 	bl	80019a8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0f2      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800266a:	4b23      	ldr	r3, [pc, #140]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800266c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ef      	beq.n	8002658 <HAL_RCC_OscConfig+0x418>
 8002678:	e01b      	b.n	80026b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800267a:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800267c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002680:	4a1d      	ldr	r2, [pc, #116]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268a:	f7ff f98d 	bl	80019a8 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002692:	f7ff f989 	bl	80019a8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0d5      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026a4:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80026a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ef      	bne.n	8002692 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80c9 	beq.w	800284e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026bc:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	f000 8083 	beq.w	80027d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d15e      	bne.n	8002790 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a08      	ldr	r2, [pc, #32]	@ (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80026d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7ff f963 	bl	80019a8 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	e00c      	b.n	8002700 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7ff f95f 	bl	80019a8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d905      	bls.n	8002700 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e0ab      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b55      	ldr	r3, [pc, #340]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ec      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270c:	4b52      	ldr	r3, [pc, #328]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4b52      	ldr	r3, [pc, #328]	@ (800285c <HAL_RCC_OscConfig+0x61c>)
 8002712:	4013      	ands	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6a11      	ldr	r1, [r2, #32]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800271c:	3a01      	subs	r2, #1
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002726:	0212      	lsls	r2, r2, #8
 8002728:	4311      	orrs	r1, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800272e:	0852      	lsrs	r2, r2, #1
 8002730:	3a01      	subs	r2, #1
 8002732:	0552      	lsls	r2, r2, #21
 8002734:	4311      	orrs	r1, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	3a01      	subs	r2, #1
 800273e:	0652      	lsls	r2, r2, #25
 8002740:	4311      	orrs	r1, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002746:	06d2      	lsls	r2, r2, #27
 8002748:	430a      	orrs	r2, r1
 800274a:	4943      	ldr	r1, [pc, #268]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 800274c:	4313      	orrs	r3, r2
 800274e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b41      	ldr	r3, [pc, #260]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a40      	ldr	r2, [pc, #256]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800275c:	4b3e      	ldr	r3, [pc, #248]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a3d      	ldr	r2, [pc, #244]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002766:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff f91e 	bl	80019a8 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7ff f91a 	bl	80019a8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e066      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	4b35      	ldr	r3, [pc, #212]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x530>
 800278e:	e05e      	b.n	800284e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002790:	4b31      	ldr	r3, [pc, #196]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a30      	ldr	r2, [pc, #192]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 8002796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7ff f904 	bl	80019a8 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7ff f900 	bl	80019a8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e04c      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b6:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027c2:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	4924      	ldr	r1, [pc, #144]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 80027c8:	4b25      	ldr	r3, [pc, #148]	@ (8002860 <HAL_RCC_OscConfig+0x620>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	60cb      	str	r3, [r1, #12]
 80027ce:	e03e      	b.n	800284e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e039      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <HAL_RCC_OscConfig+0x618>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d12c      	bne.n	800284a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	3b01      	subs	r3, #1
 80027fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d123      	bne.n	800284a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d11b      	bne.n	800284a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d113      	bne.n	800284a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	3b01      	subs	r3, #1
 8002830:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d109      	bne.n	800284a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	3b01      	subs	r3, #1
 8002844:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d001      	beq.n	800284e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	019f800c 	.word	0x019f800c
 8002860:	feeefffc 	.word	0xfeeefffc

08002864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e11e      	b.n	8002aba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b91      	ldr	r3, [pc, #580]	@ (8002ac4 <HAL_RCC_ClockConfig+0x260>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d910      	bls.n	80028ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b8e      	ldr	r3, [pc, #568]	@ (8002ac4 <HAL_RCC_ClockConfig+0x260>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 020f 	bic.w	r2, r3, #15
 8002892:	498c      	ldr	r1, [pc, #560]	@ (8002ac4 <HAL_RCC_ClockConfig+0x260>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b8a      	ldr	r3, [pc, #552]	@ (8002ac4 <HAL_RCC_ClockConfig+0x260>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e106      	b.n	8002aba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d073      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d129      	bne.n	8002914 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c0:	4b81      	ldr	r3, [pc, #516]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0f4      	b.n	8002aba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028d0:	f000 f99e 	bl	8002c10 <RCC_GetSysClockFreqFromPLLSource>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4a7c      	ldr	r2, [pc, #496]	@ (8002acc <HAL_RCC_ClockConfig+0x268>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d93f      	bls.n	800295e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028de:	4b7a      	ldr	r3, [pc, #488]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d033      	beq.n	800295e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d12f      	bne.n	800295e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028fe:	4b72      	ldr	r3, [pc, #456]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002906:	4a70      	ldr	r2, [pc, #448]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800290c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e024      	b.n	800295e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d107      	bne.n	800292c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0c6      	b.n	8002aba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292c:	4b66      	ldr	r3, [pc, #408]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0be      	b.n	8002aba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800293c:	f000 f8ce 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002940:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4a61      	ldr	r2, [pc, #388]	@ (8002acc <HAL_RCC_ClockConfig+0x268>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d909      	bls.n	800295e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800294a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002952:	4a5d      	ldr	r2, [pc, #372]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002958:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800295a:	2380      	movs	r3, #128	@ 0x80
 800295c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800295e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f023 0203 	bic.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4957      	ldr	r1, [pc, #348]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002970:	f7ff f81a 	bl	80019a8 <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	e00a      	b.n	800298e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002978:	f7ff f816 	bl	80019a8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e095      	b.n	8002aba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 020c 	and.w	r2, r3, #12
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	429a      	cmp	r2, r3
 800299e:	d1eb      	bne.n	8002978 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d023      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b8:	4b43      	ldr	r3, [pc, #268]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a42      	ldr	r2, [pc, #264]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 80029be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029d0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029d8:	4a3b      	ldr	r2, [pc, #236]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 80029da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b39      	ldr	r3, [pc, #228]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4936      	ldr	r1, [pc, #216]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b80      	cmp	r3, #128	@ 0x80
 80029f8:	d105      	bne.n	8002a06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029fa:	4b33      	ldr	r3, [pc, #204]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4a32      	ldr	r2, [pc, #200]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002a00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a06:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac4 <HAL_RCC_ClockConfig+0x260>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d21d      	bcs.n	8002a50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <HAL_RCC_ClockConfig+0x260>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 020f 	bic.w	r2, r3, #15
 8002a1c:	4929      	ldr	r1, [pc, #164]	@ (8002ac4 <HAL_RCC_ClockConfig+0x260>)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a24:	f7fe ffc0 	bl	80019a8 <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7fe ffbc 	bl	80019a8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e03b      	b.n	8002aba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	@ (8002ac4 <HAL_RCC_ClockConfig+0x260>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1ed      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4917      	ldr	r1, [pc, #92]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	490f      	ldr	r1, [pc, #60]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a8e:	f000 f825 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002a92:	4602      	mov	r2, r0
 8002a94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <HAL_RCC_ClockConfig+0x264>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	490c      	ldr	r1, [pc, #48]	@ (8002ad0 <HAL_RCC_ClockConfig+0x26c>)
 8002aa0:	5ccb      	ldrb	r3, [r1, r3]
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad4 <HAL_RCC_ClockConfig+0x270>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_RCC_ClockConfig+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe ff2c 	bl	8001910 <HAL_InitTick>
 8002ab8:	4603      	mov	r3, r0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	04c4b400 	.word	0x04c4b400
 8002ad0:	08008f94 	.word	0x08008f94
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000004 	.word	0x20000004

08002adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d102      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aee:	4b2a      	ldr	r3, [pc, #168]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	e047      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002af4:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d102      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b00:	4b26      	ldr	r3, [pc, #152]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	e03e      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b06:	4b23      	ldr	r3, [pc, #140]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d136      	bne.n	8002b80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	3301      	adds	r3, #1
 8002b28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d10c      	bne.n	8002b4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b30:	4a1a      	ldr	r2, [pc, #104]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	4a16      	ldr	r2, [pc, #88]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3a:	68d2      	ldr	r2, [r2, #12]
 8002b3c:	0a12      	lsrs	r2, r2, #8
 8002b3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	617b      	str	r3, [r7, #20]
      break;
 8002b48:	e00c      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b4a:	4a13      	ldr	r2, [pc, #76]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4a10      	ldr	r2, [pc, #64]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b54:	68d2      	ldr	r2, [r2, #12]
 8002b56:	0a12      	lsrs	r2, r2, #8
 8002b58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]
      break;
 8002b62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b64:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	0e5b      	lsrs	r3, r3, #25
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	e001      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b84:	693b      	ldr	r3, [r7, #16]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	00f42400 	.word	0x00f42400
 8002b9c:	007a1200 	.word	0x007a1200

08002ba0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	@ (8002bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bbc:	f7ff fff0 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4904      	ldr	r1, [pc, #16]	@ (8002be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08008fa4 	.word	0x08008fa4

08002be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002be8:	f7ff ffda 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	0adb      	lsrs	r3, r3, #11
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4904      	ldr	r1, [pc, #16]	@ (8002c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08008fa4 	.word	0x08008fa4

08002c10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c16:	4b1e      	ldr	r3, [pc, #120]	@ (8002c90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d10c      	bne.n	8002c4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c34:	4a17      	ldr	r2, [pc, #92]	@ (8002c94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c3e:	68d2      	ldr	r2, [r2, #12]
 8002c40:	0a12      	lsrs	r2, r2, #8
 8002c42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	617b      	str	r3, [r7, #20]
    break;
 8002c4c:	e00c      	b.n	8002c68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c4e:	4a12      	ldr	r2, [pc, #72]	@ (8002c98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4a0e      	ldr	r2, [pc, #56]	@ (8002c90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c58:	68d2      	ldr	r2, [r2, #12]
 8002c5a:	0a12      	lsrs	r2, r2, #8
 8002c5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
    break;
 8002c66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c68:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0e5b      	lsrs	r3, r3, #25
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	3301      	adds	r3, #1
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c82:	687b      	ldr	r3, [r7, #4]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40021000 	.word	0x40021000
 8002c94:	007a1200 	.word	0x007a1200
 8002c98:	00f42400 	.word	0x00f42400

08002c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ca8:	2300      	movs	r3, #0
 8002caa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8098 	beq.w	8002dea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cbe:	4b43      	ldr	r3, [pc, #268]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10d      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	4b40      	ldr	r3, [pc, #256]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cce:	4a3f      	ldr	r2, [pc, #252]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a39      	ldr	r2, [pc, #228]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe fe59 	bl	80019a8 <HAL_GetTick>
 8002cf6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cf8:	e009      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7fe fe55 	bl	80019a8 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d902      	bls.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	74fb      	strb	r3, [r7, #19]
        break;
 8002d0c:	e005      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d0e:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ef      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d159      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d20:	4b2a      	ldr	r3, [pc, #168]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01e      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d019      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d3c:	4b23      	ldr	r3, [pc, #140]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d48:	4b20      	ldr	r3, [pc, #128]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d58:	4b1c      	ldr	r3, [pc, #112]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d68:	4a18      	ldr	r2, [pc, #96]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d016      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fe15 	bl	80019a8 <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d80:	e00b      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe fe11 	bl	80019a8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d902      	bls.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	74fb      	strb	r3, [r7, #19]
            break;
 8002d98:	e006      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ec      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dae:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dbc:	4903      	ldr	r1, [pc, #12]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	74bb      	strb	r3, [r7, #18]
 8002dca:	e005      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd8:	7c7b      	ldrb	r3, [r7, #17]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4ba7      	ldr	r3, [pc, #668]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	4aa6      	ldr	r2, [pc, #664]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002df6:	4ba1      	ldr	r3, [pc, #644]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfc:	f023 0203 	bic.w	r2, r3, #3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	499d      	ldr	r1, [pc, #628]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e18:	4b98      	ldr	r3, [pc, #608]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	f023 020c 	bic.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	4995      	ldr	r1, [pc, #596]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e3a:	4b90      	ldr	r3, [pc, #576]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	498c      	ldr	r1, [pc, #560]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e5c:	4b87      	ldr	r3, [pc, #540]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	4984      	ldr	r1, [pc, #528]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	497b      	ldr	r1, [pc, #492]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ea0:	4b76      	ldr	r3, [pc, #472]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	4973      	ldr	r1, [pc, #460]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	496a      	ldr	r1, [pc, #424]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ee4:	4b65      	ldr	r3, [pc, #404]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4962      	ldr	r1, [pc, #392]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f06:	4b5d      	ldr	r3, [pc, #372]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	4959      	ldr	r1, [pc, #356]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f28:	4b54      	ldr	r3, [pc, #336]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f2e:	f023 0203 	bic.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f36:	4951      	ldr	r1, [pc, #324]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f58:	4948      	ldr	r1, [pc, #288]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d015      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f6c:	4b43      	ldr	r3, [pc, #268]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	4940      	ldr	r1, [pc, #256]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a3a      	ldr	r2, [pc, #232]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f96:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d015      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fa4:	4b35      	ldr	r3, [pc, #212]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002faa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb2:	4932      	ldr	r1, [pc, #200]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fc2:	d105      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fdc:	4b27      	ldr	r3, [pc, #156]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fea:	4924      	ldr	r1, [pc, #144]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ffa:	d105      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a1e      	ldr	r2, [pc, #120]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003006:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003014:	4b19      	ldr	r3, [pc, #100]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003022:	4916      	ldr	r1, [pc, #88]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003032:	d105      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003034:	4b11      	ldr	r3, [pc, #68]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4a10      	ldr	r2, [pc, #64]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800303e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d019      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003052:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	4908      	ldr	r1, [pc, #32]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800306a:	d109      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800306c:	4b03      	ldr	r3, [pc, #12]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a02      	ldr	r2, [pc, #8]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003076:	60d3      	str	r3, [r2, #12]
 8003078:	e002      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800308c:	4b29      	ldr	r3, [pc, #164]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003092:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	4926      	ldr	r1, [pc, #152]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030aa:	d105      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030ac:	4b21      	ldr	r3, [pc, #132]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a20      	ldr	r2, [pc, #128]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d015      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80030c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d2:	4918      	ldr	r1, [pc, #96]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e2:	d105      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030e4:	4b13      	ldr	r3, [pc, #76]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a12      	ldr	r2, [pc, #72]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d015      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003102:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310a:	490a      	ldr	r1, [pc, #40]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003116:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800311a:	d105      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4a04      	ldr	r2, [pc, #16]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003126:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003128:	7cbb      	ldrb	r3, [r7, #18]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e049      	b.n	80031de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe f9ce 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f000 fbd2 	bl	8003920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e049      	b.n	800328c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f841 	bl	8003294 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 fb7b 	bl	8003920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_TIM_PWM_Start+0x24>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e03c      	b.n	8003346 <HAL_TIM_PWM_Start+0x9e>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d109      	bne.n	80032e6 <HAL_TIM_PWM_Start+0x3e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	e02f      	b.n	8003346 <HAL_TIM_PWM_Start+0x9e>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d109      	bne.n	8003300 <HAL_TIM_PWM_Start+0x58>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e022      	b.n	8003346 <HAL_TIM_PWM_Start+0x9e>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d109      	bne.n	800331a <HAL_TIM_PWM_Start+0x72>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	e015      	b.n	8003346 <HAL_TIM_PWM_Start+0x9e>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b10      	cmp	r3, #16
 800331e:	d109      	bne.n	8003334 <HAL_TIM_PWM_Start+0x8c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e008      	b.n	8003346 <HAL_TIM_PWM_Start+0x9e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0a6      	b.n	800349c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0xb6>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800335c:	e023      	b.n	80033a6 <HAL_TIM_PWM_Start+0xfe>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0xc6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800336c:	e01b      	b.n	80033a6 <HAL_TIM_PWM_Start+0xfe>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0xd6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800337c:	e013      	b.n	80033a6 <HAL_TIM_PWM_Start+0xfe>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0xe6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800338c:	e00b      	b.n	80033a6 <HAL_TIM_PWM_Start+0xfe>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b10      	cmp	r3, #16
 8003392:	d104      	bne.n	800339e <HAL_TIM_PWM_Start+0xf6>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800339c:	e003      	b.n	80033a6 <HAL_TIM_PWM_Start+0xfe>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2201      	movs	r2, #1
 80033ac:	6839      	ldr	r1, [r7, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 ff30 	bl	8004214 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a3a      	ldr	r2, [pc, #232]	@ (80034a4 <HAL_TIM_PWM_Start+0x1fc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d018      	beq.n	80033f0 <HAL_TIM_PWM_Start+0x148>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a39      	ldr	r2, [pc, #228]	@ (80034a8 <HAL_TIM_PWM_Start+0x200>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <HAL_TIM_PWM_Start+0x148>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a37      	ldr	r2, [pc, #220]	@ (80034ac <HAL_TIM_PWM_Start+0x204>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00e      	beq.n	80033f0 <HAL_TIM_PWM_Start+0x148>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a36      	ldr	r2, [pc, #216]	@ (80034b0 <HAL_TIM_PWM_Start+0x208>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d009      	beq.n	80033f0 <HAL_TIM_PWM_Start+0x148>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a34      	ldr	r2, [pc, #208]	@ (80034b4 <HAL_TIM_PWM_Start+0x20c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_TIM_PWM_Start+0x148>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a33      	ldr	r2, [pc, #204]	@ (80034b8 <HAL_TIM_PWM_Start+0x210>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_TIM_PWM_Start+0x14c>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_TIM_PWM_Start+0x14e>
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a25      	ldr	r2, [pc, #148]	@ (80034a4 <HAL_TIM_PWM_Start+0x1fc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d022      	beq.n	800345a <HAL_TIM_PWM_Start+0x1b2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800341c:	d01d      	beq.n	800345a <HAL_TIM_PWM_Start+0x1b2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a26      	ldr	r2, [pc, #152]	@ (80034bc <HAL_TIM_PWM_Start+0x214>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d018      	beq.n	800345a <HAL_TIM_PWM_Start+0x1b2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a24      	ldr	r2, [pc, #144]	@ (80034c0 <HAL_TIM_PWM_Start+0x218>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_TIM_PWM_Start+0x1b2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a23      	ldr	r2, [pc, #140]	@ (80034c4 <HAL_TIM_PWM_Start+0x21c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_TIM_PWM_Start+0x1b2>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a19      	ldr	r2, [pc, #100]	@ (80034a8 <HAL_TIM_PWM_Start+0x200>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_TIM_PWM_Start+0x1b2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a18      	ldr	r2, [pc, #96]	@ (80034ac <HAL_TIM_PWM_Start+0x204>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_TIM_PWM_Start+0x1b2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <HAL_TIM_PWM_Start+0x210>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d115      	bne.n	8003486 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	4b19      	ldr	r3, [pc, #100]	@ (80034c8 <HAL_TIM_PWM_Start+0x220>)
 8003462:	4013      	ands	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b06      	cmp	r3, #6
 800346a:	d015      	beq.n	8003498 <HAL_TIM_PWM_Start+0x1f0>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003472:	d011      	beq.n	8003498 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003484:	e008      	b.n	8003498 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0201 	orr.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e000      	b.n	800349a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003498:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40013400 	.word	0x40013400
 80034ac:	40014000 	.word	0x40014000
 80034b0:	40014400 	.word	0x40014400
 80034b4:	40014800 	.word	0x40014800
 80034b8:	40015000 	.word	0x40015000
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40000c00 	.word	0x40000c00
 80034c8:	00010007 	.word	0x00010007

080034cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e0ff      	b.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b14      	cmp	r3, #20
 80034f6:	f200 80f0 	bhi.w	80036da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003555 	.word	0x08003555
 8003504:	080036db 	.word	0x080036db
 8003508:	080036db 	.word	0x080036db
 800350c:	080036db 	.word	0x080036db
 8003510:	08003595 	.word	0x08003595
 8003514:	080036db 	.word	0x080036db
 8003518:	080036db 	.word	0x080036db
 800351c:	080036db 	.word	0x080036db
 8003520:	080035d7 	.word	0x080035d7
 8003524:	080036db 	.word	0x080036db
 8003528:	080036db 	.word	0x080036db
 800352c:	080036db 	.word	0x080036db
 8003530:	08003617 	.word	0x08003617
 8003534:	080036db 	.word	0x080036db
 8003538:	080036db 	.word	0x080036db
 800353c:	080036db 	.word	0x080036db
 8003540:	08003659 	.word	0x08003659
 8003544:	080036db 	.word	0x080036db
 8003548:	080036db 	.word	0x080036db
 800354c:	080036db 	.word	0x080036db
 8003550:	08003699 	.word	0x08003699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fa94 	bl	8003a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0208 	orr.w	r2, r2, #8
 800356e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0204 	bic.w	r2, r2, #4
 800357e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6999      	ldr	r1, [r3, #24]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	619a      	str	r2, [r3, #24]
      break;
 8003592:	e0a5      	b.n	80036e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fb0e 	bl	8003bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6999      	ldr	r1, [r3, #24]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	021a      	lsls	r2, r3, #8
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	619a      	str	r2, [r3, #24]
      break;
 80035d4:	e084      	b.n	80036e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fb81 	bl	8003ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0208 	orr.w	r2, r2, #8
 80035f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0204 	bic.w	r2, r2, #4
 8003600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69d9      	ldr	r1, [r3, #28]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	61da      	str	r2, [r3, #28]
      break;
 8003614:	e064      	b.n	80036e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fbf3 	bl	8003e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69d9      	ldr	r1, [r3, #28]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	021a      	lsls	r2, r3, #8
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	61da      	str	r2, [r3, #28]
      break;
 8003656:	e043      	b.n	80036e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fc66 	bl	8003f30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0208 	orr.w	r2, r2, #8
 8003672:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0204 	bic.w	r2, r2, #4
 8003682:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003696:	e023      	b.n	80036e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fcb0 	bl	8004004 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80036d8:	e002      	b.n	80036e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
      break;
 80036de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop

080036f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_TIM_ConfigClockSource+0x1c>
 800370c:	2302      	movs	r3, #2
 800370e:	e0f6      	b.n	80038fe <HAL_TIM_ConfigClockSource+0x20a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800372e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800373a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a6f      	ldr	r2, [pc, #444]	@ (8003908 <HAL_TIM_ConfigClockSource+0x214>)
 800374a:	4293      	cmp	r3, r2
 800374c:	f000 80c1 	beq.w	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003750:	4a6d      	ldr	r2, [pc, #436]	@ (8003908 <HAL_TIM_ConfigClockSource+0x214>)
 8003752:	4293      	cmp	r3, r2
 8003754:	f200 80c6 	bhi.w	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003758:	4a6c      	ldr	r2, [pc, #432]	@ (800390c <HAL_TIM_ConfigClockSource+0x218>)
 800375a:	4293      	cmp	r3, r2
 800375c:	f000 80b9 	beq.w	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003760:	4a6a      	ldr	r2, [pc, #424]	@ (800390c <HAL_TIM_ConfigClockSource+0x218>)
 8003762:	4293      	cmp	r3, r2
 8003764:	f200 80be 	bhi.w	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003768:	4a69      	ldr	r2, [pc, #420]	@ (8003910 <HAL_TIM_ConfigClockSource+0x21c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	f000 80b1 	beq.w	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003770:	4a67      	ldr	r2, [pc, #412]	@ (8003910 <HAL_TIM_ConfigClockSource+0x21c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	f200 80b6 	bhi.w	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003778:	4a66      	ldr	r2, [pc, #408]	@ (8003914 <HAL_TIM_ConfigClockSource+0x220>)
 800377a:	4293      	cmp	r3, r2
 800377c:	f000 80a9 	beq.w	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003780:	4a64      	ldr	r2, [pc, #400]	@ (8003914 <HAL_TIM_ConfigClockSource+0x220>)
 8003782:	4293      	cmp	r3, r2
 8003784:	f200 80ae 	bhi.w	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003788:	4a63      	ldr	r2, [pc, #396]	@ (8003918 <HAL_TIM_ConfigClockSource+0x224>)
 800378a:	4293      	cmp	r3, r2
 800378c:	f000 80a1 	beq.w	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003790:	4a61      	ldr	r2, [pc, #388]	@ (8003918 <HAL_TIM_ConfigClockSource+0x224>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f200 80a6 	bhi.w	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003798:	4a60      	ldr	r2, [pc, #384]	@ (800391c <HAL_TIM_ConfigClockSource+0x228>)
 800379a:	4293      	cmp	r3, r2
 800379c:	f000 8099 	beq.w	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 80037a0:	4a5e      	ldr	r2, [pc, #376]	@ (800391c <HAL_TIM_ConfigClockSource+0x228>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	f200 809e 	bhi.w	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80037a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037ac:	f000 8091 	beq.w	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 80037b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037b4:	f200 8096 	bhi.w	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80037b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037bc:	f000 8089 	beq.w	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 80037c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037c4:	f200 808e 	bhi.w	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80037c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037cc:	d03e      	beq.n	800384c <HAL_TIM_ConfigClockSource+0x158>
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d2:	f200 8087 	bhi.w	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037da:	f000 8086 	beq.w	80038ea <HAL_TIM_ConfigClockSource+0x1f6>
 80037de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e2:	d87f      	bhi.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80037e4:	2b70      	cmp	r3, #112	@ 0x70
 80037e6:	d01a      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x12a>
 80037e8:	2b70      	cmp	r3, #112	@ 0x70
 80037ea:	d87b      	bhi.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80037ec:	2b60      	cmp	r3, #96	@ 0x60
 80037ee:	d050      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x19e>
 80037f0:	2b60      	cmp	r3, #96	@ 0x60
 80037f2:	d877      	bhi.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80037f4:	2b50      	cmp	r3, #80	@ 0x50
 80037f6:	d03c      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x17e>
 80037f8:	2b50      	cmp	r3, #80	@ 0x50
 80037fa:	d873      	bhi.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 80037fc:	2b40      	cmp	r3, #64	@ 0x40
 80037fe:	d058      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x1be>
 8003800:	2b40      	cmp	r3, #64	@ 0x40
 8003802:	d86f      	bhi.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003804:	2b30      	cmp	r3, #48	@ 0x30
 8003806:	d064      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003808:	2b30      	cmp	r3, #48	@ 0x30
 800380a:	d86b      	bhi.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800380c:	2b20      	cmp	r3, #32
 800380e:	d060      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003810:	2b20      	cmp	r3, #32
 8003812:	d867      	bhi.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d05c      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 8003818:	2b10      	cmp	r3, #16
 800381a:	d05a      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x1de>
 800381c:	e062      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800382e:	f000 fcd1 	bl	80041d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	609a      	str	r2, [r3, #8]
      break;
 800384a:	e04f      	b.n	80038ec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800385c:	f000 fcba 	bl	80041d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800386e:	609a      	str	r2, [r3, #8]
      break;
 8003870:	e03c      	b.n	80038ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800387e:	461a      	mov	r2, r3
 8003880:	f000 fc2c 	bl	80040dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2150      	movs	r1, #80	@ 0x50
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fc85 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003890:	e02c      	b.n	80038ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800389e:	461a      	mov	r2, r3
 80038a0:	f000 fc4b 	bl	800413a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2160      	movs	r1, #96	@ 0x60
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fc75 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 80038b0:	e01c      	b.n	80038ec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038be:	461a      	mov	r2, r3
 80038c0:	f000 fc0c 	bl	80040dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2140      	movs	r1, #64	@ 0x40
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fc65 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 80038d0:	e00c      	b.n	80038ec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f000 fc5c 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 80038e2:	e003      	b.n	80038ec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      break;
 80038e8:	e000      	b.n	80038ec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80038ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	00100070 	.word	0x00100070
 800390c:	00100060 	.word	0x00100060
 8003910:	00100050 	.word	0x00100050
 8003914:	00100040 	.word	0x00100040
 8003918:	00100030 	.word	0x00100030
 800391c:	00100020 	.word	0x00100020

08003920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a4c      	ldr	r2, [pc, #304]	@ (8003a64 <TIM_Base_SetConfig+0x144>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d017      	beq.n	8003968 <TIM_Base_SetConfig+0x48>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393e:	d013      	beq.n	8003968 <TIM_Base_SetConfig+0x48>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a49      	ldr	r2, [pc, #292]	@ (8003a68 <TIM_Base_SetConfig+0x148>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00f      	beq.n	8003968 <TIM_Base_SetConfig+0x48>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a48      	ldr	r2, [pc, #288]	@ (8003a6c <TIM_Base_SetConfig+0x14c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00b      	beq.n	8003968 <TIM_Base_SetConfig+0x48>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a47      	ldr	r2, [pc, #284]	@ (8003a70 <TIM_Base_SetConfig+0x150>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <TIM_Base_SetConfig+0x48>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a46      	ldr	r2, [pc, #280]	@ (8003a74 <TIM_Base_SetConfig+0x154>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_Base_SetConfig+0x48>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a45      	ldr	r2, [pc, #276]	@ (8003a78 <TIM_Base_SetConfig+0x158>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d108      	bne.n	800397a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800396e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a39      	ldr	r2, [pc, #228]	@ (8003a64 <TIM_Base_SetConfig+0x144>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d023      	beq.n	80039ca <TIM_Base_SetConfig+0xaa>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003988:	d01f      	beq.n	80039ca <TIM_Base_SetConfig+0xaa>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a36      	ldr	r2, [pc, #216]	@ (8003a68 <TIM_Base_SetConfig+0x148>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01b      	beq.n	80039ca <TIM_Base_SetConfig+0xaa>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a35      	ldr	r2, [pc, #212]	@ (8003a6c <TIM_Base_SetConfig+0x14c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d017      	beq.n	80039ca <TIM_Base_SetConfig+0xaa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a34      	ldr	r2, [pc, #208]	@ (8003a70 <TIM_Base_SetConfig+0x150>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <TIM_Base_SetConfig+0xaa>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a33      	ldr	r2, [pc, #204]	@ (8003a74 <TIM_Base_SetConfig+0x154>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00f      	beq.n	80039ca <TIM_Base_SetConfig+0xaa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a33      	ldr	r2, [pc, #204]	@ (8003a7c <TIM_Base_SetConfig+0x15c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00b      	beq.n	80039ca <TIM_Base_SetConfig+0xaa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a32      	ldr	r2, [pc, #200]	@ (8003a80 <TIM_Base_SetConfig+0x160>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_Base_SetConfig+0xaa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a31      	ldr	r2, [pc, #196]	@ (8003a84 <TIM_Base_SetConfig+0x164>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_Base_SetConfig+0xaa>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a78 <TIM_Base_SetConfig+0x158>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d108      	bne.n	80039dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a18      	ldr	r2, [pc, #96]	@ (8003a64 <TIM_Base_SetConfig+0x144>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d013      	beq.n	8003a30 <TIM_Base_SetConfig+0x110>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a74 <TIM_Base_SetConfig+0x154>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00f      	beq.n	8003a30 <TIM_Base_SetConfig+0x110>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a1a      	ldr	r2, [pc, #104]	@ (8003a7c <TIM_Base_SetConfig+0x15c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <TIM_Base_SetConfig+0x110>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a19      	ldr	r2, [pc, #100]	@ (8003a80 <TIM_Base_SetConfig+0x160>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d007      	beq.n	8003a30 <TIM_Base_SetConfig+0x110>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a18      	ldr	r2, [pc, #96]	@ (8003a84 <TIM_Base_SetConfig+0x164>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_Base_SetConfig+0x110>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a13      	ldr	r2, [pc, #76]	@ (8003a78 <TIM_Base_SetConfig+0x158>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d103      	bne.n	8003a38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f023 0201 	bic.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	611a      	str	r2, [r3, #16]
  }
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40013400 	.word	0x40013400
 8003a78:	40015000 	.word	0x40015000
 8003a7c:	40014000 	.word	0x40014000
 8003a80:	40014400 	.word	0x40014400
 8003a84:	40014800 	.word	0x40014800

08003a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f023 0201 	bic.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f023 0302 	bic.w	r3, r3, #2
 8003ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a30      	ldr	r2, [pc, #192]	@ (8003ba4 <TIM_OC1_SetConfig+0x11c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d013      	beq.n	8003b10 <TIM_OC1_SetConfig+0x88>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a2f      	ldr	r2, [pc, #188]	@ (8003ba8 <TIM_OC1_SetConfig+0x120>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00f      	beq.n	8003b10 <TIM_OC1_SetConfig+0x88>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a2e      	ldr	r2, [pc, #184]	@ (8003bac <TIM_OC1_SetConfig+0x124>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00b      	beq.n	8003b10 <TIM_OC1_SetConfig+0x88>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb0 <TIM_OC1_SetConfig+0x128>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <TIM_OC1_SetConfig+0x88>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb4 <TIM_OC1_SetConfig+0x12c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_OC1_SetConfig+0x88>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb8 <TIM_OC1_SetConfig+0x130>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d10c      	bne.n	8003b2a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f023 0308 	bic.w	r3, r3, #8
 8003b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f023 0304 	bic.w	r3, r3, #4
 8003b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba4 <TIM_OC1_SetConfig+0x11c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <TIM_OC1_SetConfig+0xd2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba8 <TIM_OC1_SetConfig+0x120>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00f      	beq.n	8003b5a <TIM_OC1_SetConfig+0xd2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bac <TIM_OC1_SetConfig+0x124>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <TIM_OC1_SetConfig+0xd2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb0 <TIM_OC1_SetConfig+0x128>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d007      	beq.n	8003b5a <TIM_OC1_SetConfig+0xd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a19      	ldr	r2, [pc, #100]	@ (8003bb4 <TIM_OC1_SetConfig+0x12c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_OC1_SetConfig+0xd2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a18      	ldr	r2, [pc, #96]	@ (8003bb8 <TIM_OC1_SetConfig+0x130>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d111      	bne.n	8003b7e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	621a      	str	r2, [r3, #32]
}
 8003b98:	bf00      	nop
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40013400 	.word	0x40013400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	40015000 	.word	0x40015000

08003bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f023 0210 	bic.w	r2, r3, #16
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0320 	bic.w	r3, r3, #32
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ccc <TIM_OC2_SetConfig+0x110>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_OC2_SetConfig+0x74>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a2b      	ldr	r2, [pc, #172]	@ (8003cd0 <TIM_OC2_SetConfig+0x114>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_OC2_SetConfig+0x74>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd4 <TIM_OC2_SetConfig+0x118>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10d      	bne.n	8003c4c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ccc <TIM_OC2_SetConfig+0x110>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d013      	beq.n	8003c7c <TIM_OC2_SetConfig+0xc0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd0 <TIM_OC2_SetConfig+0x114>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00f      	beq.n	8003c7c <TIM_OC2_SetConfig+0xc0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd8 <TIM_OC2_SetConfig+0x11c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00b      	beq.n	8003c7c <TIM_OC2_SetConfig+0xc0>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a1d      	ldr	r2, [pc, #116]	@ (8003cdc <TIM_OC2_SetConfig+0x120>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d007      	beq.n	8003c7c <TIM_OC2_SetConfig+0xc0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce0 <TIM_OC2_SetConfig+0x124>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_OC2_SetConfig+0xc0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a17      	ldr	r2, [pc, #92]	@ (8003cd4 <TIM_OC2_SetConfig+0x118>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d113      	bne.n	8003ca4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40013400 	.word	0x40013400
 8003cd4:	40015000 	.word	0x40015000
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800

08003ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a2b      	ldr	r2, [pc, #172]	@ (8003df0 <TIM_OC3_SetConfig+0x10c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <TIM_OC3_SetConfig+0x72>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2a      	ldr	r2, [pc, #168]	@ (8003df4 <TIM_OC3_SetConfig+0x110>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_OC3_SetConfig+0x72>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a29      	ldr	r2, [pc, #164]	@ (8003df8 <TIM_OC3_SetConfig+0x114>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d10d      	bne.n	8003d72 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1e      	ldr	r2, [pc, #120]	@ (8003df0 <TIM_OC3_SetConfig+0x10c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <TIM_OC3_SetConfig+0xbe>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003df4 <TIM_OC3_SetConfig+0x110>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00f      	beq.n	8003da2 <TIM_OC3_SetConfig+0xbe>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	@ (8003dfc <TIM_OC3_SetConfig+0x118>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <TIM_OC3_SetConfig+0xbe>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <TIM_OC3_SetConfig+0x11c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <TIM_OC3_SetConfig+0xbe>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1b      	ldr	r2, [pc, #108]	@ (8003e04 <TIM_OC3_SetConfig+0x120>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_OC3_SetConfig+0xbe>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a16      	ldr	r2, [pc, #88]	@ (8003df8 <TIM_OC3_SetConfig+0x114>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d113      	bne.n	8003dca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	621a      	str	r2, [r3, #32]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40012c00 	.word	0x40012c00
 8003df4:	40013400 	.word	0x40013400
 8003df8:	40015000 	.word	0x40015000
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400
 8003e04:	40014800 	.word	0x40014800

08003e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	031b      	lsls	r3, r3, #12
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a2c      	ldr	r2, [pc, #176]	@ (8003f18 <TIM_OC4_SetConfig+0x110>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_OC4_SetConfig+0x74>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f1c <TIM_OC4_SetConfig+0x114>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_OC4_SetConfig+0x74>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a2a      	ldr	r2, [pc, #168]	@ (8003f20 <TIM_OC4_SetConfig+0x118>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10d      	bne.n	8003e98 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	031b      	lsls	r3, r3, #12
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f18 <TIM_OC4_SetConfig+0x110>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <TIM_OC4_SetConfig+0xc0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f1c <TIM_OC4_SetConfig+0x114>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00f      	beq.n	8003ec8 <TIM_OC4_SetConfig+0xc0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8003f24 <TIM_OC4_SetConfig+0x11c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00b      	beq.n	8003ec8 <TIM_OC4_SetConfig+0xc0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <TIM_OC4_SetConfig+0x120>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <TIM_OC4_SetConfig+0xc0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <TIM_OC4_SetConfig+0x124>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_OC4_SetConfig+0xc0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a17      	ldr	r2, [pc, #92]	@ (8003f20 <TIM_OC4_SetConfig+0x118>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d113      	bne.n	8003ef0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ece:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ed6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	019b      	lsls	r3, r3, #6
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40013400 	.word	0x40013400
 8003f20:	40015000 	.word	0x40015000
 8003f24:	40014000 	.word	0x40014000
 8003f28:	40014400 	.word	0x40014400
 8003f2c:	40014800 	.word	0x40014800

08003f30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a19      	ldr	r2, [pc, #100]	@ (8003fec <TIM_OC5_SetConfig+0xbc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <TIM_OC5_SetConfig+0x82>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a18      	ldr	r2, [pc, #96]	@ (8003ff0 <TIM_OC5_SetConfig+0xc0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00f      	beq.n	8003fb2 <TIM_OC5_SetConfig+0x82>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a17      	ldr	r2, [pc, #92]	@ (8003ff4 <TIM_OC5_SetConfig+0xc4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <TIM_OC5_SetConfig+0x82>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a16      	ldr	r2, [pc, #88]	@ (8003ff8 <TIM_OC5_SetConfig+0xc8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <TIM_OC5_SetConfig+0x82>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a15      	ldr	r2, [pc, #84]	@ (8003ffc <TIM_OC5_SetConfig+0xcc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_OC5_SetConfig+0x82>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a14      	ldr	r2, [pc, #80]	@ (8004000 <TIM_OC5_SetConfig+0xd0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d109      	bne.n	8003fc6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	621a      	str	r2, [r3, #32]
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	40013400 	.word	0x40013400
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800
 8004000:	40015000 	.word	0x40015000

08004004 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800404a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	051b      	lsls	r3, r3, #20
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a1a      	ldr	r2, [pc, #104]	@ (80040c4 <TIM_OC6_SetConfig+0xc0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d013      	beq.n	8004088 <TIM_OC6_SetConfig+0x84>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a19      	ldr	r2, [pc, #100]	@ (80040c8 <TIM_OC6_SetConfig+0xc4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00f      	beq.n	8004088 <TIM_OC6_SetConfig+0x84>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a18      	ldr	r2, [pc, #96]	@ (80040cc <TIM_OC6_SetConfig+0xc8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00b      	beq.n	8004088 <TIM_OC6_SetConfig+0x84>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a17      	ldr	r2, [pc, #92]	@ (80040d0 <TIM_OC6_SetConfig+0xcc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d007      	beq.n	8004088 <TIM_OC6_SetConfig+0x84>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <TIM_OC6_SetConfig+0xd0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_OC6_SetConfig+0x84>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <TIM_OC6_SetConfig+0xd4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d109      	bne.n	800409c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800408e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	029b      	lsls	r3, r3, #10
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	621a      	str	r2, [r3, #32]
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40013400 	.word	0x40013400
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800
 80040d8:	40015000 	.word	0x40015000

080040dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0201 	bic.w	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f023 030a 	bic.w	r3, r3, #10
 8004118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413a:	b480      	push	{r7}
 800413c:	b087      	sub	sp, #28
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f023 0210 	bic.w	r2, r3, #16
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	031b      	lsls	r3, r3, #12
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004176:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80041b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f043 0307 	orr.w	r3, r3, #7
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	609a      	str	r2, [r3, #8]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2201      	movs	r2, #1
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	43db      	mvns	r3, r3
 8004236:	401a      	ands	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a1a      	ldr	r2, [r3, #32]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	fa01 f303 	lsl.w	r3, r1, r3
 800424c:	431a      	orrs	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004274:	2302      	movs	r3, #2
 8004276:	e074      	b.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a34      	ldr	r2, [pc, #208]	@ (8004370 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a33      	ldr	r2, [pc, #204]	@ (8004374 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a31      	ldr	r2, [pc, #196]	@ (8004378 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d108      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80042bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80042ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a21      	ldr	r2, [pc, #132]	@ (8004370 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f8:	d01d      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1f      	ldr	r2, [pc, #124]	@ (800437c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1d      	ldr	r2, [pc, #116]	@ (8004380 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1c      	ldr	r2, [pc, #112]	@ (8004384 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a15      	ldr	r2, [pc, #84]	@ (8004374 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a18      	ldr	r2, [pc, #96]	@ (8004388 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a11      	ldr	r2, [pc, #68]	@ (8004378 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d10c      	bne.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800433c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4313      	orrs	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40013400 	.word	0x40013400
 8004378:	40015000 	.word	0x40015000
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	40014000 	.word	0x40014000

0800438c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e042      	b.n	8004424 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7fd f8f9 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2224      	movs	r2, #36	@ 0x24
 80043ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 ff60 	bl	800529c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fc61 	bl	8004ca4 <UART_SetConfig>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e01b      	b.n	8004424 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800440a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 ffdf 	bl	80053e0 <UART_CheckIdleState>
 8004422:	4603      	mov	r3, r0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	@ 0x28
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004442:	2b20      	cmp	r3, #32
 8004444:	d17b      	bne.n	800453e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_UART_Transmit+0x26>
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e074      	b.n	8004540 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2221      	movs	r2, #33	@ 0x21
 8004462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004466:	f7fd fa9f 	bl	80019a8 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004484:	d108      	bne.n	8004498 <HAL_UART_Transmit+0x6c>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d104      	bne.n	8004498 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	e003      	b.n	80044a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044a0:	e030      	b.n	8004504 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2200      	movs	r2, #0
 80044aa:	2180      	movs	r1, #128	@ 0x80
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f001 f841 	bl	8005534 <UART_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e03d      	b.n	8004540 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	3302      	adds	r3, #2
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e007      	b.n	80044f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	3301      	adds	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1c8      	bne.n	80044a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2200      	movs	r2, #0
 8004518:	2140      	movs	r1, #64	@ 0x40
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f001 f80a 	bl	8005534 <UART_WaitOnFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e006      	b.n	8004540 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e000      	b.n	8004540 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800453e:	2302      	movs	r3, #2
  }
}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	@ 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800455c:	2b20      	cmp	r3, #32
 800455e:	d137      	bne.n	80045d0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_Receive_IT+0x24>
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e030      	b.n	80045d2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a18      	ldr	r2, [pc, #96]	@ (80045dc <HAL_UART_Receive_IT+0x94>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d01f      	beq.n	80045c0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d018      	beq.n	80045c0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	613b      	str	r3, [r7, #16]
   return(result);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	623b      	str	r3, [r7, #32]
 80045ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	69f9      	ldr	r1, [r7, #28]
 80045b2:	6a3a      	ldr	r2, [r7, #32]
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e6      	bne.n	800458e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	461a      	mov	r2, r3
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f001 f822 	bl	8005610 <UART_Start_Receive_IT>
 80045cc:	4603      	mov	r3, r0
 80045ce:	e000      	b.n	80045d2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3728      	adds	r7, #40	@ 0x28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40008000 	.word	0x40008000

080045e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b0ba      	sub	sp, #232	@ 0xe8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004606:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800460a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800460e:	4013      	ands	r3, r2
 8004610:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d11b      	bne.n	8004654 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800461c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d015      	beq.n	8004654 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8300 	beq.w	8004c4a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	4798      	blx	r3
      }
      return;
 8004652:	e2fa      	b.n	8004c4a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8123 	beq.w	80048a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800465e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004662:	4b8d      	ldr	r3, [pc, #564]	@ (8004898 <HAL_UART_IRQHandler+0x2b8>)
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800466a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800466e:	4b8b      	ldr	r3, [pc, #556]	@ (800489c <HAL_UART_IRQHandler+0x2bc>)
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8116 	beq.w	80048a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d011      	beq.n	80046a8 <HAL_UART_IRQHandler+0xc8>
 8004684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2201      	movs	r2, #1
 8004696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d011      	beq.n	80046d8 <HAL_UART_IRQHandler+0xf8>
 80046b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2202      	movs	r2, #2
 80046c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ce:	f043 0204 	orr.w	r2, r3, #4
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d011      	beq.n	8004708 <HAL_UART_IRQHandler+0x128>
 80046e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2204      	movs	r2, #4
 80046f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d017      	beq.n	8004744 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004720:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004724:	4b5c      	ldr	r3, [pc, #368]	@ (8004898 <HAL_UART_IRQHandler+0x2b8>)
 8004726:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2208      	movs	r2, #8
 8004732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473a:	f043 0208 	orr.w	r2, r3, #8
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800474c:	2b00      	cmp	r3, #0
 800474e:	d012      	beq.n	8004776 <HAL_UART_IRQHandler+0x196>
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004754:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00c      	beq.n	8004776 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476c:	f043 0220 	orr.w	r2, r3, #32
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8266 	beq.w	8004c4e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d013      	beq.n	80047b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800478e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d105      	bne.n	80047a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800479a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800479e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ca:	2b40      	cmp	r3, #64	@ 0x40
 80047cc:	d005      	beq.n	80047da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d054      	beq.n	8004884 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f001 f83a 	bl	8005854 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ea:	2b40      	cmp	r3, #64	@ 0x40
 80047ec:	d146      	bne.n	800487c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800480c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3308      	adds	r3, #8
 8004816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800481a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800481e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1d9      	bne.n	80047ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004840:	2b00      	cmp	r3, #0
 8004842:	d017      	beq.n	8004874 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800484a:	4a15      	ldr	r2, [pc, #84]	@ (80048a0 <HAL_UART_IRQHandler+0x2c0>)
 800484c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004854:	4618      	mov	r0, r3
 8004856:	f7fd fa3d 	bl	8001cd4 <HAL_DMA_Abort_IT>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d019      	beq.n	8004894 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800486e:	4610      	mov	r0, r2
 8004870:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004872:	e00f      	b.n	8004894 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f9ff 	bl	8004c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487a:	e00b      	b.n	8004894 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f9fb 	bl	8004c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004882:	e007      	b.n	8004894 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f9f7 	bl	8004c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004892:	e1dc      	b.n	8004c4e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	bf00      	nop
    return;
 8004896:	e1da      	b.n	8004c4e <HAL_UART_IRQHandler+0x66e>
 8004898:	10000001 	.word	0x10000001
 800489c:	04000120 	.word	0x04000120
 80048a0:	08005921 	.word	0x08005921

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	f040 8170 	bne.w	8004b8e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8169 	beq.w	8004b8e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8162 	beq.w	8004b8e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2210      	movs	r2, #16
 80048d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048dc:	2b40      	cmp	r3, #64	@ 0x40
 80048de:	f040 80d8 	bne.w	8004a92 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80af 	beq.w	8004a58 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004900:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004904:	429a      	cmp	r2, r3
 8004906:	f080 80a7 	bcs.w	8004a58 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004910:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 8087 	bne.w	8004a36 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800493c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004956:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800495e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800496a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1da      	bne.n	8004928 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3308      	adds	r3, #8
 8004978:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3308      	adds	r3, #8
 8004992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004996:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800499a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800499e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e1      	bne.n	8004972 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e3      	bne.n	80049ae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a04:	f023 0310 	bic.w	r3, r3, #16
 8004a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e4      	bne.n	80049f4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fd f8f6 	bl	8001c22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f91b 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004a56:	e0fc      	b.n	8004c52 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a62:	429a      	cmp	r2, r3
 8004a64:	f040 80f5 	bne.w	8004c52 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	f040 80eb 	bne.w	8004c52 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8fe 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
      return;
 8004a90:	e0df      	b.n	8004c52 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80d1 	beq.w	8004c56 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80cc 	beq.w	8004c56 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ae2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e4      	bne.n	8004abe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3308      	adds	r3, #8
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	623b      	str	r3, [r7, #32]
   return(result);
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e1      	bne.n	8004af4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f023 0310 	bic.w	r3, r3, #16
 8004b58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	69b9      	ldr	r1, [r7, #24]
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	617b      	str	r3, [r7, #20]
   return(result);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e4      	bne.n	8004b44 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b84:	4619      	mov	r1, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f880 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b8c:	e063      	b.n	8004c56 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00e      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x5d8>
 8004b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004bae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f001 fc13 	bl	80063dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bb6:	e051      	b.n	8004c5c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d014      	beq.n	8004bee <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d105      	bne.n	8004bdc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d03a      	beq.n	8004c5a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
    }
    return;
 8004bec:	e035      	b.n	8004c5a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <HAL_UART_IRQHandler+0x62e>
 8004bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fe9c 	bl	8005944 <UART_EndTransmit_IT>
    return;
 8004c0c:	e026      	b.n	8004c5c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_UART_IRQHandler+0x64e>
 8004c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c1e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f001 fbec 	bl	8006404 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c2c:	e016      	b.n	8004c5c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d010      	beq.n	8004c5c <HAL_UART_IRQHandler+0x67c>
 8004c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da0c      	bge.n	8004c5c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f001 fbd4 	bl	80063f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c48:	e008      	b.n	8004c5c <HAL_UART_IRQHandler+0x67c>
      return;
 8004c4a:	bf00      	nop
 8004c4c:	e006      	b.n	8004c5c <HAL_UART_IRQHandler+0x67c>
    return;
 8004c4e:	bf00      	nop
 8004c50:	e004      	b.n	8004c5c <HAL_UART_IRQHandler+0x67c>
      return;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <HAL_UART_IRQHandler+0x67c>
      return;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_UART_IRQHandler+0x67c>
    return;
 8004c5a:	bf00      	nop
  }
}
 8004c5c:	37e8      	adds	r7, #232	@ 0xe8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop

08004c64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca8:	b08c      	sub	sp, #48	@ 0x30
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4baa      	ldr	r3, [pc, #680]	@ (8004f7c <UART_SetConfig+0x2d8>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a9f      	ldr	r2, [pc, #636]	@ (8004f80 <UART_SetConfig+0x2dc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004d1a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	f023 010f 	bic.w	r1, r3, #15
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a90      	ldr	r2, [pc, #576]	@ (8004f84 <UART_SetConfig+0x2e0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d125      	bne.n	8004d94 <UART_SetConfig+0xf0>
 8004d48:	4b8f      	ldr	r3, [pc, #572]	@ (8004f88 <UART_SetConfig+0x2e4>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d81a      	bhi.n	8004d8c <UART_SetConfig+0xe8>
 8004d56:	a201      	add	r2, pc, #4	@ (adr r2, 8004d5c <UART_SetConfig+0xb8>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004d6d 	.word	0x08004d6d
 8004d60:	08004d7d 	.word	0x08004d7d
 8004d64:	08004d75 	.word	0x08004d75
 8004d68:	08004d85 	.word	0x08004d85
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d72:	e116      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004d74:	2302      	movs	r3, #2
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7a:	e112      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d82:	e10e      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004d84:	2308      	movs	r3, #8
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8a:	e10a      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d92:	e106      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a7c      	ldr	r2, [pc, #496]	@ (8004f8c <UART_SetConfig+0x2e8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d138      	bne.n	8004e10 <UART_SetConfig+0x16c>
 8004d9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f88 <UART_SetConfig+0x2e4>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d82d      	bhi.n	8004e08 <UART_SetConfig+0x164>
 8004dac:	a201      	add	r2, pc, #4	@ (adr r2, 8004db4 <UART_SetConfig+0x110>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004de9 	.word	0x08004de9
 8004db8:	08004e09 	.word	0x08004e09
 8004dbc:	08004e09 	.word	0x08004e09
 8004dc0:	08004e09 	.word	0x08004e09
 8004dc4:	08004df9 	.word	0x08004df9
 8004dc8:	08004e09 	.word	0x08004e09
 8004dcc:	08004e09 	.word	0x08004e09
 8004dd0:	08004e09 	.word	0x08004e09
 8004dd4:	08004df1 	.word	0x08004df1
 8004dd8:	08004e09 	.word	0x08004e09
 8004ddc:	08004e09 	.word	0x08004e09
 8004de0:	08004e09 	.word	0x08004e09
 8004de4:	08004e01 	.word	0x08004e01
 8004de8:	2300      	movs	r3, #0
 8004dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dee:	e0d8      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004df0:	2302      	movs	r3, #2
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df6:	e0d4      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004df8:	2304      	movs	r3, #4
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dfe:	e0d0      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004e00:	2308      	movs	r3, #8
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e06:	e0cc      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004e08:	2310      	movs	r3, #16
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e0e:	e0c8      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a5e      	ldr	r2, [pc, #376]	@ (8004f90 <UART_SetConfig+0x2ec>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d125      	bne.n	8004e66 <UART_SetConfig+0x1c2>
 8004e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004f88 <UART_SetConfig+0x2e4>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e24:	2b30      	cmp	r3, #48	@ 0x30
 8004e26:	d016      	beq.n	8004e56 <UART_SetConfig+0x1b2>
 8004e28:	2b30      	cmp	r3, #48	@ 0x30
 8004e2a:	d818      	bhi.n	8004e5e <UART_SetConfig+0x1ba>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d00a      	beq.n	8004e46 <UART_SetConfig+0x1a2>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d814      	bhi.n	8004e5e <UART_SetConfig+0x1ba>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <UART_SetConfig+0x19a>
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d008      	beq.n	8004e4e <UART_SetConfig+0x1aa>
 8004e3c:	e00f      	b.n	8004e5e <UART_SetConfig+0x1ba>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e44:	e0ad      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004e46:	2302      	movs	r3, #2
 8004e48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e4c:	e0a9      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004e4e:	2304      	movs	r3, #4
 8004e50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e54:	e0a5      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004e56:	2308      	movs	r3, #8
 8004e58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e5c:	e0a1      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004e5e:	2310      	movs	r3, #16
 8004e60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e64:	e09d      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f94 <UART_SetConfig+0x2f0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d125      	bne.n	8004ebc <UART_SetConfig+0x218>
 8004e70:	4b45      	ldr	r3, [pc, #276]	@ (8004f88 <UART_SetConfig+0x2e4>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e7c:	d016      	beq.n	8004eac <UART_SetConfig+0x208>
 8004e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e80:	d818      	bhi.n	8004eb4 <UART_SetConfig+0x210>
 8004e82:	2b80      	cmp	r3, #128	@ 0x80
 8004e84:	d00a      	beq.n	8004e9c <UART_SetConfig+0x1f8>
 8004e86:	2b80      	cmp	r3, #128	@ 0x80
 8004e88:	d814      	bhi.n	8004eb4 <UART_SetConfig+0x210>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <UART_SetConfig+0x1f0>
 8004e8e:	2b40      	cmp	r3, #64	@ 0x40
 8004e90:	d008      	beq.n	8004ea4 <UART_SetConfig+0x200>
 8004e92:	e00f      	b.n	8004eb4 <UART_SetConfig+0x210>
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9a:	e082      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea2:	e07e      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eaa:	e07a      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004eac:	2308      	movs	r3, #8
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb2:	e076      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eba:	e072      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a35      	ldr	r2, [pc, #212]	@ (8004f98 <UART_SetConfig+0x2f4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d12a      	bne.n	8004f1c <UART_SetConfig+0x278>
 8004ec6:	4b30      	ldr	r3, [pc, #192]	@ (8004f88 <UART_SetConfig+0x2e4>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ecc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ed4:	d01a      	beq.n	8004f0c <UART_SetConfig+0x268>
 8004ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eda:	d81b      	bhi.n	8004f14 <UART_SetConfig+0x270>
 8004edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee0:	d00c      	beq.n	8004efc <UART_SetConfig+0x258>
 8004ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee6:	d815      	bhi.n	8004f14 <UART_SetConfig+0x270>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <UART_SetConfig+0x250>
 8004eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ef0:	d008      	beq.n	8004f04 <UART_SetConfig+0x260>
 8004ef2:	e00f      	b.n	8004f14 <UART_SetConfig+0x270>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004efa:	e052      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004efc:	2302      	movs	r3, #2
 8004efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f02:	e04e      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004f04:	2304      	movs	r3, #4
 8004f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f0a:	e04a      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f12:	e046      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004f14:	2310      	movs	r3, #16
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1a:	e042      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a17      	ldr	r2, [pc, #92]	@ (8004f80 <UART_SetConfig+0x2dc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d13a      	bne.n	8004f9c <UART_SetConfig+0x2f8>
 8004f26:	4b18      	ldr	r3, [pc, #96]	@ (8004f88 <UART_SetConfig+0x2e4>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f34:	d01a      	beq.n	8004f6c <UART_SetConfig+0x2c8>
 8004f36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f3a:	d81b      	bhi.n	8004f74 <UART_SetConfig+0x2d0>
 8004f3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f40:	d00c      	beq.n	8004f5c <UART_SetConfig+0x2b8>
 8004f42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f46:	d815      	bhi.n	8004f74 <UART_SetConfig+0x2d0>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <UART_SetConfig+0x2b0>
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f50:	d008      	beq.n	8004f64 <UART_SetConfig+0x2c0>
 8004f52:	e00f      	b.n	8004f74 <UART_SetConfig+0x2d0>
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f5a:	e022      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f62:	e01e      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f6a:	e01a      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f72:	e016      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7a:	e012      	b.n	8004fa2 <UART_SetConfig+0x2fe>
 8004f7c:	cfff69f3 	.word	0xcfff69f3
 8004f80:	40008000 	.word	0x40008000
 8004f84:	40013800 	.word	0x40013800
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40004400 	.word	0x40004400
 8004f90:	40004800 	.word	0x40004800
 8004f94:	40004c00 	.word	0x40004c00
 8004f98:	40005000 	.word	0x40005000
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4aae      	ldr	r2, [pc, #696]	@ (8005260 <UART_SetConfig+0x5bc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	f040 8097 	bne.w	80050dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d823      	bhi.n	8004ffe <UART_SetConfig+0x35a>
 8004fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fbc <UART_SetConfig+0x318>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fff 	.word	0x08004fff
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004fff 	.word	0x08004fff
 8004fcc:	08004fef 	.word	0x08004fef
 8004fd0:	08004fff 	.word	0x08004fff
 8004fd4:	08004fff 	.word	0x08004fff
 8004fd8:	08004fff 	.word	0x08004fff
 8004fdc:	08004ff7 	.word	0x08004ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe0:	f7fd fdea 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 8004fe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fe6:	e010      	b.n	800500a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe8:	4b9e      	ldr	r3, [pc, #632]	@ (8005264 <UART_SetConfig+0x5c0>)
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fec:	e00d      	b.n	800500a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fee:	f7fd fd75 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8004ff2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ff4:	e009      	b.n	800500a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ffc:	e005      	b.n	800500a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8130 	beq.w	8005272 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	4a94      	ldr	r2, [pc, #592]	@ (8005268 <UART_SetConfig+0x5c4>)
 8005018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800501c:	461a      	mov	r2, r3
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	fbb3 f3f2 	udiv	r3, r3, r2
 8005024:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4413      	add	r3, r2
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	429a      	cmp	r2, r3
 8005034:	d305      	bcc.n	8005042 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	429a      	cmp	r2, r3
 8005040:	d903      	bls.n	800504a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005048:	e113      	b.n	8005272 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	2200      	movs	r2, #0
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	60fa      	str	r2, [r7, #12]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	4a84      	ldr	r2, [pc, #528]	@ (8005268 <UART_SetConfig+0x5c4>)
 8005058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800505c:	b29b      	uxth	r3, r3
 800505e:	2200      	movs	r2, #0
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005068:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800506c:	f7fb fdc4 	bl	8000bf8 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	020b      	lsls	r3, r1, #8
 8005082:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005086:	0202      	lsls	r2, r0, #8
 8005088:	6979      	ldr	r1, [r7, #20]
 800508a:	6849      	ldr	r1, [r1, #4]
 800508c:	0849      	lsrs	r1, r1, #1
 800508e:	2000      	movs	r0, #0
 8005090:	460c      	mov	r4, r1
 8005092:	4605      	mov	r5, r0
 8005094:	eb12 0804 	adds.w	r8, r2, r4
 8005098:	eb43 0905 	adc.w	r9, r3, r5
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	469a      	mov	sl, r3
 80050a4:	4693      	mov	fp, r2
 80050a6:	4652      	mov	r2, sl
 80050a8:	465b      	mov	r3, fp
 80050aa:	4640      	mov	r0, r8
 80050ac:	4649      	mov	r1, r9
 80050ae:	f7fb fda3 	bl	8000bf8 <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4613      	mov	r3, r2
 80050b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050c0:	d308      	bcc.n	80050d4 <UART_SetConfig+0x430>
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050c8:	d204      	bcs.n	80050d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a3a      	ldr	r2, [r7, #32]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	e0ce      	b.n	8005272 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050da:	e0ca      	b.n	8005272 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050e4:	d166      	bne.n	80051b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80050e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d827      	bhi.n	800513e <UART_SetConfig+0x49a>
 80050ee:	a201      	add	r2, pc, #4	@ (adr r2, 80050f4 <UART_SetConfig+0x450>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	08005119 	.word	0x08005119
 80050f8:	08005121 	.word	0x08005121
 80050fc:	08005129 	.word	0x08005129
 8005100:	0800513f 	.word	0x0800513f
 8005104:	0800512f 	.word	0x0800512f
 8005108:	0800513f 	.word	0x0800513f
 800510c:	0800513f 	.word	0x0800513f
 8005110:	0800513f 	.word	0x0800513f
 8005114:	08005137 	.word	0x08005137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005118:	f7fd fd4e 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 800511c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800511e:	e014      	b.n	800514a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005120:	f7fd fd60 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005126:	e010      	b.n	800514a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005128:	4b4e      	ldr	r3, [pc, #312]	@ (8005264 <UART_SetConfig+0x5c0>)
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800512c:	e00d      	b.n	800514a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512e:	f7fd fcd5 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8005132:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005134:	e009      	b.n	800514a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800513c:	e005      	b.n	800514a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8090 	beq.w	8005272 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	4a44      	ldr	r2, [pc, #272]	@ (8005268 <UART_SetConfig+0x5c4>)
 8005158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800515c:	461a      	mov	r2, r3
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	fbb3 f3f2 	udiv	r3, r3, r2
 8005164:	005a      	lsls	r2, r3, #1
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	441a      	add	r2, r3
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	2b0f      	cmp	r3, #15
 800517c:	d916      	bls.n	80051ac <UART_SetConfig+0x508>
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005184:	d212      	bcs.n	80051ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f023 030f 	bic.w	r3, r3, #15
 800518e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	b29b      	uxth	r3, r3
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	b29a      	uxth	r2, r3
 800519c:	8bfb      	ldrh	r3, [r7, #30]
 800519e:	4313      	orrs	r3, r2
 80051a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	8bfa      	ldrh	r2, [r7, #30]
 80051a8:	60da      	str	r2, [r3, #12]
 80051aa:	e062      	b.n	8005272 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051b2:	e05e      	b.n	8005272 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d828      	bhi.n	800520e <UART_SetConfig+0x56a>
 80051bc:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <UART_SetConfig+0x520>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051f1 	.word	0x080051f1
 80051cc:	080051f9 	.word	0x080051f9
 80051d0:	0800520f 	.word	0x0800520f
 80051d4:	080051ff 	.word	0x080051ff
 80051d8:	0800520f 	.word	0x0800520f
 80051dc:	0800520f 	.word	0x0800520f
 80051e0:	0800520f 	.word	0x0800520f
 80051e4:	08005207 	.word	0x08005207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e8:	f7fd fce6 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 80051ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051ee:	e014      	b.n	800521a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f0:	f7fd fcf8 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 80051f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051f6:	e010      	b.n	800521a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005264 <UART_SetConfig+0x5c0>)
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051fc:	e00d      	b.n	800521a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fe:	f7fd fc6d 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8005202:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005204:	e009      	b.n	800521a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800520c:	e005      	b.n	800521a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005218:	bf00      	nop
    }

    if (pclk != 0U)
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d028      	beq.n	8005272 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	4a10      	ldr	r2, [pc, #64]	@ (8005268 <UART_SetConfig+0x5c4>)
 8005226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800522a:	461a      	mov	r2, r3
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	441a      	add	r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005242:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2b0f      	cmp	r3, #15
 8005248:	d910      	bls.n	800526c <UART_SetConfig+0x5c8>
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005250:	d20c      	bcs.n	800526c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	b29a      	uxth	r2, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60da      	str	r2, [r3, #12]
 800525c:	e009      	b.n	8005272 <UART_SetConfig+0x5ce>
 800525e:	bf00      	nop
 8005260:	40008000 	.word	0x40008000
 8005264:	00f42400 	.word	0x00f42400
 8005268:	08008fac 	.word	0x08008fac
      }
      else
      {
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2201      	movs	r2, #1
 8005276:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2201      	movs	r2, #1
 800527e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2200      	movs	r2, #0
 800528c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800528e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005292:	4618      	mov	r0, r3
 8005294:	3730      	adds	r7, #48	@ 0x30
 8005296:	46bd      	mov	sp, r7
 8005298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800529c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01a      	beq.n	80053b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800539a:	d10a      	bne.n	80053b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
  }
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b098      	sub	sp, #96	@ 0x60
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053f0:	f7fc fada 	bl	80019a8 <HAL_GetTick>
 80053f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b08      	cmp	r3, #8
 8005402:	d12f      	bne.n	8005464 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005404:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540c:	2200      	movs	r2, #0
 800540e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f88e 	bl	8005534 <UART_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d022      	beq.n	8005464 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005432:	653b      	str	r3, [r7, #80]	@ 0x50
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800543c:	647b      	str	r3, [r7, #68]	@ 0x44
 800543e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800544a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e6      	bne.n	800541e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e063      	b.n	800552c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b04      	cmp	r3, #4
 8005470:	d149      	bne.n	8005506 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005472:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800547a:	2200      	movs	r2, #0
 800547c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f857 	bl	8005534 <UART_WaitOnFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d03c      	beq.n	8005506 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	623b      	str	r3, [r7, #32]
   return(result);
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e6      	bne.n	800548c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3308      	adds	r3, #8
 80054c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3308      	adds	r3, #8
 80054dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054de:	61fa      	str	r2, [r7, #28]
 80054e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	69b9      	ldr	r1, [r7, #24]
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	617b      	str	r3, [r7, #20]
   return(result);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e5      	bne.n	80054be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e012      	b.n	800552c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3758      	adds	r7, #88	@ 0x58
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005544:	e04f      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d04b      	beq.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554e:	f7fc fa2b 	bl	80019a8 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <UART_WaitOnFlagUntilTimeout+0x30>
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e04e      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d037      	beq.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b80      	cmp	r3, #128	@ 0x80
 800557a:	d034      	beq.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b40      	cmp	r3, #64	@ 0x40
 8005580:	d031      	beq.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d110      	bne.n	80055b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2208      	movs	r2, #8
 8005596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f95b 	bl	8005854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2208      	movs	r2, #8
 80055a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e029      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c0:	d111      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f941 	bl	8005854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e00f      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4013      	ands	r3, r2
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	bf0c      	ite	eq
 80055f6:	2301      	moveq	r3, #1
 80055f8:	2300      	movne	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	429a      	cmp	r2, r3
 8005602:	d0a0      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005610:	b480      	push	{r7}
 8005612:	b0a3      	sub	sp, #140	@ 0x8c
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005642:	d10e      	bne.n	8005662 <UART_Start_Receive_IT+0x52>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <UART_Start_Receive_IT+0x48>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005652:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005656:	e02d      	b.n	80056b4 <UART_Start_Receive_IT+0xa4>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	22ff      	movs	r2, #255	@ 0xff
 800565c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005660:	e028      	b.n	80056b4 <UART_Start_Receive_IT+0xa4>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10d      	bne.n	8005686 <UART_Start_Receive_IT+0x76>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <UART_Start_Receive_IT+0x6c>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	22ff      	movs	r2, #255	@ 0xff
 8005676:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800567a:	e01b      	b.n	80056b4 <UART_Start_Receive_IT+0xa4>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	227f      	movs	r2, #127	@ 0x7f
 8005680:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005684:	e016      	b.n	80056b4 <UART_Start_Receive_IT+0xa4>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800568e:	d10d      	bne.n	80056ac <UART_Start_Receive_IT+0x9c>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d104      	bne.n	80056a2 <UART_Start_Receive_IT+0x92>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	227f      	movs	r2, #127	@ 0x7f
 800569c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056a0:	e008      	b.n	80056b4 <UART_Start_Receive_IT+0xa4>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	223f      	movs	r2, #63	@ 0x3f
 80056a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056aa:	e003      	b.n	80056b4 <UART_Start_Receive_IT+0xa4>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2222      	movs	r2, #34	@ 0x22
 80056c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80056d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80056e8:	673a      	str	r2, [r7, #112]	@ 0x70
 80056ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80056ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80056f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e3      	bne.n	80056c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005704:	d14f      	bne.n	80057a6 <UART_Start_Receive_IT+0x196>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	429a      	cmp	r2, r3
 8005710:	d349      	bcc.n	80057a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800571a:	d107      	bne.n	800572c <UART_Start_Receive_IT+0x11c>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d103      	bne.n	800572c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a47      	ldr	r2, [pc, #284]	@ (8005844 <UART_Start_Receive_IT+0x234>)
 8005728:	675a      	str	r2, [r3, #116]	@ 0x74
 800572a:	e002      	b.n	8005732 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a46      	ldr	r2, [pc, #280]	@ (8005848 <UART_Start_Receive_IT+0x238>)
 8005730:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01a      	beq.n	8005770 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800574a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800574e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800575c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800575e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005762:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800576a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e4      	bne.n	800573a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3308      	adds	r3, #8
 8005776:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005786:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005790:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005792:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800579e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e5      	bne.n	8005770 <UART_Start_Receive_IT+0x160>
 80057a4:	e046      	b.n	8005834 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ae:	d107      	bne.n	80057c0 <UART_Start_Receive_IT+0x1b0>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a24      	ldr	r2, [pc, #144]	@ (800584c <UART_Start_Receive_IT+0x23c>)
 80057bc:	675a      	str	r2, [r3, #116]	@ 0x74
 80057be:	e002      	b.n	80057c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a23      	ldr	r2, [pc, #140]	@ (8005850 <UART_Start_Receive_IT+0x240>)
 80057c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d019      	beq.n	8005802 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80057e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ee:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80057fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e6      	bne.n	80057ce <UART_Start_Receive_IT+0x1be>
 8005800:	e018      	b.n	8005834 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	613b      	str	r3, [r7, #16]
   return(result);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f043 0320 	orr.w	r3, r3, #32
 8005816:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	6a3a      	ldr	r2, [r7, #32]
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	61bb      	str	r3, [r7, #24]
   return(result);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e6      	bne.n	8005802 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	378c      	adds	r7, #140	@ 0x8c
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	08006071 	.word	0x08006071
 8005848:	08005d0d 	.word	0x08005d0d
 800584c:	08005b55 	.word	0x08005b55
 8005850:	0800599d 	.word	0x0800599d

08005854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b095      	sub	sp, #84	@ 0x54
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800587a:	643b      	str	r3, [r7, #64]	@ 0x40
 800587c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005880:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e6      	bne.n	800585c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3308      	adds	r3, #8
 8005894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	61fb      	str	r3, [r7, #28]
   return(result);
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3308      	adds	r3, #8
 80058b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e3      	bne.n	800588e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d118      	bne.n	8005900 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	60bb      	str	r3, [r7, #8]
   return(result);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f023 0310 	bic.w	r3, r3, #16
 80058e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6979      	ldr	r1, [r7, #20]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	613b      	str	r3, [r7, #16]
   return(result);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e6      	bne.n	80058ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005914:	bf00      	nop
 8005916:	3754      	adds	r7, #84	@ 0x54
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7ff f99e 	bl	8004c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	60bb      	str	r3, [r7, #8]
   return(result);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6979      	ldr	r1, [r7, #20]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	613b      	str	r3, [r7, #16]
   return(result);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e6      	bne.n	800594c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff f969 	bl	8004c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005992:	bf00      	nop
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b09c      	sub	sp, #112	@ 0x70
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80059aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b4:	2b22      	cmp	r3, #34	@ 0x22
 80059b6:	f040 80be 	bne.w	8005b36 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80059c8:	b2d9      	uxtb	r1, r3
 80059ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d4:	400a      	ands	r2, r1
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 80a1 	bne.w	8005b46 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e6      	bne.n	8005a04 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3308      	adds	r3, #8
 8005a54:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a56:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e5      	bne.n	8005a36 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a33      	ldr	r2, [pc, #204]	@ (8005b50 <UART_RxISR_8BIT+0x1b4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d01f      	beq.n	8005ac8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d018      	beq.n	8005ac8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aaa:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e6      	bne.n	8005a96 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d12e      	bne.n	8005b2e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0310 	bic.w	r3, r3, #16
 8005aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	69b9      	ldr	r1, [r7, #24]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	617b      	str	r3, [r7, #20]
   return(result);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e6      	bne.n	8005ad6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b10      	cmp	r3, #16
 8005b14:	d103      	bne.n	8005b1e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2210      	movs	r2, #16
 8005b1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff f8b0 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b2c:	e00b      	b.n	8005b46 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb fc68 	bl	8001404 <HAL_UART_RxCpltCallback>
}
 8005b34:	e007      	b.n	8005b46 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699a      	ldr	r2, [r3, #24]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0208 	orr.w	r2, r2, #8
 8005b44:	619a      	str	r2, [r3, #24]
}
 8005b46:	bf00      	nop
 8005b48:	3770      	adds	r7, #112	@ 0x70
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40008000 	.word	0x40008000

08005b54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b09c      	sub	sp, #112	@ 0x70
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005b62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b6c:	2b22      	cmp	r3, #34	@ 0x22
 8005b6e:	f040 80be 	bne.w	8005cee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b80:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005b86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b96:	1c9a      	adds	r2, r3, #2
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f040 80a1 	bne.w	8005cfe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bda:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bdc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005be0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e6      	bne.n	8005bbc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e5      	bne.n	8005bee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a33      	ldr	r2, [pc, #204]	@ (8005d08 <UART_RxISR_16BIT+0x1b4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d01f      	beq.n	8005c80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d018      	beq.n	8005c80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c6e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e6      	bne.n	8005c4e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d12e      	bne.n	8005ce6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f023 0310 	bic.w	r3, r3, #16
 8005ca2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6979      	ldr	r1, [r7, #20]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e6      	bne.n	8005c8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d103      	bne.n	8005cd6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2210      	movs	r2, #16
 8005cd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fe ffd4 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ce4:	e00b      	b.n	8005cfe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fb fb8c 	bl	8001404 <HAL_UART_RxCpltCallback>
}
 8005cec:	e007      	b.n	8005cfe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0208 	orr.w	r2, r2, #8
 8005cfc:	619a      	str	r2, [r3, #24]
}
 8005cfe:	bf00      	nop
 8005d00:	3770      	adds	r7, #112	@ 0x70
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	40008000 	.word	0x40008000

08005d0c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b0ac      	sub	sp, #176	@ 0xb0
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005d1a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d42:	2b22      	cmp	r3, #34	@ 0x22
 8005d44:	f040 8183 	bne.w	800604e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005d4e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d52:	e126      	b.n	8005fa2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d5e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005d62:	b2d9      	uxtb	r1, r3
 8005d64:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6e:	400a      	ands	r2, r1
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d053      	beq.n	8005e4e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d011      	beq.n	8005dd6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005db2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00b      	beq.n	8005dd6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dcc:	f043 0201 	orr.w	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d011      	beq.n	8005e06 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2202      	movs	r2, #2
 8005df4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfc:	f043 0204 	orr.w	r2, r3, #4
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d011      	beq.n	8005e36 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2204      	movs	r2, #4
 8005e24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2c:	f043 0202 	orr.w	r2, r3, #2
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d006      	beq.n	8005e4e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7fe ff19 	bl	8004c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f040 80a3 	bne.w	8005fa2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e80:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005e84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e4      	bne.n	8005e5c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005ea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005eba:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005ebc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005ec0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005ec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e1      	bne.n	8005e92 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a60      	ldr	r2, [pc, #384]	@ (8006068 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d021      	beq.n	8005f30 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01a      	beq.n	8005f30 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f1e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e4      	bne.n	8005efa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d130      	bne.n	8005f9a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4e:	f023 0310 	bic.w	r3, r3, #16
 8005f52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e4      	bne.n	8005f3e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	2b10      	cmp	r3, #16
 8005f80:	d103      	bne.n	8005f8a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2210      	movs	r2, #16
 8005f88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fe fe7a 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005f98:	e00e      	b.n	8005fb8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fb fa32 	bl	8001404 <HAL_UART_RxCpltCallback>
        break;
 8005fa0:	e00a      	b.n	8005fb8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005fa2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d006      	beq.n	8005fb8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8005faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f47f aece 	bne.w	8005d54 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fbe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005fc2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d049      	beq.n	800605e <UART_RxISR_8BIT_FIFOEN+0x352>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005fd0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d242      	bcs.n	800605e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005ffc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e3      	bne.n	8005fd8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a16      	ldr	r2, [pc, #88]	@ (800606c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006014:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60bb      	str	r3, [r7, #8]
   return(result);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f043 0320 	orr.w	r3, r3, #32
 800602a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	613b      	str	r3, [r7, #16]
   return(result);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e4      	bne.n	8006016 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800604c:	e007      	b.n	800605e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699a      	ldr	r2, [r3, #24]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0208 	orr.w	r2, r2, #8
 800605c:	619a      	str	r2, [r3, #24]
}
 800605e:	bf00      	nop
 8006060:	37b0      	adds	r7, #176	@ 0xb0
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	40008000 	.word	0x40008000
 800606c:	0800599d 	.word	0x0800599d

08006070 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b0ae      	sub	sp, #184	@ 0xb8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800607e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060a6:	2b22      	cmp	r3, #34	@ 0x22
 80060a8:	f040 8187 	bne.w	80063ba <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80060b2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060b6:	e12a      	b.n	800630e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060be:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80060ca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80060ce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80060d2:	4013      	ands	r3, r2
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	2b00      	cmp	r3, #0
 800610c:	d053      	beq.n	80061b6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800610e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d011      	beq.n	800613e <UART_RxISR_16BIT_FIFOEN+0xce>
 800611a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800611e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2201      	movs	r2, #1
 800612c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006134:	f043 0201 	orr.w	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800613e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d011      	beq.n	800616e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800614a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2202      	movs	r2, #2
 800615c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006164:	f043 0204 	orr.w	r2, r3, #4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800616e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006172:	f003 0304 	and.w	r3, r3, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	d011      	beq.n	800619e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800617a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2204      	movs	r2, #4
 800618c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006194:	f043 0202 	orr.w	r2, r3, #2
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d006      	beq.n	80061b6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fe fd65 	bl	8004c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 80a5 	bne.w	800630e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e2      	bne.n	80061c4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3308      	adds	r3, #8
 8006204:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800620e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006226:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006228:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800622c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e1      	bne.n	80061fe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a60      	ldr	r2, [pc, #384]	@ (80063d4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d021      	beq.n	800629c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d01a      	beq.n	800629c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006276:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800627a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006288:	65bb      	str	r3, [r7, #88]	@ 0x58
 800628a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800628e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e4      	bne.n	8006266 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d130      	bne.n	8006306 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ba:	f023 0310 	bic.w	r3, r3, #16
 80062be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80062cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e4      	bne.n	80062aa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b10      	cmp	r3, #16
 80062ec:	d103      	bne.n	80062f6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2210      	movs	r2, #16
 80062f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fe fcc4 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006304:	e00e      	b.n	8006324 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb f87c 	bl	8001404 <HAL_UART_RxCpltCallback>
        break;
 800630c:	e00a      	b.n	8006324 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800630e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8006316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	f47f aeca 	bne.w	80060b8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800632a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800632e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006332:	2b00      	cmp	r3, #0
 8006334:	d049      	beq.n	80063ca <UART_RxISR_16BIT_FIFOEN+0x35a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800633c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006340:	429a      	cmp	r2, r3
 8006342:	d242      	bcs.n	80063ca <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3308      	adds	r3, #8
 800634a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	623b      	str	r3, [r7, #32]
   return(result);
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800635a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006368:	633a      	str	r2, [r7, #48]	@ 0x30
 800636a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800636e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e3      	bne.n	8006344 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a16      	ldr	r2, [pc, #88]	@ (80063d8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8006380:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f043 0320 	orr.w	r3, r3, #32
 8006396:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	69b9      	ldr	r1, [r7, #24]
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	617b      	str	r3, [r7, #20]
   return(result);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e4      	bne.n	8006382 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063b8:	e007      	b.n	80063ca <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0208 	orr.w	r2, r2, #8
 80063c8:	619a      	str	r2, [r3, #24]
}
 80063ca:	bf00      	nop
 80063cc:	37b8      	adds	r7, #184	@ 0xb8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	40008000 	.word	0x40008000
 80063d8:	08005b55 	.word	0x08005b55

080063dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_UARTEx_DisableFifoMode+0x16>
 800642a:	2302      	movs	r3, #2
 800642c:	e027      	b.n	800647e <HAL_UARTEx_DisableFifoMode+0x66>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2224      	movs	r2, #36	@ 0x24
 800643a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0201 	bic.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800645c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800649e:	2302      	movs	r3, #2
 80064a0:	e02d      	b.n	80064fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2224      	movs	r2, #36	@ 0x24
 80064ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0201 	bic.w	r2, r2, #1
 80064c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f850 	bl	8006584 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800651a:	2302      	movs	r3, #2
 800651c:	e02d      	b.n	800657a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2224      	movs	r2, #36	@ 0x24
 800652a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f812 	bl	8006584 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006590:	2b00      	cmp	r3, #0
 8006592:	d108      	bne.n	80065a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065a4:	e031      	b.n	800660a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065a6:	2308      	movs	r3, #8
 80065a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065aa:	2308      	movs	r3, #8
 80065ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	0e5b      	lsrs	r3, r3, #25
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	0f5b      	lsrs	r3, r3, #29
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	7b3a      	ldrb	r2, [r7, #12]
 80065d2:	4911      	ldr	r1, [pc, #68]	@ (8006618 <UARTEx_SetNbDataToProcess+0x94>)
 80065d4:	5c8a      	ldrb	r2, [r1, r2]
 80065d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065da:	7b3a      	ldrb	r2, [r7, #12]
 80065dc:	490f      	ldr	r1, [pc, #60]	@ (800661c <UARTEx_SetNbDataToProcess+0x98>)
 80065de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	7b7a      	ldrb	r2, [r7, #13]
 80065f0:	4909      	ldr	r1, [pc, #36]	@ (8006618 <UARTEx_SetNbDataToProcess+0x94>)
 80065f2:	5c8a      	ldrb	r2, [r1, r2]
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065f8:	7b7a      	ldrb	r2, [r7, #13]
 80065fa:	4908      	ldr	r1, [pc, #32]	@ (800661c <UARTEx_SetNbDataToProcess+0x98>)
 80065fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006602:	b29a      	uxth	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	08008fc4 	.word	0x08008fc4
 800661c:	08008fcc 	.word	0x08008fcc

08006620 <__cvt>:
 8006620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006624:	ec57 6b10 	vmov	r6, r7, d0
 8006628:	2f00      	cmp	r7, #0
 800662a:	460c      	mov	r4, r1
 800662c:	4619      	mov	r1, r3
 800662e:	463b      	mov	r3, r7
 8006630:	bfbb      	ittet	lt
 8006632:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006636:	461f      	movlt	r7, r3
 8006638:	2300      	movge	r3, #0
 800663a:	232d      	movlt	r3, #45	@ 0x2d
 800663c:	700b      	strb	r3, [r1, #0]
 800663e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006640:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006644:	4691      	mov	r9, r2
 8006646:	f023 0820 	bic.w	r8, r3, #32
 800664a:	bfbc      	itt	lt
 800664c:	4632      	movlt	r2, r6
 800664e:	4616      	movlt	r6, r2
 8006650:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006654:	d005      	beq.n	8006662 <__cvt+0x42>
 8006656:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800665a:	d100      	bne.n	800665e <__cvt+0x3e>
 800665c:	3401      	adds	r4, #1
 800665e:	2102      	movs	r1, #2
 8006660:	e000      	b.n	8006664 <__cvt+0x44>
 8006662:	2103      	movs	r1, #3
 8006664:	ab03      	add	r3, sp, #12
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	ab02      	add	r3, sp, #8
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	ec47 6b10 	vmov	d0, r6, r7
 8006670:	4653      	mov	r3, sl
 8006672:	4622      	mov	r2, r4
 8006674:	f000 fe38 	bl	80072e8 <_dtoa_r>
 8006678:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800667c:	4605      	mov	r5, r0
 800667e:	d119      	bne.n	80066b4 <__cvt+0x94>
 8006680:	f019 0f01 	tst.w	r9, #1
 8006684:	d00e      	beq.n	80066a4 <__cvt+0x84>
 8006686:	eb00 0904 	add.w	r9, r0, r4
 800668a:	2200      	movs	r2, #0
 800668c:	2300      	movs	r3, #0
 800668e:	4630      	mov	r0, r6
 8006690:	4639      	mov	r1, r7
 8006692:	f7fa fa41 	bl	8000b18 <__aeabi_dcmpeq>
 8006696:	b108      	cbz	r0, 800669c <__cvt+0x7c>
 8006698:	f8cd 900c 	str.w	r9, [sp, #12]
 800669c:	2230      	movs	r2, #48	@ 0x30
 800669e:	9b03      	ldr	r3, [sp, #12]
 80066a0:	454b      	cmp	r3, r9
 80066a2:	d31e      	bcc.n	80066e2 <__cvt+0xc2>
 80066a4:	9b03      	ldr	r3, [sp, #12]
 80066a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066a8:	1b5b      	subs	r3, r3, r5
 80066aa:	4628      	mov	r0, r5
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	b004      	add	sp, #16
 80066b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066b8:	eb00 0904 	add.w	r9, r0, r4
 80066bc:	d1e5      	bne.n	800668a <__cvt+0x6a>
 80066be:	7803      	ldrb	r3, [r0, #0]
 80066c0:	2b30      	cmp	r3, #48	@ 0x30
 80066c2:	d10a      	bne.n	80066da <__cvt+0xba>
 80066c4:	2200      	movs	r2, #0
 80066c6:	2300      	movs	r3, #0
 80066c8:	4630      	mov	r0, r6
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7fa fa24 	bl	8000b18 <__aeabi_dcmpeq>
 80066d0:	b918      	cbnz	r0, 80066da <__cvt+0xba>
 80066d2:	f1c4 0401 	rsb	r4, r4, #1
 80066d6:	f8ca 4000 	str.w	r4, [sl]
 80066da:	f8da 3000 	ldr.w	r3, [sl]
 80066de:	4499      	add	r9, r3
 80066e0:	e7d3      	b.n	800668a <__cvt+0x6a>
 80066e2:	1c59      	adds	r1, r3, #1
 80066e4:	9103      	str	r1, [sp, #12]
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	e7d9      	b.n	800669e <__cvt+0x7e>

080066ea <__exponent>:
 80066ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066ec:	2900      	cmp	r1, #0
 80066ee:	bfba      	itte	lt
 80066f0:	4249      	neglt	r1, r1
 80066f2:	232d      	movlt	r3, #45	@ 0x2d
 80066f4:	232b      	movge	r3, #43	@ 0x2b
 80066f6:	2909      	cmp	r1, #9
 80066f8:	7002      	strb	r2, [r0, #0]
 80066fa:	7043      	strb	r3, [r0, #1]
 80066fc:	dd29      	ble.n	8006752 <__exponent+0x68>
 80066fe:	f10d 0307 	add.w	r3, sp, #7
 8006702:	461d      	mov	r5, r3
 8006704:	270a      	movs	r7, #10
 8006706:	461a      	mov	r2, r3
 8006708:	fbb1 f6f7 	udiv	r6, r1, r7
 800670c:	fb07 1416 	mls	r4, r7, r6, r1
 8006710:	3430      	adds	r4, #48	@ 0x30
 8006712:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006716:	460c      	mov	r4, r1
 8006718:	2c63      	cmp	r4, #99	@ 0x63
 800671a:	f103 33ff 	add.w	r3, r3, #4294967295
 800671e:	4631      	mov	r1, r6
 8006720:	dcf1      	bgt.n	8006706 <__exponent+0x1c>
 8006722:	3130      	adds	r1, #48	@ 0x30
 8006724:	1e94      	subs	r4, r2, #2
 8006726:	f803 1c01 	strb.w	r1, [r3, #-1]
 800672a:	1c41      	adds	r1, r0, #1
 800672c:	4623      	mov	r3, r4
 800672e:	42ab      	cmp	r3, r5
 8006730:	d30a      	bcc.n	8006748 <__exponent+0x5e>
 8006732:	f10d 0309 	add.w	r3, sp, #9
 8006736:	1a9b      	subs	r3, r3, r2
 8006738:	42ac      	cmp	r4, r5
 800673a:	bf88      	it	hi
 800673c:	2300      	movhi	r3, #0
 800673e:	3302      	adds	r3, #2
 8006740:	4403      	add	r3, r0
 8006742:	1a18      	subs	r0, r3, r0
 8006744:	b003      	add	sp, #12
 8006746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006748:	f813 6b01 	ldrb.w	r6, [r3], #1
 800674c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006750:	e7ed      	b.n	800672e <__exponent+0x44>
 8006752:	2330      	movs	r3, #48	@ 0x30
 8006754:	3130      	adds	r1, #48	@ 0x30
 8006756:	7083      	strb	r3, [r0, #2]
 8006758:	70c1      	strb	r1, [r0, #3]
 800675a:	1d03      	adds	r3, r0, #4
 800675c:	e7f1      	b.n	8006742 <__exponent+0x58>
	...

08006760 <_printf_float>:
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	b08d      	sub	sp, #52	@ 0x34
 8006766:	460c      	mov	r4, r1
 8006768:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800676c:	4616      	mov	r6, r2
 800676e:	461f      	mov	r7, r3
 8006770:	4605      	mov	r5, r0
 8006772:	f000 fcb9 	bl	80070e8 <_localeconv_r>
 8006776:	6803      	ldr	r3, [r0, #0]
 8006778:	9304      	str	r3, [sp, #16]
 800677a:	4618      	mov	r0, r3
 800677c:	f7f9 fda0 	bl	80002c0 <strlen>
 8006780:	2300      	movs	r3, #0
 8006782:	930a      	str	r3, [sp, #40]	@ 0x28
 8006784:	f8d8 3000 	ldr.w	r3, [r8]
 8006788:	9005      	str	r0, [sp, #20]
 800678a:	3307      	adds	r3, #7
 800678c:	f023 0307 	bic.w	r3, r3, #7
 8006790:	f103 0208 	add.w	r2, r3, #8
 8006794:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006798:	f8d4 b000 	ldr.w	fp, [r4]
 800679c:	f8c8 2000 	str.w	r2, [r8]
 80067a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80067a8:	9307      	str	r3, [sp, #28]
 80067aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80067ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80067b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006a28 <_printf_float+0x2c8>)
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295
 80067bc:	f7fa f9de 	bl	8000b7c <__aeabi_dcmpun>
 80067c0:	bb70      	cbnz	r0, 8006820 <_printf_float+0xc0>
 80067c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067c6:	4b98      	ldr	r3, [pc, #608]	@ (8006a28 <_printf_float+0x2c8>)
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295
 80067cc:	f7fa f9b8 	bl	8000b40 <__aeabi_dcmple>
 80067d0:	bb30      	cbnz	r0, 8006820 <_printf_float+0xc0>
 80067d2:	2200      	movs	r2, #0
 80067d4:	2300      	movs	r3, #0
 80067d6:	4640      	mov	r0, r8
 80067d8:	4649      	mov	r1, r9
 80067da:	f7fa f9a7 	bl	8000b2c <__aeabi_dcmplt>
 80067de:	b110      	cbz	r0, 80067e6 <_printf_float+0x86>
 80067e0:	232d      	movs	r3, #45	@ 0x2d
 80067e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067e6:	4a91      	ldr	r2, [pc, #580]	@ (8006a2c <_printf_float+0x2cc>)
 80067e8:	4b91      	ldr	r3, [pc, #580]	@ (8006a30 <_printf_float+0x2d0>)
 80067ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067ee:	bf8c      	ite	hi
 80067f0:	4690      	movhi	r8, r2
 80067f2:	4698      	movls	r8, r3
 80067f4:	2303      	movs	r3, #3
 80067f6:	6123      	str	r3, [r4, #16]
 80067f8:	f02b 0304 	bic.w	r3, fp, #4
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	f04f 0900 	mov.w	r9, #0
 8006802:	9700      	str	r7, [sp, #0]
 8006804:	4633      	mov	r3, r6
 8006806:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006808:	4621      	mov	r1, r4
 800680a:	4628      	mov	r0, r5
 800680c:	f000 f9d2 	bl	8006bb4 <_printf_common>
 8006810:	3001      	adds	r0, #1
 8006812:	f040 808d 	bne.w	8006930 <_printf_float+0x1d0>
 8006816:	f04f 30ff 	mov.w	r0, #4294967295
 800681a:	b00d      	add	sp, #52	@ 0x34
 800681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	4640      	mov	r0, r8
 8006826:	4649      	mov	r1, r9
 8006828:	f7fa f9a8 	bl	8000b7c <__aeabi_dcmpun>
 800682c:	b140      	cbz	r0, 8006840 <_printf_float+0xe0>
 800682e:	464b      	mov	r3, r9
 8006830:	2b00      	cmp	r3, #0
 8006832:	bfbc      	itt	lt
 8006834:	232d      	movlt	r3, #45	@ 0x2d
 8006836:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800683a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a34 <_printf_float+0x2d4>)
 800683c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a38 <_printf_float+0x2d8>)
 800683e:	e7d4      	b.n	80067ea <_printf_float+0x8a>
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006846:	9206      	str	r2, [sp, #24]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	d13b      	bne.n	80068c4 <_printf_float+0x164>
 800684c:	2306      	movs	r3, #6
 800684e:	6063      	str	r3, [r4, #4]
 8006850:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006854:	2300      	movs	r3, #0
 8006856:	6022      	str	r2, [r4, #0]
 8006858:	9303      	str	r3, [sp, #12]
 800685a:	ab0a      	add	r3, sp, #40	@ 0x28
 800685c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006860:	ab09      	add	r3, sp, #36	@ 0x24
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	6861      	ldr	r1, [r4, #4]
 8006866:	ec49 8b10 	vmov	d0, r8, r9
 800686a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800686e:	4628      	mov	r0, r5
 8006870:	f7ff fed6 	bl	8006620 <__cvt>
 8006874:	9b06      	ldr	r3, [sp, #24]
 8006876:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006878:	2b47      	cmp	r3, #71	@ 0x47
 800687a:	4680      	mov	r8, r0
 800687c:	d129      	bne.n	80068d2 <_printf_float+0x172>
 800687e:	1cc8      	adds	r0, r1, #3
 8006880:	db02      	blt.n	8006888 <_printf_float+0x128>
 8006882:	6863      	ldr	r3, [r4, #4]
 8006884:	4299      	cmp	r1, r3
 8006886:	dd41      	ble.n	800690c <_printf_float+0x1ac>
 8006888:	f1aa 0a02 	sub.w	sl, sl, #2
 800688c:	fa5f fa8a 	uxtb.w	sl, sl
 8006890:	3901      	subs	r1, #1
 8006892:	4652      	mov	r2, sl
 8006894:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006898:	9109      	str	r1, [sp, #36]	@ 0x24
 800689a:	f7ff ff26 	bl	80066ea <__exponent>
 800689e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068a0:	1813      	adds	r3, r2, r0
 80068a2:	2a01      	cmp	r2, #1
 80068a4:	4681      	mov	r9, r0
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	dc02      	bgt.n	80068b0 <_printf_float+0x150>
 80068aa:	6822      	ldr	r2, [r4, #0]
 80068ac:	07d2      	lsls	r2, r2, #31
 80068ae:	d501      	bpl.n	80068b4 <_printf_float+0x154>
 80068b0:	3301      	adds	r3, #1
 80068b2:	6123      	str	r3, [r4, #16]
 80068b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0a2      	beq.n	8006802 <_printf_float+0xa2>
 80068bc:	232d      	movs	r3, #45	@ 0x2d
 80068be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068c2:	e79e      	b.n	8006802 <_printf_float+0xa2>
 80068c4:	9a06      	ldr	r2, [sp, #24]
 80068c6:	2a47      	cmp	r2, #71	@ 0x47
 80068c8:	d1c2      	bne.n	8006850 <_printf_float+0xf0>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1c0      	bne.n	8006850 <_printf_float+0xf0>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e7bd      	b.n	800684e <_printf_float+0xee>
 80068d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068d6:	d9db      	bls.n	8006890 <_printf_float+0x130>
 80068d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80068dc:	d118      	bne.n	8006910 <_printf_float+0x1b0>
 80068de:	2900      	cmp	r1, #0
 80068e0:	6863      	ldr	r3, [r4, #4]
 80068e2:	dd0b      	ble.n	80068fc <_printf_float+0x19c>
 80068e4:	6121      	str	r1, [r4, #16]
 80068e6:	b913      	cbnz	r3, 80068ee <_printf_float+0x18e>
 80068e8:	6822      	ldr	r2, [r4, #0]
 80068ea:	07d0      	lsls	r0, r2, #31
 80068ec:	d502      	bpl.n	80068f4 <_printf_float+0x194>
 80068ee:	3301      	adds	r3, #1
 80068f0:	440b      	add	r3, r1
 80068f2:	6123      	str	r3, [r4, #16]
 80068f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068f6:	f04f 0900 	mov.w	r9, #0
 80068fa:	e7db      	b.n	80068b4 <_printf_float+0x154>
 80068fc:	b913      	cbnz	r3, 8006904 <_printf_float+0x1a4>
 80068fe:	6822      	ldr	r2, [r4, #0]
 8006900:	07d2      	lsls	r2, r2, #31
 8006902:	d501      	bpl.n	8006908 <_printf_float+0x1a8>
 8006904:	3302      	adds	r3, #2
 8006906:	e7f4      	b.n	80068f2 <_printf_float+0x192>
 8006908:	2301      	movs	r3, #1
 800690a:	e7f2      	b.n	80068f2 <_printf_float+0x192>
 800690c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006912:	4299      	cmp	r1, r3
 8006914:	db05      	blt.n	8006922 <_printf_float+0x1c2>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	6121      	str	r1, [r4, #16]
 800691a:	07d8      	lsls	r0, r3, #31
 800691c:	d5ea      	bpl.n	80068f4 <_printf_float+0x194>
 800691e:	1c4b      	adds	r3, r1, #1
 8006920:	e7e7      	b.n	80068f2 <_printf_float+0x192>
 8006922:	2900      	cmp	r1, #0
 8006924:	bfd4      	ite	le
 8006926:	f1c1 0202 	rsble	r2, r1, #2
 800692a:	2201      	movgt	r2, #1
 800692c:	4413      	add	r3, r2
 800692e:	e7e0      	b.n	80068f2 <_printf_float+0x192>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	055a      	lsls	r2, r3, #21
 8006934:	d407      	bmi.n	8006946 <_printf_float+0x1e6>
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	4642      	mov	r2, r8
 800693a:	4631      	mov	r1, r6
 800693c:	4628      	mov	r0, r5
 800693e:	47b8      	blx	r7
 8006940:	3001      	adds	r0, #1
 8006942:	d12b      	bne.n	800699c <_printf_float+0x23c>
 8006944:	e767      	b.n	8006816 <_printf_float+0xb6>
 8006946:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800694a:	f240 80dd 	bls.w	8006b08 <_printf_float+0x3a8>
 800694e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006952:	2200      	movs	r2, #0
 8006954:	2300      	movs	r3, #0
 8006956:	f7fa f8df 	bl	8000b18 <__aeabi_dcmpeq>
 800695a:	2800      	cmp	r0, #0
 800695c:	d033      	beq.n	80069c6 <_printf_float+0x266>
 800695e:	4a37      	ldr	r2, [pc, #220]	@ (8006a3c <_printf_float+0x2dc>)
 8006960:	2301      	movs	r3, #1
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	47b8      	blx	r7
 8006968:	3001      	adds	r0, #1
 800696a:	f43f af54 	beq.w	8006816 <_printf_float+0xb6>
 800696e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006972:	4543      	cmp	r3, r8
 8006974:	db02      	blt.n	800697c <_printf_float+0x21c>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	07d8      	lsls	r0, r3, #31
 800697a:	d50f      	bpl.n	800699c <_printf_float+0x23c>
 800697c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	f43f af45 	beq.w	8006816 <_printf_float+0xb6>
 800698c:	f04f 0900 	mov.w	r9, #0
 8006990:	f108 38ff 	add.w	r8, r8, #4294967295
 8006994:	f104 0a1a 	add.w	sl, r4, #26
 8006998:	45c8      	cmp	r8, r9
 800699a:	dc09      	bgt.n	80069b0 <_printf_float+0x250>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	079b      	lsls	r3, r3, #30
 80069a0:	f100 8103 	bmi.w	8006baa <_printf_float+0x44a>
 80069a4:	68e0      	ldr	r0, [r4, #12]
 80069a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069a8:	4298      	cmp	r0, r3
 80069aa:	bfb8      	it	lt
 80069ac:	4618      	movlt	r0, r3
 80069ae:	e734      	b.n	800681a <_printf_float+0xba>
 80069b0:	2301      	movs	r3, #1
 80069b2:	4652      	mov	r2, sl
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b8      	blx	r7
 80069ba:	3001      	adds	r0, #1
 80069bc:	f43f af2b 	beq.w	8006816 <_printf_float+0xb6>
 80069c0:	f109 0901 	add.w	r9, r9, #1
 80069c4:	e7e8      	b.n	8006998 <_printf_float+0x238>
 80069c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	dc39      	bgt.n	8006a40 <_printf_float+0x2e0>
 80069cc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a3c <_printf_float+0x2dc>)
 80069ce:	2301      	movs	r3, #1
 80069d0:	4631      	mov	r1, r6
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	f43f af1d 	beq.w	8006816 <_printf_float+0xb6>
 80069dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80069e0:	ea59 0303 	orrs.w	r3, r9, r3
 80069e4:	d102      	bne.n	80069ec <_printf_float+0x28c>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	07d9      	lsls	r1, r3, #31
 80069ea:	d5d7      	bpl.n	800699c <_printf_float+0x23c>
 80069ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f0:	4631      	mov	r1, r6
 80069f2:	4628      	mov	r0, r5
 80069f4:	47b8      	blx	r7
 80069f6:	3001      	adds	r0, #1
 80069f8:	f43f af0d 	beq.w	8006816 <_printf_float+0xb6>
 80069fc:	f04f 0a00 	mov.w	sl, #0
 8006a00:	f104 0b1a 	add.w	fp, r4, #26
 8006a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a06:	425b      	negs	r3, r3
 8006a08:	4553      	cmp	r3, sl
 8006a0a:	dc01      	bgt.n	8006a10 <_printf_float+0x2b0>
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	e793      	b.n	8006938 <_printf_float+0x1d8>
 8006a10:	2301      	movs	r3, #1
 8006a12:	465a      	mov	r2, fp
 8006a14:	4631      	mov	r1, r6
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	f43f aefb 	beq.w	8006816 <_printf_float+0xb6>
 8006a20:	f10a 0a01 	add.w	sl, sl, #1
 8006a24:	e7ee      	b.n	8006a04 <_printf_float+0x2a4>
 8006a26:	bf00      	nop
 8006a28:	7fefffff 	.word	0x7fefffff
 8006a2c:	08008fd8 	.word	0x08008fd8
 8006a30:	08008fd4 	.word	0x08008fd4
 8006a34:	08008fe0 	.word	0x08008fe0
 8006a38:	08008fdc 	.word	0x08008fdc
 8006a3c:	08008fe4 	.word	0x08008fe4
 8006a40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a46:	4553      	cmp	r3, sl
 8006a48:	bfa8      	it	ge
 8006a4a:	4653      	movge	r3, sl
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	4699      	mov	r9, r3
 8006a50:	dc36      	bgt.n	8006ac0 <_printf_float+0x360>
 8006a52:	f04f 0b00 	mov.w	fp, #0
 8006a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a5a:	f104 021a 	add.w	r2, r4, #26
 8006a5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a60:	9306      	str	r3, [sp, #24]
 8006a62:	eba3 0309 	sub.w	r3, r3, r9
 8006a66:	455b      	cmp	r3, fp
 8006a68:	dc31      	bgt.n	8006ace <_printf_float+0x36e>
 8006a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a6c:	459a      	cmp	sl, r3
 8006a6e:	dc3a      	bgt.n	8006ae6 <_printf_float+0x386>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	07da      	lsls	r2, r3, #31
 8006a74:	d437      	bmi.n	8006ae6 <_printf_float+0x386>
 8006a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a78:	ebaa 0903 	sub.w	r9, sl, r3
 8006a7c:	9b06      	ldr	r3, [sp, #24]
 8006a7e:	ebaa 0303 	sub.w	r3, sl, r3
 8006a82:	4599      	cmp	r9, r3
 8006a84:	bfa8      	it	ge
 8006a86:	4699      	movge	r9, r3
 8006a88:	f1b9 0f00 	cmp.w	r9, #0
 8006a8c:	dc33      	bgt.n	8006af6 <_printf_float+0x396>
 8006a8e:	f04f 0800 	mov.w	r8, #0
 8006a92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a96:	f104 0b1a 	add.w	fp, r4, #26
 8006a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a9c:	ebaa 0303 	sub.w	r3, sl, r3
 8006aa0:	eba3 0309 	sub.w	r3, r3, r9
 8006aa4:	4543      	cmp	r3, r8
 8006aa6:	f77f af79 	ble.w	800699c <_printf_float+0x23c>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	465a      	mov	r2, fp
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f43f aeae 	beq.w	8006816 <_printf_float+0xb6>
 8006aba:	f108 0801 	add.w	r8, r8, #1
 8006abe:	e7ec      	b.n	8006a9a <_printf_float+0x33a>
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d1c2      	bne.n	8006a52 <_printf_float+0x2f2>
 8006acc:	e6a3      	b.n	8006816 <_printf_float+0xb6>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	9206      	str	r2, [sp, #24]
 8006ad6:	47b8      	blx	r7
 8006ad8:	3001      	adds	r0, #1
 8006ada:	f43f ae9c 	beq.w	8006816 <_printf_float+0xb6>
 8006ade:	9a06      	ldr	r2, [sp, #24]
 8006ae0:	f10b 0b01 	add.w	fp, fp, #1
 8006ae4:	e7bb      	b.n	8006a5e <_printf_float+0x2fe>
 8006ae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aea:	4631      	mov	r1, r6
 8006aec:	4628      	mov	r0, r5
 8006aee:	47b8      	blx	r7
 8006af0:	3001      	adds	r0, #1
 8006af2:	d1c0      	bne.n	8006a76 <_printf_float+0x316>
 8006af4:	e68f      	b.n	8006816 <_printf_float+0xb6>
 8006af6:	9a06      	ldr	r2, [sp, #24]
 8006af8:	464b      	mov	r3, r9
 8006afa:	4442      	add	r2, r8
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	d1c3      	bne.n	8006a8e <_printf_float+0x32e>
 8006b06:	e686      	b.n	8006816 <_printf_float+0xb6>
 8006b08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b0c:	f1ba 0f01 	cmp.w	sl, #1
 8006b10:	dc01      	bgt.n	8006b16 <_printf_float+0x3b6>
 8006b12:	07db      	lsls	r3, r3, #31
 8006b14:	d536      	bpl.n	8006b84 <_printf_float+0x424>
 8006b16:	2301      	movs	r3, #1
 8006b18:	4642      	mov	r2, r8
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b8      	blx	r7
 8006b20:	3001      	adds	r0, #1
 8006b22:	f43f ae78 	beq.w	8006816 <_printf_float+0xb6>
 8006b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	f43f ae70 	beq.w	8006816 <_printf_float+0xb6>
 8006b36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b42:	f7f9 ffe9 	bl	8000b18 <__aeabi_dcmpeq>
 8006b46:	b9c0      	cbnz	r0, 8006b7a <_printf_float+0x41a>
 8006b48:	4653      	mov	r3, sl
 8006b4a:	f108 0201 	add.w	r2, r8, #1
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4628      	mov	r0, r5
 8006b52:	47b8      	blx	r7
 8006b54:	3001      	adds	r0, #1
 8006b56:	d10c      	bne.n	8006b72 <_printf_float+0x412>
 8006b58:	e65d      	b.n	8006816 <_printf_float+0xb6>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	465a      	mov	r2, fp
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4628      	mov	r0, r5
 8006b62:	47b8      	blx	r7
 8006b64:	3001      	adds	r0, #1
 8006b66:	f43f ae56 	beq.w	8006816 <_printf_float+0xb6>
 8006b6a:	f108 0801 	add.w	r8, r8, #1
 8006b6e:	45d0      	cmp	r8, sl
 8006b70:	dbf3      	blt.n	8006b5a <_printf_float+0x3fa>
 8006b72:	464b      	mov	r3, r9
 8006b74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b78:	e6df      	b.n	800693a <_printf_float+0x1da>
 8006b7a:	f04f 0800 	mov.w	r8, #0
 8006b7e:	f104 0b1a 	add.w	fp, r4, #26
 8006b82:	e7f4      	b.n	8006b6e <_printf_float+0x40e>
 8006b84:	2301      	movs	r3, #1
 8006b86:	4642      	mov	r2, r8
 8006b88:	e7e1      	b.n	8006b4e <_printf_float+0x3ee>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	464a      	mov	r2, r9
 8006b8e:	4631      	mov	r1, r6
 8006b90:	4628      	mov	r0, r5
 8006b92:	47b8      	blx	r7
 8006b94:	3001      	adds	r0, #1
 8006b96:	f43f ae3e 	beq.w	8006816 <_printf_float+0xb6>
 8006b9a:	f108 0801 	add.w	r8, r8, #1
 8006b9e:	68e3      	ldr	r3, [r4, #12]
 8006ba0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ba2:	1a5b      	subs	r3, r3, r1
 8006ba4:	4543      	cmp	r3, r8
 8006ba6:	dcf0      	bgt.n	8006b8a <_printf_float+0x42a>
 8006ba8:	e6fc      	b.n	80069a4 <_printf_float+0x244>
 8006baa:	f04f 0800 	mov.w	r8, #0
 8006bae:	f104 0919 	add.w	r9, r4, #25
 8006bb2:	e7f4      	b.n	8006b9e <_printf_float+0x43e>

08006bb4 <_printf_common>:
 8006bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb8:	4616      	mov	r6, r2
 8006bba:	4698      	mov	r8, r3
 8006bbc:	688a      	ldr	r2, [r1, #8]
 8006bbe:	690b      	ldr	r3, [r1, #16]
 8006bc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	bfb8      	it	lt
 8006bc8:	4613      	movlt	r3, r2
 8006bca:	6033      	str	r3, [r6, #0]
 8006bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bd0:	4607      	mov	r7, r0
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	b10a      	cbz	r2, 8006bda <_printf_common+0x26>
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	6033      	str	r3, [r6, #0]
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	0699      	lsls	r1, r3, #26
 8006bde:	bf42      	ittt	mi
 8006be0:	6833      	ldrmi	r3, [r6, #0]
 8006be2:	3302      	addmi	r3, #2
 8006be4:	6033      	strmi	r3, [r6, #0]
 8006be6:	6825      	ldr	r5, [r4, #0]
 8006be8:	f015 0506 	ands.w	r5, r5, #6
 8006bec:	d106      	bne.n	8006bfc <_printf_common+0x48>
 8006bee:	f104 0a19 	add.w	sl, r4, #25
 8006bf2:	68e3      	ldr	r3, [r4, #12]
 8006bf4:	6832      	ldr	r2, [r6, #0]
 8006bf6:	1a9b      	subs	r3, r3, r2
 8006bf8:	42ab      	cmp	r3, r5
 8006bfa:	dc26      	bgt.n	8006c4a <_printf_common+0x96>
 8006bfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c00:	6822      	ldr	r2, [r4, #0]
 8006c02:	3b00      	subs	r3, #0
 8006c04:	bf18      	it	ne
 8006c06:	2301      	movne	r3, #1
 8006c08:	0692      	lsls	r2, r2, #26
 8006c0a:	d42b      	bmi.n	8006c64 <_printf_common+0xb0>
 8006c0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c10:	4641      	mov	r1, r8
 8006c12:	4638      	mov	r0, r7
 8006c14:	47c8      	blx	r9
 8006c16:	3001      	adds	r0, #1
 8006c18:	d01e      	beq.n	8006c58 <_printf_common+0xa4>
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	6922      	ldr	r2, [r4, #16]
 8006c1e:	f003 0306 	and.w	r3, r3, #6
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	bf02      	ittt	eq
 8006c26:	68e5      	ldreq	r5, [r4, #12]
 8006c28:	6833      	ldreq	r3, [r6, #0]
 8006c2a:	1aed      	subeq	r5, r5, r3
 8006c2c:	68a3      	ldr	r3, [r4, #8]
 8006c2e:	bf0c      	ite	eq
 8006c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c34:	2500      	movne	r5, #0
 8006c36:	4293      	cmp	r3, r2
 8006c38:	bfc4      	itt	gt
 8006c3a:	1a9b      	subgt	r3, r3, r2
 8006c3c:	18ed      	addgt	r5, r5, r3
 8006c3e:	2600      	movs	r6, #0
 8006c40:	341a      	adds	r4, #26
 8006c42:	42b5      	cmp	r5, r6
 8006c44:	d11a      	bne.n	8006c7c <_printf_common+0xc8>
 8006c46:	2000      	movs	r0, #0
 8006c48:	e008      	b.n	8006c5c <_printf_common+0xa8>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	4652      	mov	r2, sl
 8006c4e:	4641      	mov	r1, r8
 8006c50:	4638      	mov	r0, r7
 8006c52:	47c8      	blx	r9
 8006c54:	3001      	adds	r0, #1
 8006c56:	d103      	bne.n	8006c60 <_printf_common+0xac>
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c60:	3501      	adds	r5, #1
 8006c62:	e7c6      	b.n	8006bf2 <_printf_common+0x3e>
 8006c64:	18e1      	adds	r1, r4, r3
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	2030      	movs	r0, #48	@ 0x30
 8006c6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c6e:	4422      	add	r2, r4
 8006c70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c78:	3302      	adds	r3, #2
 8006c7a:	e7c7      	b.n	8006c0c <_printf_common+0x58>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	4622      	mov	r2, r4
 8006c80:	4641      	mov	r1, r8
 8006c82:	4638      	mov	r0, r7
 8006c84:	47c8      	blx	r9
 8006c86:	3001      	adds	r0, #1
 8006c88:	d0e6      	beq.n	8006c58 <_printf_common+0xa4>
 8006c8a:	3601      	adds	r6, #1
 8006c8c:	e7d9      	b.n	8006c42 <_printf_common+0x8e>
	...

08006c90 <_printf_i>:
 8006c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c94:	7e0f      	ldrb	r7, [r1, #24]
 8006c96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c98:	2f78      	cmp	r7, #120	@ 0x78
 8006c9a:	4691      	mov	r9, r2
 8006c9c:	4680      	mov	r8, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	469a      	mov	sl, r3
 8006ca2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ca6:	d807      	bhi.n	8006cb8 <_printf_i+0x28>
 8006ca8:	2f62      	cmp	r7, #98	@ 0x62
 8006caa:	d80a      	bhi.n	8006cc2 <_printf_i+0x32>
 8006cac:	2f00      	cmp	r7, #0
 8006cae:	f000 80d1 	beq.w	8006e54 <_printf_i+0x1c4>
 8006cb2:	2f58      	cmp	r7, #88	@ 0x58
 8006cb4:	f000 80b8 	beq.w	8006e28 <_printf_i+0x198>
 8006cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cc0:	e03a      	b.n	8006d38 <_printf_i+0xa8>
 8006cc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cc6:	2b15      	cmp	r3, #21
 8006cc8:	d8f6      	bhi.n	8006cb8 <_printf_i+0x28>
 8006cca:	a101      	add	r1, pc, #4	@ (adr r1, 8006cd0 <_printf_i+0x40>)
 8006ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cd0:	08006d29 	.word	0x08006d29
 8006cd4:	08006d3d 	.word	0x08006d3d
 8006cd8:	08006cb9 	.word	0x08006cb9
 8006cdc:	08006cb9 	.word	0x08006cb9
 8006ce0:	08006cb9 	.word	0x08006cb9
 8006ce4:	08006cb9 	.word	0x08006cb9
 8006ce8:	08006d3d 	.word	0x08006d3d
 8006cec:	08006cb9 	.word	0x08006cb9
 8006cf0:	08006cb9 	.word	0x08006cb9
 8006cf4:	08006cb9 	.word	0x08006cb9
 8006cf8:	08006cb9 	.word	0x08006cb9
 8006cfc:	08006e3b 	.word	0x08006e3b
 8006d00:	08006d67 	.word	0x08006d67
 8006d04:	08006df5 	.word	0x08006df5
 8006d08:	08006cb9 	.word	0x08006cb9
 8006d0c:	08006cb9 	.word	0x08006cb9
 8006d10:	08006e5d 	.word	0x08006e5d
 8006d14:	08006cb9 	.word	0x08006cb9
 8006d18:	08006d67 	.word	0x08006d67
 8006d1c:	08006cb9 	.word	0x08006cb9
 8006d20:	08006cb9 	.word	0x08006cb9
 8006d24:	08006dfd 	.word	0x08006dfd
 8006d28:	6833      	ldr	r3, [r6, #0]
 8006d2a:	1d1a      	adds	r2, r3, #4
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6032      	str	r2, [r6, #0]
 8006d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e09c      	b.n	8006e76 <_printf_i+0x1e6>
 8006d3c:	6833      	ldr	r3, [r6, #0]
 8006d3e:	6820      	ldr	r0, [r4, #0]
 8006d40:	1d19      	adds	r1, r3, #4
 8006d42:	6031      	str	r1, [r6, #0]
 8006d44:	0606      	lsls	r6, r0, #24
 8006d46:	d501      	bpl.n	8006d4c <_printf_i+0xbc>
 8006d48:	681d      	ldr	r5, [r3, #0]
 8006d4a:	e003      	b.n	8006d54 <_printf_i+0xc4>
 8006d4c:	0645      	lsls	r5, r0, #25
 8006d4e:	d5fb      	bpl.n	8006d48 <_printf_i+0xb8>
 8006d50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	da03      	bge.n	8006d60 <_printf_i+0xd0>
 8006d58:	232d      	movs	r3, #45	@ 0x2d
 8006d5a:	426d      	negs	r5, r5
 8006d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d60:	4858      	ldr	r0, [pc, #352]	@ (8006ec4 <_printf_i+0x234>)
 8006d62:	230a      	movs	r3, #10
 8006d64:	e011      	b.n	8006d8a <_printf_i+0xfa>
 8006d66:	6821      	ldr	r1, [r4, #0]
 8006d68:	6833      	ldr	r3, [r6, #0]
 8006d6a:	0608      	lsls	r0, r1, #24
 8006d6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d70:	d402      	bmi.n	8006d78 <_printf_i+0xe8>
 8006d72:	0649      	lsls	r1, r1, #25
 8006d74:	bf48      	it	mi
 8006d76:	b2ad      	uxthmi	r5, r5
 8006d78:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d7a:	4852      	ldr	r0, [pc, #328]	@ (8006ec4 <_printf_i+0x234>)
 8006d7c:	6033      	str	r3, [r6, #0]
 8006d7e:	bf14      	ite	ne
 8006d80:	230a      	movne	r3, #10
 8006d82:	2308      	moveq	r3, #8
 8006d84:	2100      	movs	r1, #0
 8006d86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d8a:	6866      	ldr	r6, [r4, #4]
 8006d8c:	60a6      	str	r6, [r4, #8]
 8006d8e:	2e00      	cmp	r6, #0
 8006d90:	db05      	blt.n	8006d9e <_printf_i+0x10e>
 8006d92:	6821      	ldr	r1, [r4, #0]
 8006d94:	432e      	orrs	r6, r5
 8006d96:	f021 0104 	bic.w	r1, r1, #4
 8006d9a:	6021      	str	r1, [r4, #0]
 8006d9c:	d04b      	beq.n	8006e36 <_printf_i+0x1a6>
 8006d9e:	4616      	mov	r6, r2
 8006da0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006da4:	fb03 5711 	mls	r7, r3, r1, r5
 8006da8:	5dc7      	ldrb	r7, [r0, r7]
 8006daa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dae:	462f      	mov	r7, r5
 8006db0:	42bb      	cmp	r3, r7
 8006db2:	460d      	mov	r5, r1
 8006db4:	d9f4      	bls.n	8006da0 <_printf_i+0x110>
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d10b      	bne.n	8006dd2 <_printf_i+0x142>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	07df      	lsls	r7, r3, #31
 8006dbe:	d508      	bpl.n	8006dd2 <_printf_i+0x142>
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	6861      	ldr	r1, [r4, #4]
 8006dc4:	4299      	cmp	r1, r3
 8006dc6:	bfde      	ittt	le
 8006dc8:	2330      	movle	r3, #48	@ 0x30
 8006dca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dd2:	1b92      	subs	r2, r2, r6
 8006dd4:	6122      	str	r2, [r4, #16]
 8006dd6:	f8cd a000 	str.w	sl, [sp]
 8006dda:	464b      	mov	r3, r9
 8006ddc:	aa03      	add	r2, sp, #12
 8006dde:	4621      	mov	r1, r4
 8006de0:	4640      	mov	r0, r8
 8006de2:	f7ff fee7 	bl	8006bb4 <_printf_common>
 8006de6:	3001      	adds	r0, #1
 8006de8:	d14a      	bne.n	8006e80 <_printf_i+0x1f0>
 8006dea:	f04f 30ff 	mov.w	r0, #4294967295
 8006dee:	b004      	add	sp, #16
 8006df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	f043 0320 	orr.w	r3, r3, #32
 8006dfa:	6023      	str	r3, [r4, #0]
 8006dfc:	4832      	ldr	r0, [pc, #200]	@ (8006ec8 <_printf_i+0x238>)
 8006dfe:	2778      	movs	r7, #120	@ 0x78
 8006e00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	6831      	ldr	r1, [r6, #0]
 8006e08:	061f      	lsls	r7, r3, #24
 8006e0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e0e:	d402      	bmi.n	8006e16 <_printf_i+0x186>
 8006e10:	065f      	lsls	r7, r3, #25
 8006e12:	bf48      	it	mi
 8006e14:	b2ad      	uxthmi	r5, r5
 8006e16:	6031      	str	r1, [r6, #0]
 8006e18:	07d9      	lsls	r1, r3, #31
 8006e1a:	bf44      	itt	mi
 8006e1c:	f043 0320 	orrmi.w	r3, r3, #32
 8006e20:	6023      	strmi	r3, [r4, #0]
 8006e22:	b11d      	cbz	r5, 8006e2c <_printf_i+0x19c>
 8006e24:	2310      	movs	r3, #16
 8006e26:	e7ad      	b.n	8006d84 <_printf_i+0xf4>
 8006e28:	4826      	ldr	r0, [pc, #152]	@ (8006ec4 <_printf_i+0x234>)
 8006e2a:	e7e9      	b.n	8006e00 <_printf_i+0x170>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	f023 0320 	bic.w	r3, r3, #32
 8006e32:	6023      	str	r3, [r4, #0]
 8006e34:	e7f6      	b.n	8006e24 <_printf_i+0x194>
 8006e36:	4616      	mov	r6, r2
 8006e38:	e7bd      	b.n	8006db6 <_printf_i+0x126>
 8006e3a:	6833      	ldr	r3, [r6, #0]
 8006e3c:	6825      	ldr	r5, [r4, #0]
 8006e3e:	6961      	ldr	r1, [r4, #20]
 8006e40:	1d18      	adds	r0, r3, #4
 8006e42:	6030      	str	r0, [r6, #0]
 8006e44:	062e      	lsls	r6, r5, #24
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	d501      	bpl.n	8006e4e <_printf_i+0x1be>
 8006e4a:	6019      	str	r1, [r3, #0]
 8006e4c:	e002      	b.n	8006e54 <_printf_i+0x1c4>
 8006e4e:	0668      	lsls	r0, r5, #25
 8006e50:	d5fb      	bpl.n	8006e4a <_printf_i+0x1ba>
 8006e52:	8019      	strh	r1, [r3, #0]
 8006e54:	2300      	movs	r3, #0
 8006e56:	6123      	str	r3, [r4, #16]
 8006e58:	4616      	mov	r6, r2
 8006e5a:	e7bc      	b.n	8006dd6 <_printf_i+0x146>
 8006e5c:	6833      	ldr	r3, [r6, #0]
 8006e5e:	1d1a      	adds	r2, r3, #4
 8006e60:	6032      	str	r2, [r6, #0]
 8006e62:	681e      	ldr	r6, [r3, #0]
 8006e64:	6862      	ldr	r2, [r4, #4]
 8006e66:	2100      	movs	r1, #0
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7f9 f9d9 	bl	8000220 <memchr>
 8006e6e:	b108      	cbz	r0, 8006e74 <_printf_i+0x1e4>
 8006e70:	1b80      	subs	r0, r0, r6
 8006e72:	6060      	str	r0, [r4, #4]
 8006e74:	6863      	ldr	r3, [r4, #4]
 8006e76:	6123      	str	r3, [r4, #16]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e7e:	e7aa      	b.n	8006dd6 <_printf_i+0x146>
 8006e80:	6923      	ldr	r3, [r4, #16]
 8006e82:	4632      	mov	r2, r6
 8006e84:	4649      	mov	r1, r9
 8006e86:	4640      	mov	r0, r8
 8006e88:	47d0      	blx	sl
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d0ad      	beq.n	8006dea <_printf_i+0x15a>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	079b      	lsls	r3, r3, #30
 8006e92:	d413      	bmi.n	8006ebc <_printf_i+0x22c>
 8006e94:	68e0      	ldr	r0, [r4, #12]
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	4298      	cmp	r0, r3
 8006e9a:	bfb8      	it	lt
 8006e9c:	4618      	movlt	r0, r3
 8006e9e:	e7a6      	b.n	8006dee <_printf_i+0x15e>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	4632      	mov	r2, r6
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	47d0      	blx	sl
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d09d      	beq.n	8006dea <_printf_i+0x15a>
 8006eae:	3501      	adds	r5, #1
 8006eb0:	68e3      	ldr	r3, [r4, #12]
 8006eb2:	9903      	ldr	r1, [sp, #12]
 8006eb4:	1a5b      	subs	r3, r3, r1
 8006eb6:	42ab      	cmp	r3, r5
 8006eb8:	dcf2      	bgt.n	8006ea0 <_printf_i+0x210>
 8006eba:	e7eb      	b.n	8006e94 <_printf_i+0x204>
 8006ebc:	2500      	movs	r5, #0
 8006ebe:	f104 0619 	add.w	r6, r4, #25
 8006ec2:	e7f5      	b.n	8006eb0 <_printf_i+0x220>
 8006ec4:	08008fe6 	.word	0x08008fe6
 8006ec8:	08008ff7 	.word	0x08008ff7

08006ecc <std>:
 8006ecc:	2300      	movs	r3, #0
 8006ece:	b510      	push	{r4, lr}
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eda:	6083      	str	r3, [r0, #8]
 8006edc:	8181      	strh	r1, [r0, #12]
 8006ede:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ee0:	81c2      	strh	r2, [r0, #14]
 8006ee2:	6183      	str	r3, [r0, #24]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	2208      	movs	r2, #8
 8006ee8:	305c      	adds	r0, #92	@ 0x5c
 8006eea:	f000 f8f4 	bl	80070d6 <memset>
 8006eee:	4b0d      	ldr	r3, [pc, #52]	@ (8006f24 <std+0x58>)
 8006ef0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f28 <std+0x5c>)
 8006ef4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f2c <std+0x60>)
 8006ef8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006efa:	4b0d      	ldr	r3, [pc, #52]	@ (8006f30 <std+0x64>)
 8006efc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006efe:	4b0d      	ldr	r3, [pc, #52]	@ (8006f34 <std+0x68>)
 8006f00:	6224      	str	r4, [r4, #32]
 8006f02:	429c      	cmp	r4, r3
 8006f04:	d006      	beq.n	8006f14 <std+0x48>
 8006f06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f0a:	4294      	cmp	r4, r2
 8006f0c:	d002      	beq.n	8006f14 <std+0x48>
 8006f0e:	33d0      	adds	r3, #208	@ 0xd0
 8006f10:	429c      	cmp	r4, r3
 8006f12:	d105      	bne.n	8006f20 <std+0x54>
 8006f14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f1c:	f000 b958 	b.w	80071d0 <__retarget_lock_init_recursive>
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	bf00      	nop
 8006f24:	08007051 	.word	0x08007051
 8006f28:	08007073 	.word	0x08007073
 8006f2c:	080070ab 	.word	0x080070ab
 8006f30:	080070cf 	.word	0x080070cf
 8006f34:	20000348 	.word	0x20000348

08006f38 <stdio_exit_handler>:
 8006f38:	4a02      	ldr	r2, [pc, #8]	@ (8006f44 <stdio_exit_handler+0xc>)
 8006f3a:	4903      	ldr	r1, [pc, #12]	@ (8006f48 <stdio_exit_handler+0x10>)
 8006f3c:	4803      	ldr	r0, [pc, #12]	@ (8006f4c <stdio_exit_handler+0x14>)
 8006f3e:	f000 b869 	b.w	8007014 <_fwalk_sglue>
 8006f42:	bf00      	nop
 8006f44:	2000000c 	.word	0x2000000c
 8006f48:	08008885 	.word	0x08008885
 8006f4c:	2000001c 	.word	0x2000001c

08006f50 <cleanup_stdio>:
 8006f50:	6841      	ldr	r1, [r0, #4]
 8006f52:	4b0c      	ldr	r3, [pc, #48]	@ (8006f84 <cleanup_stdio+0x34>)
 8006f54:	4299      	cmp	r1, r3
 8006f56:	b510      	push	{r4, lr}
 8006f58:	4604      	mov	r4, r0
 8006f5a:	d001      	beq.n	8006f60 <cleanup_stdio+0x10>
 8006f5c:	f001 fc92 	bl	8008884 <_fflush_r>
 8006f60:	68a1      	ldr	r1, [r4, #8]
 8006f62:	4b09      	ldr	r3, [pc, #36]	@ (8006f88 <cleanup_stdio+0x38>)
 8006f64:	4299      	cmp	r1, r3
 8006f66:	d002      	beq.n	8006f6e <cleanup_stdio+0x1e>
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f001 fc8b 	bl	8008884 <_fflush_r>
 8006f6e:	68e1      	ldr	r1, [r4, #12]
 8006f70:	4b06      	ldr	r3, [pc, #24]	@ (8006f8c <cleanup_stdio+0x3c>)
 8006f72:	4299      	cmp	r1, r3
 8006f74:	d004      	beq.n	8006f80 <cleanup_stdio+0x30>
 8006f76:	4620      	mov	r0, r4
 8006f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f7c:	f001 bc82 	b.w	8008884 <_fflush_r>
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	bf00      	nop
 8006f84:	20000348 	.word	0x20000348
 8006f88:	200003b0 	.word	0x200003b0
 8006f8c:	20000418 	.word	0x20000418

08006f90 <global_stdio_init.part.0>:
 8006f90:	b510      	push	{r4, lr}
 8006f92:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc0 <global_stdio_init.part.0+0x30>)
 8006f94:	4c0b      	ldr	r4, [pc, #44]	@ (8006fc4 <global_stdio_init.part.0+0x34>)
 8006f96:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc8 <global_stdio_init.part.0+0x38>)
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2104      	movs	r1, #4
 8006fa0:	f7ff ff94 	bl	8006ecc <std>
 8006fa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006fa8:	2201      	movs	r2, #1
 8006faa:	2109      	movs	r1, #9
 8006fac:	f7ff ff8e 	bl	8006ecc <std>
 8006fb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fba:	2112      	movs	r1, #18
 8006fbc:	f7ff bf86 	b.w	8006ecc <std>
 8006fc0:	20000480 	.word	0x20000480
 8006fc4:	20000348 	.word	0x20000348
 8006fc8:	08006f39 	.word	0x08006f39

08006fcc <__sfp_lock_acquire>:
 8006fcc:	4801      	ldr	r0, [pc, #4]	@ (8006fd4 <__sfp_lock_acquire+0x8>)
 8006fce:	f000 b900 	b.w	80071d2 <__retarget_lock_acquire_recursive>
 8006fd2:	bf00      	nop
 8006fd4:	20000489 	.word	0x20000489

08006fd8 <__sfp_lock_release>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	@ (8006fe0 <__sfp_lock_release+0x8>)
 8006fda:	f000 b8fb 	b.w	80071d4 <__retarget_lock_release_recursive>
 8006fde:	bf00      	nop
 8006fe0:	20000489 	.word	0x20000489

08006fe4 <__sinit>:
 8006fe4:	b510      	push	{r4, lr}
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	f7ff fff0 	bl	8006fcc <__sfp_lock_acquire>
 8006fec:	6a23      	ldr	r3, [r4, #32]
 8006fee:	b11b      	cbz	r3, 8006ff8 <__sinit+0x14>
 8006ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff4:	f7ff bff0 	b.w	8006fd8 <__sfp_lock_release>
 8006ff8:	4b04      	ldr	r3, [pc, #16]	@ (800700c <__sinit+0x28>)
 8006ffa:	6223      	str	r3, [r4, #32]
 8006ffc:	4b04      	ldr	r3, [pc, #16]	@ (8007010 <__sinit+0x2c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f5      	bne.n	8006ff0 <__sinit+0xc>
 8007004:	f7ff ffc4 	bl	8006f90 <global_stdio_init.part.0>
 8007008:	e7f2      	b.n	8006ff0 <__sinit+0xc>
 800700a:	bf00      	nop
 800700c:	08006f51 	.word	0x08006f51
 8007010:	20000480 	.word	0x20000480

08007014 <_fwalk_sglue>:
 8007014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007018:	4607      	mov	r7, r0
 800701a:	4688      	mov	r8, r1
 800701c:	4614      	mov	r4, r2
 800701e:	2600      	movs	r6, #0
 8007020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007024:	f1b9 0901 	subs.w	r9, r9, #1
 8007028:	d505      	bpl.n	8007036 <_fwalk_sglue+0x22>
 800702a:	6824      	ldr	r4, [r4, #0]
 800702c:	2c00      	cmp	r4, #0
 800702e:	d1f7      	bne.n	8007020 <_fwalk_sglue+0xc>
 8007030:	4630      	mov	r0, r6
 8007032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007036:	89ab      	ldrh	r3, [r5, #12]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d907      	bls.n	800704c <_fwalk_sglue+0x38>
 800703c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007040:	3301      	adds	r3, #1
 8007042:	d003      	beq.n	800704c <_fwalk_sglue+0x38>
 8007044:	4629      	mov	r1, r5
 8007046:	4638      	mov	r0, r7
 8007048:	47c0      	blx	r8
 800704a:	4306      	orrs	r6, r0
 800704c:	3568      	adds	r5, #104	@ 0x68
 800704e:	e7e9      	b.n	8007024 <_fwalk_sglue+0x10>

08007050 <__sread>:
 8007050:	b510      	push	{r4, lr}
 8007052:	460c      	mov	r4, r1
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	f000 f86c 	bl	8007134 <_read_r>
 800705c:	2800      	cmp	r0, #0
 800705e:	bfab      	itete	ge
 8007060:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007062:	89a3      	ldrhlt	r3, [r4, #12]
 8007064:	181b      	addge	r3, r3, r0
 8007066:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800706a:	bfac      	ite	ge
 800706c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800706e:	81a3      	strhlt	r3, [r4, #12]
 8007070:	bd10      	pop	{r4, pc}

08007072 <__swrite>:
 8007072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	461f      	mov	r7, r3
 8007078:	898b      	ldrh	r3, [r1, #12]
 800707a:	05db      	lsls	r3, r3, #23
 800707c:	4605      	mov	r5, r0
 800707e:	460c      	mov	r4, r1
 8007080:	4616      	mov	r6, r2
 8007082:	d505      	bpl.n	8007090 <__swrite+0x1e>
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	2302      	movs	r3, #2
 800708a:	2200      	movs	r2, #0
 800708c:	f000 f840 	bl	8007110 <_lseek_r>
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007096:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	4632      	mov	r2, r6
 800709e:	463b      	mov	r3, r7
 80070a0:	4628      	mov	r0, r5
 80070a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070a6:	f000 b857 	b.w	8007158 <_write_r>

080070aa <__sseek>:
 80070aa:	b510      	push	{r4, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 f82d 	bl	8007110 <_lseek_r>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	bf15      	itete	ne
 80070bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070c6:	81a3      	strheq	r3, [r4, #12]
 80070c8:	bf18      	it	ne
 80070ca:	81a3      	strhne	r3, [r4, #12]
 80070cc:	bd10      	pop	{r4, pc}

080070ce <__sclose>:
 80070ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d2:	f000 b80d 	b.w	80070f0 <_close_r>

080070d6 <memset>:
 80070d6:	4402      	add	r2, r0
 80070d8:	4603      	mov	r3, r0
 80070da:	4293      	cmp	r3, r2
 80070dc:	d100      	bne.n	80070e0 <memset+0xa>
 80070de:	4770      	bx	lr
 80070e0:	f803 1b01 	strb.w	r1, [r3], #1
 80070e4:	e7f9      	b.n	80070da <memset+0x4>
	...

080070e8 <_localeconv_r>:
 80070e8:	4800      	ldr	r0, [pc, #0]	@ (80070ec <_localeconv_r+0x4>)
 80070ea:	4770      	bx	lr
 80070ec:	20000158 	.word	0x20000158

080070f0 <_close_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4d06      	ldr	r5, [pc, #24]	@ (800710c <_close_r+0x1c>)
 80070f4:	2300      	movs	r3, #0
 80070f6:	4604      	mov	r4, r0
 80070f8:	4608      	mov	r0, r1
 80070fa:	602b      	str	r3, [r5, #0]
 80070fc:	f7fa fb4a 	bl	8001794 <_close>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_close_r+0x1a>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	b103      	cbz	r3, 800710a <_close_r+0x1a>
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	20000484 	.word	0x20000484

08007110 <_lseek_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4d07      	ldr	r5, [pc, #28]	@ (8007130 <_lseek_r+0x20>)
 8007114:	4604      	mov	r4, r0
 8007116:	4608      	mov	r0, r1
 8007118:	4611      	mov	r1, r2
 800711a:	2200      	movs	r2, #0
 800711c:	602a      	str	r2, [r5, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	f7fa fb5f 	bl	80017e2 <_lseek>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_lseek_r+0x1e>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	b103      	cbz	r3, 800712e <_lseek_r+0x1e>
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	20000484 	.word	0x20000484

08007134 <_read_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d07      	ldr	r5, [pc, #28]	@ (8007154 <_read_r+0x20>)
 8007138:	4604      	mov	r4, r0
 800713a:	4608      	mov	r0, r1
 800713c:	4611      	mov	r1, r2
 800713e:	2200      	movs	r2, #0
 8007140:	602a      	str	r2, [r5, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	f7fa faed 	bl	8001722 <_read>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_read_r+0x1e>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	b103      	cbz	r3, 8007152 <_read_r+0x1e>
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	20000484 	.word	0x20000484

08007158 <_write_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d07      	ldr	r5, [pc, #28]	@ (8007178 <_write_r+0x20>)
 800715c:	4604      	mov	r4, r0
 800715e:	4608      	mov	r0, r1
 8007160:	4611      	mov	r1, r2
 8007162:	2200      	movs	r2, #0
 8007164:	602a      	str	r2, [r5, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f7fa faf8 	bl	800175c <_write>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_write_r+0x1e>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_write_r+0x1e>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	20000484 	.word	0x20000484

0800717c <__errno>:
 800717c:	4b01      	ldr	r3, [pc, #4]	@ (8007184 <__errno+0x8>)
 800717e:	6818      	ldr	r0, [r3, #0]
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	20000018 	.word	0x20000018

08007188 <__libc_init_array>:
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	4d0d      	ldr	r5, [pc, #52]	@ (80071c0 <__libc_init_array+0x38>)
 800718c:	4c0d      	ldr	r4, [pc, #52]	@ (80071c4 <__libc_init_array+0x3c>)
 800718e:	1b64      	subs	r4, r4, r5
 8007190:	10a4      	asrs	r4, r4, #2
 8007192:	2600      	movs	r6, #0
 8007194:	42a6      	cmp	r6, r4
 8007196:	d109      	bne.n	80071ac <__libc_init_array+0x24>
 8007198:	4d0b      	ldr	r5, [pc, #44]	@ (80071c8 <__libc_init_array+0x40>)
 800719a:	4c0c      	ldr	r4, [pc, #48]	@ (80071cc <__libc_init_array+0x44>)
 800719c:	f001 fec0 	bl	8008f20 <_init>
 80071a0:	1b64      	subs	r4, r4, r5
 80071a2:	10a4      	asrs	r4, r4, #2
 80071a4:	2600      	movs	r6, #0
 80071a6:	42a6      	cmp	r6, r4
 80071a8:	d105      	bne.n	80071b6 <__libc_init_array+0x2e>
 80071aa:	bd70      	pop	{r4, r5, r6, pc}
 80071ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b0:	4798      	blx	r3
 80071b2:	3601      	adds	r6, #1
 80071b4:	e7ee      	b.n	8007194 <__libc_init_array+0xc>
 80071b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ba:	4798      	blx	r3
 80071bc:	3601      	adds	r6, #1
 80071be:	e7f2      	b.n	80071a6 <__libc_init_array+0x1e>
 80071c0:	08009354 	.word	0x08009354
 80071c4:	08009354 	.word	0x08009354
 80071c8:	08009354 	.word	0x08009354
 80071cc:	08009358 	.word	0x08009358

080071d0 <__retarget_lock_init_recursive>:
 80071d0:	4770      	bx	lr

080071d2 <__retarget_lock_acquire_recursive>:
 80071d2:	4770      	bx	lr

080071d4 <__retarget_lock_release_recursive>:
 80071d4:	4770      	bx	lr

080071d6 <quorem>:
 80071d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071da:	6903      	ldr	r3, [r0, #16]
 80071dc:	690c      	ldr	r4, [r1, #16]
 80071de:	42a3      	cmp	r3, r4
 80071e0:	4607      	mov	r7, r0
 80071e2:	db7e      	blt.n	80072e2 <quorem+0x10c>
 80071e4:	3c01      	subs	r4, #1
 80071e6:	f101 0814 	add.w	r8, r1, #20
 80071ea:	00a3      	lsls	r3, r4, #2
 80071ec:	f100 0514 	add.w	r5, r0, #20
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007200:	3301      	adds	r3, #1
 8007202:	429a      	cmp	r2, r3
 8007204:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007208:	fbb2 f6f3 	udiv	r6, r2, r3
 800720c:	d32e      	bcc.n	800726c <quorem+0x96>
 800720e:	f04f 0a00 	mov.w	sl, #0
 8007212:	46c4      	mov	ip, r8
 8007214:	46ae      	mov	lr, r5
 8007216:	46d3      	mov	fp, sl
 8007218:	f85c 3b04 	ldr.w	r3, [ip], #4
 800721c:	b298      	uxth	r0, r3
 800721e:	fb06 a000 	mla	r0, r6, r0, sl
 8007222:	0c02      	lsrs	r2, r0, #16
 8007224:	0c1b      	lsrs	r3, r3, #16
 8007226:	fb06 2303 	mla	r3, r6, r3, r2
 800722a:	f8de 2000 	ldr.w	r2, [lr]
 800722e:	b280      	uxth	r0, r0
 8007230:	b292      	uxth	r2, r2
 8007232:	1a12      	subs	r2, r2, r0
 8007234:	445a      	add	r2, fp
 8007236:	f8de 0000 	ldr.w	r0, [lr]
 800723a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800723e:	b29b      	uxth	r3, r3
 8007240:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007244:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007248:	b292      	uxth	r2, r2
 800724a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800724e:	45e1      	cmp	r9, ip
 8007250:	f84e 2b04 	str.w	r2, [lr], #4
 8007254:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007258:	d2de      	bcs.n	8007218 <quorem+0x42>
 800725a:	9b00      	ldr	r3, [sp, #0]
 800725c:	58eb      	ldr	r3, [r5, r3]
 800725e:	b92b      	cbnz	r3, 800726c <quorem+0x96>
 8007260:	9b01      	ldr	r3, [sp, #4]
 8007262:	3b04      	subs	r3, #4
 8007264:	429d      	cmp	r5, r3
 8007266:	461a      	mov	r2, r3
 8007268:	d32f      	bcc.n	80072ca <quorem+0xf4>
 800726a:	613c      	str	r4, [r7, #16]
 800726c:	4638      	mov	r0, r7
 800726e:	f001 f97d 	bl	800856c <__mcmp>
 8007272:	2800      	cmp	r0, #0
 8007274:	db25      	blt.n	80072c2 <quorem+0xec>
 8007276:	4629      	mov	r1, r5
 8007278:	2000      	movs	r0, #0
 800727a:	f858 2b04 	ldr.w	r2, [r8], #4
 800727e:	f8d1 c000 	ldr.w	ip, [r1]
 8007282:	fa1f fe82 	uxth.w	lr, r2
 8007286:	fa1f f38c 	uxth.w	r3, ip
 800728a:	eba3 030e 	sub.w	r3, r3, lr
 800728e:	4403      	add	r3, r0
 8007290:	0c12      	lsrs	r2, r2, #16
 8007292:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007296:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800729a:	b29b      	uxth	r3, r3
 800729c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072a0:	45c1      	cmp	r9, r8
 80072a2:	f841 3b04 	str.w	r3, [r1], #4
 80072a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072aa:	d2e6      	bcs.n	800727a <quorem+0xa4>
 80072ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072b4:	b922      	cbnz	r2, 80072c0 <quorem+0xea>
 80072b6:	3b04      	subs	r3, #4
 80072b8:	429d      	cmp	r5, r3
 80072ba:	461a      	mov	r2, r3
 80072bc:	d30b      	bcc.n	80072d6 <quorem+0x100>
 80072be:	613c      	str	r4, [r7, #16]
 80072c0:	3601      	adds	r6, #1
 80072c2:	4630      	mov	r0, r6
 80072c4:	b003      	add	sp, #12
 80072c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ca:	6812      	ldr	r2, [r2, #0]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	d1cb      	bne.n	800726a <quorem+0x94>
 80072d2:	3c01      	subs	r4, #1
 80072d4:	e7c6      	b.n	8007264 <quorem+0x8e>
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	3b04      	subs	r3, #4
 80072da:	2a00      	cmp	r2, #0
 80072dc:	d1ef      	bne.n	80072be <quorem+0xe8>
 80072de:	3c01      	subs	r4, #1
 80072e0:	e7ea      	b.n	80072b8 <quorem+0xe2>
 80072e2:	2000      	movs	r0, #0
 80072e4:	e7ee      	b.n	80072c4 <quorem+0xee>
	...

080072e8 <_dtoa_r>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	69c7      	ldr	r7, [r0, #28]
 80072ee:	b097      	sub	sp, #92	@ 0x5c
 80072f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80072f4:	ec55 4b10 	vmov	r4, r5, d0
 80072f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80072fa:	9107      	str	r1, [sp, #28]
 80072fc:	4681      	mov	r9, r0
 80072fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007300:	9311      	str	r3, [sp, #68]	@ 0x44
 8007302:	b97f      	cbnz	r7, 8007324 <_dtoa_r+0x3c>
 8007304:	2010      	movs	r0, #16
 8007306:	f000 fe09 	bl	8007f1c <malloc>
 800730a:	4602      	mov	r2, r0
 800730c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007310:	b920      	cbnz	r0, 800731c <_dtoa_r+0x34>
 8007312:	4ba9      	ldr	r3, [pc, #676]	@ (80075b8 <_dtoa_r+0x2d0>)
 8007314:	21ef      	movs	r1, #239	@ 0xef
 8007316:	48a9      	ldr	r0, [pc, #676]	@ (80075bc <_dtoa_r+0x2d4>)
 8007318:	f001 fafa 	bl	8008910 <__assert_func>
 800731c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007320:	6007      	str	r7, [r0, #0]
 8007322:	60c7      	str	r7, [r0, #12]
 8007324:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007328:	6819      	ldr	r1, [r3, #0]
 800732a:	b159      	cbz	r1, 8007344 <_dtoa_r+0x5c>
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	604a      	str	r2, [r1, #4]
 8007330:	2301      	movs	r3, #1
 8007332:	4093      	lsls	r3, r2
 8007334:	608b      	str	r3, [r1, #8]
 8007336:	4648      	mov	r0, r9
 8007338:	f000 fee6 	bl	8008108 <_Bfree>
 800733c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	1e2b      	subs	r3, r5, #0
 8007346:	bfb9      	ittee	lt
 8007348:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800734c:	9305      	strlt	r3, [sp, #20]
 800734e:	2300      	movge	r3, #0
 8007350:	6033      	strge	r3, [r6, #0]
 8007352:	9f05      	ldr	r7, [sp, #20]
 8007354:	4b9a      	ldr	r3, [pc, #616]	@ (80075c0 <_dtoa_r+0x2d8>)
 8007356:	bfbc      	itt	lt
 8007358:	2201      	movlt	r2, #1
 800735a:	6032      	strlt	r2, [r6, #0]
 800735c:	43bb      	bics	r3, r7
 800735e:	d112      	bne.n	8007386 <_dtoa_r+0x9e>
 8007360:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007362:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800736c:	4323      	orrs	r3, r4
 800736e:	f000 855a 	beq.w	8007e26 <_dtoa_r+0xb3e>
 8007372:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007374:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80075d4 <_dtoa_r+0x2ec>
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 855c 	beq.w	8007e36 <_dtoa_r+0xb4e>
 800737e:	f10a 0303 	add.w	r3, sl, #3
 8007382:	f000 bd56 	b.w	8007e32 <_dtoa_r+0xb4a>
 8007386:	ed9d 7b04 	vldr	d7, [sp, #16]
 800738a:	2200      	movs	r2, #0
 800738c:	ec51 0b17 	vmov	r0, r1, d7
 8007390:	2300      	movs	r3, #0
 8007392:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007396:	f7f9 fbbf 	bl	8000b18 <__aeabi_dcmpeq>
 800739a:	4680      	mov	r8, r0
 800739c:	b158      	cbz	r0, 80073b6 <_dtoa_r+0xce>
 800739e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80073a0:	2301      	movs	r3, #1
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073a6:	b113      	cbz	r3, 80073ae <_dtoa_r+0xc6>
 80073a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80073aa:	4b86      	ldr	r3, [pc, #536]	@ (80075c4 <_dtoa_r+0x2dc>)
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80075d8 <_dtoa_r+0x2f0>
 80073b2:	f000 bd40 	b.w	8007e36 <_dtoa_r+0xb4e>
 80073b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80073ba:	aa14      	add	r2, sp, #80	@ 0x50
 80073bc:	a915      	add	r1, sp, #84	@ 0x54
 80073be:	4648      	mov	r0, r9
 80073c0:	f001 f984 	bl	80086cc <__d2b>
 80073c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073c8:	9002      	str	r0, [sp, #8]
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	d078      	beq.n	80074c0 <_dtoa_r+0x1d8>
 80073ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80073d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073e8:	4619      	mov	r1, r3
 80073ea:	2200      	movs	r2, #0
 80073ec:	4b76      	ldr	r3, [pc, #472]	@ (80075c8 <_dtoa_r+0x2e0>)
 80073ee:	f7f8 ff73 	bl	80002d8 <__aeabi_dsub>
 80073f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80075a0 <_dtoa_r+0x2b8>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f7f9 f926 	bl	8000648 <__aeabi_dmul>
 80073fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80075a8 <_dtoa_r+0x2c0>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f8 ff6b 	bl	80002dc <__adddf3>
 8007406:	4604      	mov	r4, r0
 8007408:	4630      	mov	r0, r6
 800740a:	460d      	mov	r5, r1
 800740c:	f7f9 f8b2 	bl	8000574 <__aeabi_i2d>
 8007410:	a367      	add	r3, pc, #412	@ (adr r3, 80075b0 <_dtoa_r+0x2c8>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f9 f917 	bl	8000648 <__aeabi_dmul>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4620      	mov	r0, r4
 8007420:	4629      	mov	r1, r5
 8007422:	f7f8 ff5b 	bl	80002dc <__adddf3>
 8007426:	4604      	mov	r4, r0
 8007428:	460d      	mov	r5, r1
 800742a:	f7f9 fbbd 	bl	8000ba8 <__aeabi_d2iz>
 800742e:	2200      	movs	r2, #0
 8007430:	4607      	mov	r7, r0
 8007432:	2300      	movs	r3, #0
 8007434:	4620      	mov	r0, r4
 8007436:	4629      	mov	r1, r5
 8007438:	f7f9 fb78 	bl	8000b2c <__aeabi_dcmplt>
 800743c:	b140      	cbz	r0, 8007450 <_dtoa_r+0x168>
 800743e:	4638      	mov	r0, r7
 8007440:	f7f9 f898 	bl	8000574 <__aeabi_i2d>
 8007444:	4622      	mov	r2, r4
 8007446:	462b      	mov	r3, r5
 8007448:	f7f9 fb66 	bl	8000b18 <__aeabi_dcmpeq>
 800744c:	b900      	cbnz	r0, 8007450 <_dtoa_r+0x168>
 800744e:	3f01      	subs	r7, #1
 8007450:	2f16      	cmp	r7, #22
 8007452:	d852      	bhi.n	80074fa <_dtoa_r+0x212>
 8007454:	4b5d      	ldr	r3, [pc, #372]	@ (80075cc <_dtoa_r+0x2e4>)
 8007456:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007462:	f7f9 fb63 	bl	8000b2c <__aeabi_dcmplt>
 8007466:	2800      	cmp	r0, #0
 8007468:	d049      	beq.n	80074fe <_dtoa_r+0x216>
 800746a:	3f01      	subs	r7, #1
 800746c:	2300      	movs	r3, #0
 800746e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007470:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007472:	1b9b      	subs	r3, r3, r6
 8007474:	1e5a      	subs	r2, r3, #1
 8007476:	bf45      	ittet	mi
 8007478:	f1c3 0301 	rsbmi	r3, r3, #1
 800747c:	9300      	strmi	r3, [sp, #0]
 800747e:	2300      	movpl	r3, #0
 8007480:	2300      	movmi	r3, #0
 8007482:	9206      	str	r2, [sp, #24]
 8007484:	bf54      	ite	pl
 8007486:	9300      	strpl	r3, [sp, #0]
 8007488:	9306      	strmi	r3, [sp, #24]
 800748a:	2f00      	cmp	r7, #0
 800748c:	db39      	blt.n	8007502 <_dtoa_r+0x21a>
 800748e:	9b06      	ldr	r3, [sp, #24]
 8007490:	970d      	str	r7, [sp, #52]	@ 0x34
 8007492:	443b      	add	r3, r7
 8007494:	9306      	str	r3, [sp, #24]
 8007496:	2300      	movs	r3, #0
 8007498:	9308      	str	r3, [sp, #32]
 800749a:	9b07      	ldr	r3, [sp, #28]
 800749c:	2b09      	cmp	r3, #9
 800749e:	d863      	bhi.n	8007568 <_dtoa_r+0x280>
 80074a0:	2b05      	cmp	r3, #5
 80074a2:	bfc4      	itt	gt
 80074a4:	3b04      	subgt	r3, #4
 80074a6:	9307      	strgt	r3, [sp, #28]
 80074a8:	9b07      	ldr	r3, [sp, #28]
 80074aa:	f1a3 0302 	sub.w	r3, r3, #2
 80074ae:	bfcc      	ite	gt
 80074b0:	2400      	movgt	r4, #0
 80074b2:	2401      	movle	r4, #1
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d863      	bhi.n	8007580 <_dtoa_r+0x298>
 80074b8:	e8df f003 	tbb	[pc, r3]
 80074bc:	2b375452 	.word	0x2b375452
 80074c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80074c4:	441e      	add	r6, r3
 80074c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	bfc1      	itttt	gt
 80074ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074d2:	409f      	lslgt	r7, r3
 80074d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074dc:	bfd6      	itet	le
 80074de:	f1c3 0320 	rsble	r3, r3, #32
 80074e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80074e6:	fa04 f003 	lslle.w	r0, r4, r3
 80074ea:	f7f9 f833 	bl	8000554 <__aeabi_ui2d>
 80074ee:	2201      	movs	r2, #1
 80074f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074f4:	3e01      	subs	r6, #1
 80074f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80074f8:	e776      	b.n	80073e8 <_dtoa_r+0x100>
 80074fa:	2301      	movs	r3, #1
 80074fc:	e7b7      	b.n	800746e <_dtoa_r+0x186>
 80074fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8007500:	e7b6      	b.n	8007470 <_dtoa_r+0x188>
 8007502:	9b00      	ldr	r3, [sp, #0]
 8007504:	1bdb      	subs	r3, r3, r7
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	427b      	negs	r3, r7
 800750a:	9308      	str	r3, [sp, #32]
 800750c:	2300      	movs	r3, #0
 800750e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007510:	e7c3      	b.n	800749a <_dtoa_r+0x1b2>
 8007512:	2301      	movs	r3, #1
 8007514:	9309      	str	r3, [sp, #36]	@ 0x24
 8007516:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007518:	eb07 0b03 	add.w	fp, r7, r3
 800751c:	f10b 0301 	add.w	r3, fp, #1
 8007520:	2b01      	cmp	r3, #1
 8007522:	9303      	str	r3, [sp, #12]
 8007524:	bfb8      	it	lt
 8007526:	2301      	movlt	r3, #1
 8007528:	e006      	b.n	8007538 <_dtoa_r+0x250>
 800752a:	2301      	movs	r3, #1
 800752c:	9309      	str	r3, [sp, #36]	@ 0x24
 800752e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007530:	2b00      	cmp	r3, #0
 8007532:	dd28      	ble.n	8007586 <_dtoa_r+0x29e>
 8007534:	469b      	mov	fp, r3
 8007536:	9303      	str	r3, [sp, #12]
 8007538:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800753c:	2100      	movs	r1, #0
 800753e:	2204      	movs	r2, #4
 8007540:	f102 0514 	add.w	r5, r2, #20
 8007544:	429d      	cmp	r5, r3
 8007546:	d926      	bls.n	8007596 <_dtoa_r+0x2ae>
 8007548:	6041      	str	r1, [r0, #4]
 800754a:	4648      	mov	r0, r9
 800754c:	f000 fd9c 	bl	8008088 <_Balloc>
 8007550:	4682      	mov	sl, r0
 8007552:	2800      	cmp	r0, #0
 8007554:	d142      	bne.n	80075dc <_dtoa_r+0x2f4>
 8007556:	4b1e      	ldr	r3, [pc, #120]	@ (80075d0 <_dtoa_r+0x2e8>)
 8007558:	4602      	mov	r2, r0
 800755a:	f240 11af 	movw	r1, #431	@ 0x1af
 800755e:	e6da      	b.n	8007316 <_dtoa_r+0x2e>
 8007560:	2300      	movs	r3, #0
 8007562:	e7e3      	b.n	800752c <_dtoa_r+0x244>
 8007564:	2300      	movs	r3, #0
 8007566:	e7d5      	b.n	8007514 <_dtoa_r+0x22c>
 8007568:	2401      	movs	r4, #1
 800756a:	2300      	movs	r3, #0
 800756c:	9307      	str	r3, [sp, #28]
 800756e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007570:	f04f 3bff 	mov.w	fp, #4294967295
 8007574:	2200      	movs	r2, #0
 8007576:	f8cd b00c 	str.w	fp, [sp, #12]
 800757a:	2312      	movs	r3, #18
 800757c:	920c      	str	r2, [sp, #48]	@ 0x30
 800757e:	e7db      	b.n	8007538 <_dtoa_r+0x250>
 8007580:	2301      	movs	r3, #1
 8007582:	9309      	str	r3, [sp, #36]	@ 0x24
 8007584:	e7f4      	b.n	8007570 <_dtoa_r+0x288>
 8007586:	f04f 0b01 	mov.w	fp, #1
 800758a:	f8cd b00c 	str.w	fp, [sp, #12]
 800758e:	465b      	mov	r3, fp
 8007590:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007594:	e7d0      	b.n	8007538 <_dtoa_r+0x250>
 8007596:	3101      	adds	r1, #1
 8007598:	0052      	lsls	r2, r2, #1
 800759a:	e7d1      	b.n	8007540 <_dtoa_r+0x258>
 800759c:	f3af 8000 	nop.w
 80075a0:	636f4361 	.word	0x636f4361
 80075a4:	3fd287a7 	.word	0x3fd287a7
 80075a8:	8b60c8b3 	.word	0x8b60c8b3
 80075ac:	3fc68a28 	.word	0x3fc68a28
 80075b0:	509f79fb 	.word	0x509f79fb
 80075b4:	3fd34413 	.word	0x3fd34413
 80075b8:	08009015 	.word	0x08009015
 80075bc:	0800902c 	.word	0x0800902c
 80075c0:	7ff00000 	.word	0x7ff00000
 80075c4:	08008fe5 	.word	0x08008fe5
 80075c8:	3ff80000 	.word	0x3ff80000
 80075cc:	08009180 	.word	0x08009180
 80075d0:	08009084 	.word	0x08009084
 80075d4:	08009011 	.word	0x08009011
 80075d8:	08008fe4 	.word	0x08008fe4
 80075dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80075e0:	6018      	str	r0, [r3, #0]
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	2b0e      	cmp	r3, #14
 80075e6:	f200 80a1 	bhi.w	800772c <_dtoa_r+0x444>
 80075ea:	2c00      	cmp	r4, #0
 80075ec:	f000 809e 	beq.w	800772c <_dtoa_r+0x444>
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	dd33      	ble.n	800765c <_dtoa_r+0x374>
 80075f4:	4b9c      	ldr	r3, [pc, #624]	@ (8007868 <_dtoa_r+0x580>)
 80075f6:	f007 020f 	and.w	r2, r7, #15
 80075fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075fe:	ed93 7b00 	vldr	d7, [r3]
 8007602:	05f8      	lsls	r0, r7, #23
 8007604:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007608:	ea4f 1427 	mov.w	r4, r7, asr #4
 800760c:	d516      	bpl.n	800763c <_dtoa_r+0x354>
 800760e:	4b97      	ldr	r3, [pc, #604]	@ (800786c <_dtoa_r+0x584>)
 8007610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007618:	f7f9 f940 	bl	800089c <__aeabi_ddiv>
 800761c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007620:	f004 040f 	and.w	r4, r4, #15
 8007624:	2603      	movs	r6, #3
 8007626:	4d91      	ldr	r5, [pc, #580]	@ (800786c <_dtoa_r+0x584>)
 8007628:	b954      	cbnz	r4, 8007640 <_dtoa_r+0x358>
 800762a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800762e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007632:	f7f9 f933 	bl	800089c <__aeabi_ddiv>
 8007636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800763a:	e028      	b.n	800768e <_dtoa_r+0x3a6>
 800763c:	2602      	movs	r6, #2
 800763e:	e7f2      	b.n	8007626 <_dtoa_r+0x33e>
 8007640:	07e1      	lsls	r1, r4, #31
 8007642:	d508      	bpl.n	8007656 <_dtoa_r+0x36e>
 8007644:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007648:	e9d5 2300 	ldrd	r2, r3, [r5]
 800764c:	f7f8 fffc 	bl	8000648 <__aeabi_dmul>
 8007650:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007654:	3601      	adds	r6, #1
 8007656:	1064      	asrs	r4, r4, #1
 8007658:	3508      	adds	r5, #8
 800765a:	e7e5      	b.n	8007628 <_dtoa_r+0x340>
 800765c:	f000 80af 	beq.w	80077be <_dtoa_r+0x4d6>
 8007660:	427c      	negs	r4, r7
 8007662:	4b81      	ldr	r3, [pc, #516]	@ (8007868 <_dtoa_r+0x580>)
 8007664:	4d81      	ldr	r5, [pc, #516]	@ (800786c <_dtoa_r+0x584>)
 8007666:	f004 020f 	and.w	r2, r4, #15
 800766a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007676:	f7f8 ffe7 	bl	8000648 <__aeabi_dmul>
 800767a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800767e:	1124      	asrs	r4, r4, #4
 8007680:	2300      	movs	r3, #0
 8007682:	2602      	movs	r6, #2
 8007684:	2c00      	cmp	r4, #0
 8007686:	f040 808f 	bne.w	80077a8 <_dtoa_r+0x4c0>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1d3      	bne.n	8007636 <_dtoa_r+0x34e>
 800768e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007690:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8094 	beq.w	80077c2 <_dtoa_r+0x4da>
 800769a:	4b75      	ldr	r3, [pc, #468]	@ (8007870 <_dtoa_r+0x588>)
 800769c:	2200      	movs	r2, #0
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7f9 fa43 	bl	8000b2c <__aeabi_dcmplt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f000 808b 	beq.w	80077c2 <_dtoa_r+0x4da>
 80076ac:	9b03      	ldr	r3, [sp, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8087 	beq.w	80077c2 <_dtoa_r+0x4da>
 80076b4:	f1bb 0f00 	cmp.w	fp, #0
 80076b8:	dd34      	ble.n	8007724 <_dtoa_r+0x43c>
 80076ba:	4620      	mov	r0, r4
 80076bc:	4b6d      	ldr	r3, [pc, #436]	@ (8007874 <_dtoa_r+0x58c>)
 80076be:	2200      	movs	r2, #0
 80076c0:	4629      	mov	r1, r5
 80076c2:	f7f8 ffc1 	bl	8000648 <__aeabi_dmul>
 80076c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076ca:	f107 38ff 	add.w	r8, r7, #4294967295
 80076ce:	3601      	adds	r6, #1
 80076d0:	465c      	mov	r4, fp
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7f8 ff4e 	bl	8000574 <__aeabi_i2d>
 80076d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076dc:	f7f8 ffb4 	bl	8000648 <__aeabi_dmul>
 80076e0:	4b65      	ldr	r3, [pc, #404]	@ (8007878 <_dtoa_r+0x590>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	f7f8 fdfa 	bl	80002dc <__adddf3>
 80076e8:	4605      	mov	r5, r0
 80076ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076ee:	2c00      	cmp	r4, #0
 80076f0:	d16a      	bne.n	80077c8 <_dtoa_r+0x4e0>
 80076f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076f6:	4b61      	ldr	r3, [pc, #388]	@ (800787c <_dtoa_r+0x594>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	f7f8 fded 	bl	80002d8 <__aeabi_dsub>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007706:	462a      	mov	r2, r5
 8007708:	4633      	mov	r3, r6
 800770a:	f7f9 fa2d 	bl	8000b68 <__aeabi_dcmpgt>
 800770e:	2800      	cmp	r0, #0
 8007710:	f040 8298 	bne.w	8007c44 <_dtoa_r+0x95c>
 8007714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007718:	462a      	mov	r2, r5
 800771a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800771e:	f7f9 fa05 	bl	8000b2c <__aeabi_dcmplt>
 8007722:	bb38      	cbnz	r0, 8007774 <_dtoa_r+0x48c>
 8007724:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007728:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800772c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800772e:	2b00      	cmp	r3, #0
 8007730:	f2c0 8157 	blt.w	80079e2 <_dtoa_r+0x6fa>
 8007734:	2f0e      	cmp	r7, #14
 8007736:	f300 8154 	bgt.w	80079e2 <_dtoa_r+0x6fa>
 800773a:	4b4b      	ldr	r3, [pc, #300]	@ (8007868 <_dtoa_r+0x580>)
 800773c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007740:	ed93 7b00 	vldr	d7, [r3]
 8007744:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007746:	2b00      	cmp	r3, #0
 8007748:	ed8d 7b00 	vstr	d7, [sp]
 800774c:	f280 80e5 	bge.w	800791a <_dtoa_r+0x632>
 8007750:	9b03      	ldr	r3, [sp, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f300 80e1 	bgt.w	800791a <_dtoa_r+0x632>
 8007758:	d10c      	bne.n	8007774 <_dtoa_r+0x48c>
 800775a:	4b48      	ldr	r3, [pc, #288]	@ (800787c <_dtoa_r+0x594>)
 800775c:	2200      	movs	r2, #0
 800775e:	ec51 0b17 	vmov	r0, r1, d7
 8007762:	f7f8 ff71 	bl	8000648 <__aeabi_dmul>
 8007766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800776a:	f7f9 f9f3 	bl	8000b54 <__aeabi_dcmpge>
 800776e:	2800      	cmp	r0, #0
 8007770:	f000 8266 	beq.w	8007c40 <_dtoa_r+0x958>
 8007774:	2400      	movs	r4, #0
 8007776:	4625      	mov	r5, r4
 8007778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800777a:	4656      	mov	r6, sl
 800777c:	ea6f 0803 	mvn.w	r8, r3
 8007780:	2700      	movs	r7, #0
 8007782:	4621      	mov	r1, r4
 8007784:	4648      	mov	r0, r9
 8007786:	f000 fcbf 	bl	8008108 <_Bfree>
 800778a:	2d00      	cmp	r5, #0
 800778c:	f000 80bd 	beq.w	800790a <_dtoa_r+0x622>
 8007790:	b12f      	cbz	r7, 800779e <_dtoa_r+0x4b6>
 8007792:	42af      	cmp	r7, r5
 8007794:	d003      	beq.n	800779e <_dtoa_r+0x4b6>
 8007796:	4639      	mov	r1, r7
 8007798:	4648      	mov	r0, r9
 800779a:	f000 fcb5 	bl	8008108 <_Bfree>
 800779e:	4629      	mov	r1, r5
 80077a0:	4648      	mov	r0, r9
 80077a2:	f000 fcb1 	bl	8008108 <_Bfree>
 80077a6:	e0b0      	b.n	800790a <_dtoa_r+0x622>
 80077a8:	07e2      	lsls	r2, r4, #31
 80077aa:	d505      	bpl.n	80077b8 <_dtoa_r+0x4d0>
 80077ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077b0:	f7f8 ff4a 	bl	8000648 <__aeabi_dmul>
 80077b4:	3601      	adds	r6, #1
 80077b6:	2301      	movs	r3, #1
 80077b8:	1064      	asrs	r4, r4, #1
 80077ba:	3508      	adds	r5, #8
 80077bc:	e762      	b.n	8007684 <_dtoa_r+0x39c>
 80077be:	2602      	movs	r6, #2
 80077c0:	e765      	b.n	800768e <_dtoa_r+0x3a6>
 80077c2:	9c03      	ldr	r4, [sp, #12]
 80077c4:	46b8      	mov	r8, r7
 80077c6:	e784      	b.n	80076d2 <_dtoa_r+0x3ea>
 80077c8:	4b27      	ldr	r3, [pc, #156]	@ (8007868 <_dtoa_r+0x580>)
 80077ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077d4:	4454      	add	r4, sl
 80077d6:	2900      	cmp	r1, #0
 80077d8:	d054      	beq.n	8007884 <_dtoa_r+0x59c>
 80077da:	4929      	ldr	r1, [pc, #164]	@ (8007880 <_dtoa_r+0x598>)
 80077dc:	2000      	movs	r0, #0
 80077de:	f7f9 f85d 	bl	800089c <__aeabi_ddiv>
 80077e2:	4633      	mov	r3, r6
 80077e4:	462a      	mov	r2, r5
 80077e6:	f7f8 fd77 	bl	80002d8 <__aeabi_dsub>
 80077ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80077ee:	4656      	mov	r6, sl
 80077f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077f4:	f7f9 f9d8 	bl	8000ba8 <__aeabi_d2iz>
 80077f8:	4605      	mov	r5, r0
 80077fa:	f7f8 febb 	bl	8000574 <__aeabi_i2d>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007806:	f7f8 fd67 	bl	80002d8 <__aeabi_dsub>
 800780a:	3530      	adds	r5, #48	@ 0x30
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007814:	f806 5b01 	strb.w	r5, [r6], #1
 8007818:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800781c:	f7f9 f986 	bl	8000b2c <__aeabi_dcmplt>
 8007820:	2800      	cmp	r0, #0
 8007822:	d172      	bne.n	800790a <_dtoa_r+0x622>
 8007824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007828:	4911      	ldr	r1, [pc, #68]	@ (8007870 <_dtoa_r+0x588>)
 800782a:	2000      	movs	r0, #0
 800782c:	f7f8 fd54 	bl	80002d8 <__aeabi_dsub>
 8007830:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007834:	f7f9 f97a 	bl	8000b2c <__aeabi_dcmplt>
 8007838:	2800      	cmp	r0, #0
 800783a:	f040 80b4 	bne.w	80079a6 <_dtoa_r+0x6be>
 800783e:	42a6      	cmp	r6, r4
 8007840:	f43f af70 	beq.w	8007724 <_dtoa_r+0x43c>
 8007844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007848:	4b0a      	ldr	r3, [pc, #40]	@ (8007874 <_dtoa_r+0x58c>)
 800784a:	2200      	movs	r2, #0
 800784c:	f7f8 fefc 	bl	8000648 <__aeabi_dmul>
 8007850:	4b08      	ldr	r3, [pc, #32]	@ (8007874 <_dtoa_r+0x58c>)
 8007852:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007856:	2200      	movs	r2, #0
 8007858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800785c:	f7f8 fef4 	bl	8000648 <__aeabi_dmul>
 8007860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007864:	e7c4      	b.n	80077f0 <_dtoa_r+0x508>
 8007866:	bf00      	nop
 8007868:	08009180 	.word	0x08009180
 800786c:	08009158 	.word	0x08009158
 8007870:	3ff00000 	.word	0x3ff00000
 8007874:	40240000 	.word	0x40240000
 8007878:	401c0000 	.word	0x401c0000
 800787c:	40140000 	.word	0x40140000
 8007880:	3fe00000 	.word	0x3fe00000
 8007884:	4631      	mov	r1, r6
 8007886:	4628      	mov	r0, r5
 8007888:	f7f8 fede 	bl	8000648 <__aeabi_dmul>
 800788c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007890:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007892:	4656      	mov	r6, sl
 8007894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007898:	f7f9 f986 	bl	8000ba8 <__aeabi_d2iz>
 800789c:	4605      	mov	r5, r0
 800789e:	f7f8 fe69 	bl	8000574 <__aeabi_i2d>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078aa:	f7f8 fd15 	bl	80002d8 <__aeabi_dsub>
 80078ae:	3530      	adds	r5, #48	@ 0x30
 80078b0:	f806 5b01 	strb.w	r5, [r6], #1
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	42a6      	cmp	r6, r4
 80078ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	d124      	bne.n	800790e <_dtoa_r+0x626>
 80078c4:	4baf      	ldr	r3, [pc, #700]	@ (8007b84 <_dtoa_r+0x89c>)
 80078c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80078ca:	f7f8 fd07 	bl	80002dc <__adddf3>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078d6:	f7f9 f947 	bl	8000b68 <__aeabi_dcmpgt>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d163      	bne.n	80079a6 <_dtoa_r+0x6be>
 80078de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80078e2:	49a8      	ldr	r1, [pc, #672]	@ (8007b84 <_dtoa_r+0x89c>)
 80078e4:	2000      	movs	r0, #0
 80078e6:	f7f8 fcf7 	bl	80002d8 <__aeabi_dsub>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078f2:	f7f9 f91b 	bl	8000b2c <__aeabi_dcmplt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	f43f af14 	beq.w	8007724 <_dtoa_r+0x43c>
 80078fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80078fe:	1e73      	subs	r3, r6, #1
 8007900:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007902:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007906:	2b30      	cmp	r3, #48	@ 0x30
 8007908:	d0f8      	beq.n	80078fc <_dtoa_r+0x614>
 800790a:	4647      	mov	r7, r8
 800790c:	e03b      	b.n	8007986 <_dtoa_r+0x69e>
 800790e:	4b9e      	ldr	r3, [pc, #632]	@ (8007b88 <_dtoa_r+0x8a0>)
 8007910:	f7f8 fe9a 	bl	8000648 <__aeabi_dmul>
 8007914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007918:	e7bc      	b.n	8007894 <_dtoa_r+0x5ac>
 800791a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800791e:	4656      	mov	r6, sl
 8007920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007924:	4620      	mov	r0, r4
 8007926:	4629      	mov	r1, r5
 8007928:	f7f8 ffb8 	bl	800089c <__aeabi_ddiv>
 800792c:	f7f9 f93c 	bl	8000ba8 <__aeabi_d2iz>
 8007930:	4680      	mov	r8, r0
 8007932:	f7f8 fe1f 	bl	8000574 <__aeabi_i2d>
 8007936:	e9dd 2300 	ldrd	r2, r3, [sp]
 800793a:	f7f8 fe85 	bl	8000648 <__aeabi_dmul>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4620      	mov	r0, r4
 8007944:	4629      	mov	r1, r5
 8007946:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800794a:	f7f8 fcc5 	bl	80002d8 <__aeabi_dsub>
 800794e:	f806 4b01 	strb.w	r4, [r6], #1
 8007952:	9d03      	ldr	r5, [sp, #12]
 8007954:	eba6 040a 	sub.w	r4, r6, sl
 8007958:	42a5      	cmp	r5, r4
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	d133      	bne.n	80079c8 <_dtoa_r+0x6e0>
 8007960:	f7f8 fcbc 	bl	80002dc <__adddf3>
 8007964:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007968:	4604      	mov	r4, r0
 800796a:	460d      	mov	r5, r1
 800796c:	f7f9 f8fc 	bl	8000b68 <__aeabi_dcmpgt>
 8007970:	b9c0      	cbnz	r0, 80079a4 <_dtoa_r+0x6bc>
 8007972:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007976:	4620      	mov	r0, r4
 8007978:	4629      	mov	r1, r5
 800797a:	f7f9 f8cd 	bl	8000b18 <__aeabi_dcmpeq>
 800797e:	b110      	cbz	r0, 8007986 <_dtoa_r+0x69e>
 8007980:	f018 0f01 	tst.w	r8, #1
 8007984:	d10e      	bne.n	80079a4 <_dtoa_r+0x6bc>
 8007986:	9902      	ldr	r1, [sp, #8]
 8007988:	4648      	mov	r0, r9
 800798a:	f000 fbbd 	bl	8008108 <_Bfree>
 800798e:	2300      	movs	r3, #0
 8007990:	7033      	strb	r3, [r6, #0]
 8007992:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007994:	3701      	adds	r7, #1
 8007996:	601f      	str	r7, [r3, #0]
 8007998:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 824b 	beq.w	8007e36 <_dtoa_r+0xb4e>
 80079a0:	601e      	str	r6, [r3, #0]
 80079a2:	e248      	b.n	8007e36 <_dtoa_r+0xb4e>
 80079a4:	46b8      	mov	r8, r7
 80079a6:	4633      	mov	r3, r6
 80079a8:	461e      	mov	r6, r3
 80079aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ae:	2a39      	cmp	r2, #57	@ 0x39
 80079b0:	d106      	bne.n	80079c0 <_dtoa_r+0x6d8>
 80079b2:	459a      	cmp	sl, r3
 80079b4:	d1f8      	bne.n	80079a8 <_dtoa_r+0x6c0>
 80079b6:	2230      	movs	r2, #48	@ 0x30
 80079b8:	f108 0801 	add.w	r8, r8, #1
 80079bc:	f88a 2000 	strb.w	r2, [sl]
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	3201      	adds	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e7a0      	b.n	800790a <_dtoa_r+0x622>
 80079c8:	4b6f      	ldr	r3, [pc, #444]	@ (8007b88 <_dtoa_r+0x8a0>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	f7f8 fe3c 	bl	8000648 <__aeabi_dmul>
 80079d0:	2200      	movs	r2, #0
 80079d2:	2300      	movs	r3, #0
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	f7f9 f89e 	bl	8000b18 <__aeabi_dcmpeq>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d09f      	beq.n	8007920 <_dtoa_r+0x638>
 80079e0:	e7d1      	b.n	8007986 <_dtoa_r+0x69e>
 80079e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079e4:	2a00      	cmp	r2, #0
 80079e6:	f000 80ea 	beq.w	8007bbe <_dtoa_r+0x8d6>
 80079ea:	9a07      	ldr	r2, [sp, #28]
 80079ec:	2a01      	cmp	r2, #1
 80079ee:	f300 80cd 	bgt.w	8007b8c <_dtoa_r+0x8a4>
 80079f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	f000 80c1 	beq.w	8007b7c <_dtoa_r+0x894>
 80079fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079fe:	9c08      	ldr	r4, [sp, #32]
 8007a00:	9e00      	ldr	r6, [sp, #0]
 8007a02:	9a00      	ldr	r2, [sp, #0]
 8007a04:	441a      	add	r2, r3
 8007a06:	9200      	str	r2, [sp, #0]
 8007a08:	9a06      	ldr	r2, [sp, #24]
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	441a      	add	r2, r3
 8007a0e:	4648      	mov	r0, r9
 8007a10:	9206      	str	r2, [sp, #24]
 8007a12:	f000 fc2d 	bl	8008270 <__i2b>
 8007a16:	4605      	mov	r5, r0
 8007a18:	b166      	cbz	r6, 8007a34 <_dtoa_r+0x74c>
 8007a1a:	9b06      	ldr	r3, [sp, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	dd09      	ble.n	8007a34 <_dtoa_r+0x74c>
 8007a20:	42b3      	cmp	r3, r6
 8007a22:	9a00      	ldr	r2, [sp, #0]
 8007a24:	bfa8      	it	ge
 8007a26:	4633      	movge	r3, r6
 8007a28:	1ad2      	subs	r2, r2, r3
 8007a2a:	9200      	str	r2, [sp, #0]
 8007a2c:	9a06      	ldr	r2, [sp, #24]
 8007a2e:	1af6      	subs	r6, r6, r3
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	9306      	str	r3, [sp, #24]
 8007a34:	9b08      	ldr	r3, [sp, #32]
 8007a36:	b30b      	cbz	r3, 8007a7c <_dtoa_r+0x794>
 8007a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 80c6 	beq.w	8007bcc <_dtoa_r+0x8e4>
 8007a40:	2c00      	cmp	r4, #0
 8007a42:	f000 80c0 	beq.w	8007bc6 <_dtoa_r+0x8de>
 8007a46:	4629      	mov	r1, r5
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4648      	mov	r0, r9
 8007a4c:	f000 fcc8 	bl	80083e0 <__pow5mult>
 8007a50:	9a02      	ldr	r2, [sp, #8]
 8007a52:	4601      	mov	r1, r0
 8007a54:	4605      	mov	r5, r0
 8007a56:	4648      	mov	r0, r9
 8007a58:	f000 fc20 	bl	800829c <__multiply>
 8007a5c:	9902      	ldr	r1, [sp, #8]
 8007a5e:	4680      	mov	r8, r0
 8007a60:	4648      	mov	r0, r9
 8007a62:	f000 fb51 	bl	8008108 <_Bfree>
 8007a66:	9b08      	ldr	r3, [sp, #32]
 8007a68:	1b1b      	subs	r3, r3, r4
 8007a6a:	9308      	str	r3, [sp, #32]
 8007a6c:	f000 80b1 	beq.w	8007bd2 <_dtoa_r+0x8ea>
 8007a70:	9a08      	ldr	r2, [sp, #32]
 8007a72:	4641      	mov	r1, r8
 8007a74:	4648      	mov	r0, r9
 8007a76:	f000 fcb3 	bl	80083e0 <__pow5mult>
 8007a7a:	9002      	str	r0, [sp, #8]
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	4648      	mov	r0, r9
 8007a80:	f000 fbf6 	bl	8008270 <__i2b>
 8007a84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a86:	4604      	mov	r4, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 81d8 	beq.w	8007e3e <_dtoa_r+0xb56>
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4601      	mov	r1, r0
 8007a92:	4648      	mov	r0, r9
 8007a94:	f000 fca4 	bl	80083e0 <__pow5mult>
 8007a98:	9b07      	ldr	r3, [sp, #28]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	f300 809f 	bgt.w	8007be0 <_dtoa_r+0x8f8>
 8007aa2:	9b04      	ldr	r3, [sp, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f040 8097 	bne.w	8007bd8 <_dtoa_r+0x8f0>
 8007aaa:	9b05      	ldr	r3, [sp, #20]
 8007aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f040 8093 	bne.w	8007bdc <_dtoa_r+0x8f4>
 8007ab6:	9b05      	ldr	r3, [sp, #20]
 8007ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007abc:	0d1b      	lsrs	r3, r3, #20
 8007abe:	051b      	lsls	r3, r3, #20
 8007ac0:	b133      	cbz	r3, 8007ad0 <_dtoa_r+0x7e8>
 8007ac2:	9b00      	ldr	r3, [sp, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	9b06      	ldr	r3, [sp, #24]
 8007aca:	3301      	adds	r3, #1
 8007acc:	9306      	str	r3, [sp, #24]
 8007ace:	2301      	movs	r3, #1
 8007ad0:	9308      	str	r3, [sp, #32]
 8007ad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 81b8 	beq.w	8007e4a <_dtoa_r+0xb62>
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ae0:	6918      	ldr	r0, [r3, #16]
 8007ae2:	f000 fb79 	bl	80081d8 <__hi0bits>
 8007ae6:	f1c0 0020 	rsb	r0, r0, #32
 8007aea:	9b06      	ldr	r3, [sp, #24]
 8007aec:	4418      	add	r0, r3
 8007aee:	f010 001f 	ands.w	r0, r0, #31
 8007af2:	f000 8082 	beq.w	8007bfa <_dtoa_r+0x912>
 8007af6:	f1c0 0320 	rsb	r3, r0, #32
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	dd73      	ble.n	8007be6 <_dtoa_r+0x8fe>
 8007afe:	9b00      	ldr	r3, [sp, #0]
 8007b00:	f1c0 001c 	rsb	r0, r0, #28
 8007b04:	4403      	add	r3, r0
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	9b06      	ldr	r3, [sp, #24]
 8007b0a:	4403      	add	r3, r0
 8007b0c:	4406      	add	r6, r0
 8007b0e:	9306      	str	r3, [sp, #24]
 8007b10:	9b00      	ldr	r3, [sp, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dd05      	ble.n	8007b22 <_dtoa_r+0x83a>
 8007b16:	9902      	ldr	r1, [sp, #8]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4648      	mov	r0, r9
 8007b1c:	f000 fcba 	bl	8008494 <__lshift>
 8007b20:	9002      	str	r0, [sp, #8]
 8007b22:	9b06      	ldr	r3, [sp, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dd05      	ble.n	8007b34 <_dtoa_r+0x84c>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	4648      	mov	r0, r9
 8007b2e:	f000 fcb1 	bl	8008494 <__lshift>
 8007b32:	4604      	mov	r4, r0
 8007b34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d061      	beq.n	8007bfe <_dtoa_r+0x916>
 8007b3a:	9802      	ldr	r0, [sp, #8]
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	f000 fd15 	bl	800856c <__mcmp>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	da5b      	bge.n	8007bfe <_dtoa_r+0x916>
 8007b46:	2300      	movs	r3, #0
 8007b48:	9902      	ldr	r1, [sp, #8]
 8007b4a:	220a      	movs	r2, #10
 8007b4c:	4648      	mov	r0, r9
 8007b4e:	f000 fafd 	bl	800814c <__multadd>
 8007b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b54:	9002      	str	r0, [sp, #8]
 8007b56:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8177 	beq.w	8007e4e <_dtoa_r+0xb66>
 8007b60:	4629      	mov	r1, r5
 8007b62:	2300      	movs	r3, #0
 8007b64:	220a      	movs	r2, #10
 8007b66:	4648      	mov	r0, r9
 8007b68:	f000 faf0 	bl	800814c <__multadd>
 8007b6c:	f1bb 0f00 	cmp.w	fp, #0
 8007b70:	4605      	mov	r5, r0
 8007b72:	dc6f      	bgt.n	8007c54 <_dtoa_r+0x96c>
 8007b74:	9b07      	ldr	r3, [sp, #28]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	dc49      	bgt.n	8007c0e <_dtoa_r+0x926>
 8007b7a:	e06b      	b.n	8007c54 <_dtoa_r+0x96c>
 8007b7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b82:	e73c      	b.n	80079fe <_dtoa_r+0x716>
 8007b84:	3fe00000 	.word	0x3fe00000
 8007b88:	40240000 	.word	0x40240000
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	1e5c      	subs	r4, r3, #1
 8007b90:	9b08      	ldr	r3, [sp, #32]
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	db09      	blt.n	8007baa <_dtoa_r+0x8c2>
 8007b96:	1b1c      	subs	r4, r3, r4
 8007b98:	9b03      	ldr	r3, [sp, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f6bf af30 	bge.w	8007a00 <_dtoa_r+0x718>
 8007ba0:	9b00      	ldr	r3, [sp, #0]
 8007ba2:	9a03      	ldr	r2, [sp, #12]
 8007ba4:	1a9e      	subs	r6, r3, r2
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e72b      	b.n	8007a02 <_dtoa_r+0x71a>
 8007baa:	9b08      	ldr	r3, [sp, #32]
 8007bac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bae:	9408      	str	r4, [sp, #32]
 8007bb0:	1ae3      	subs	r3, r4, r3
 8007bb2:	441a      	add	r2, r3
 8007bb4:	9e00      	ldr	r6, [sp, #0]
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	920d      	str	r2, [sp, #52]	@ 0x34
 8007bba:	2400      	movs	r4, #0
 8007bbc:	e721      	b.n	8007a02 <_dtoa_r+0x71a>
 8007bbe:	9c08      	ldr	r4, [sp, #32]
 8007bc0:	9e00      	ldr	r6, [sp, #0]
 8007bc2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007bc4:	e728      	b.n	8007a18 <_dtoa_r+0x730>
 8007bc6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007bca:	e751      	b.n	8007a70 <_dtoa_r+0x788>
 8007bcc:	9a08      	ldr	r2, [sp, #32]
 8007bce:	9902      	ldr	r1, [sp, #8]
 8007bd0:	e750      	b.n	8007a74 <_dtoa_r+0x78c>
 8007bd2:	f8cd 8008 	str.w	r8, [sp, #8]
 8007bd6:	e751      	b.n	8007a7c <_dtoa_r+0x794>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e779      	b.n	8007ad0 <_dtoa_r+0x7e8>
 8007bdc:	9b04      	ldr	r3, [sp, #16]
 8007bde:	e777      	b.n	8007ad0 <_dtoa_r+0x7e8>
 8007be0:	2300      	movs	r3, #0
 8007be2:	9308      	str	r3, [sp, #32]
 8007be4:	e779      	b.n	8007ada <_dtoa_r+0x7f2>
 8007be6:	d093      	beq.n	8007b10 <_dtoa_r+0x828>
 8007be8:	9a00      	ldr	r2, [sp, #0]
 8007bea:	331c      	adds	r3, #28
 8007bec:	441a      	add	r2, r3
 8007bee:	9200      	str	r2, [sp, #0]
 8007bf0:	9a06      	ldr	r2, [sp, #24]
 8007bf2:	441a      	add	r2, r3
 8007bf4:	441e      	add	r6, r3
 8007bf6:	9206      	str	r2, [sp, #24]
 8007bf8:	e78a      	b.n	8007b10 <_dtoa_r+0x828>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	e7f4      	b.n	8007be8 <_dtoa_r+0x900>
 8007bfe:	9b03      	ldr	r3, [sp, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	46b8      	mov	r8, r7
 8007c04:	dc20      	bgt.n	8007c48 <_dtoa_r+0x960>
 8007c06:	469b      	mov	fp, r3
 8007c08:	9b07      	ldr	r3, [sp, #28]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	dd1e      	ble.n	8007c4c <_dtoa_r+0x964>
 8007c0e:	f1bb 0f00 	cmp.w	fp, #0
 8007c12:	f47f adb1 	bne.w	8007778 <_dtoa_r+0x490>
 8007c16:	4621      	mov	r1, r4
 8007c18:	465b      	mov	r3, fp
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	4648      	mov	r0, r9
 8007c1e:	f000 fa95 	bl	800814c <__multadd>
 8007c22:	4601      	mov	r1, r0
 8007c24:	4604      	mov	r4, r0
 8007c26:	9802      	ldr	r0, [sp, #8]
 8007c28:	f000 fca0 	bl	800856c <__mcmp>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f77f ada3 	ble.w	8007778 <_dtoa_r+0x490>
 8007c32:	4656      	mov	r6, sl
 8007c34:	2331      	movs	r3, #49	@ 0x31
 8007c36:	f806 3b01 	strb.w	r3, [r6], #1
 8007c3a:	f108 0801 	add.w	r8, r8, #1
 8007c3e:	e59f      	b.n	8007780 <_dtoa_r+0x498>
 8007c40:	9c03      	ldr	r4, [sp, #12]
 8007c42:	46b8      	mov	r8, r7
 8007c44:	4625      	mov	r5, r4
 8007c46:	e7f4      	b.n	8007c32 <_dtoa_r+0x94a>
 8007c48:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 8101 	beq.w	8007e56 <_dtoa_r+0xb6e>
 8007c54:	2e00      	cmp	r6, #0
 8007c56:	dd05      	ble.n	8007c64 <_dtoa_r+0x97c>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	4648      	mov	r0, r9
 8007c5e:	f000 fc19 	bl	8008494 <__lshift>
 8007c62:	4605      	mov	r5, r0
 8007c64:	9b08      	ldr	r3, [sp, #32]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d05c      	beq.n	8007d24 <_dtoa_r+0xa3c>
 8007c6a:	6869      	ldr	r1, [r5, #4]
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f000 fa0b 	bl	8008088 <_Balloc>
 8007c72:	4606      	mov	r6, r0
 8007c74:	b928      	cbnz	r0, 8007c82 <_dtoa_r+0x99a>
 8007c76:	4b82      	ldr	r3, [pc, #520]	@ (8007e80 <_dtoa_r+0xb98>)
 8007c78:	4602      	mov	r2, r0
 8007c7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c7e:	f7ff bb4a 	b.w	8007316 <_dtoa_r+0x2e>
 8007c82:	692a      	ldr	r2, [r5, #16]
 8007c84:	3202      	adds	r2, #2
 8007c86:	0092      	lsls	r2, r2, #2
 8007c88:	f105 010c 	add.w	r1, r5, #12
 8007c8c:	300c      	adds	r0, #12
 8007c8e:	f000 fe31 	bl	80088f4 <memcpy>
 8007c92:	2201      	movs	r2, #1
 8007c94:	4631      	mov	r1, r6
 8007c96:	4648      	mov	r0, r9
 8007c98:	f000 fbfc 	bl	8008494 <__lshift>
 8007c9c:	f10a 0301 	add.w	r3, sl, #1
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	eb0a 030b 	add.w	r3, sl, fp
 8007ca6:	9308      	str	r3, [sp, #32]
 8007ca8:	9b04      	ldr	r3, [sp, #16]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	462f      	mov	r7, r5
 8007cb0:	9306      	str	r3, [sp, #24]
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	9b00      	ldr	r3, [sp, #0]
 8007cb6:	9802      	ldr	r0, [sp, #8]
 8007cb8:	4621      	mov	r1, r4
 8007cba:	f103 3bff 	add.w	fp, r3, #4294967295
 8007cbe:	f7ff fa8a 	bl	80071d6 <quorem>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	3330      	adds	r3, #48	@ 0x30
 8007cc6:	9003      	str	r0, [sp, #12]
 8007cc8:	4639      	mov	r1, r7
 8007cca:	9802      	ldr	r0, [sp, #8]
 8007ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cce:	f000 fc4d 	bl	800856c <__mcmp>
 8007cd2:	462a      	mov	r2, r5
 8007cd4:	9004      	str	r0, [sp, #16]
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4648      	mov	r0, r9
 8007cda:	f000 fc63 	bl	80085a4 <__mdiff>
 8007cde:	68c2      	ldr	r2, [r0, #12]
 8007ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	bb02      	cbnz	r2, 8007d28 <_dtoa_r+0xa40>
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	9802      	ldr	r0, [sp, #8]
 8007cea:	f000 fc3f 	bl	800856c <__mcmp>
 8007cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4648      	mov	r0, r9
 8007cf6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cfa:	f000 fa05 	bl	8008108 <_Bfree>
 8007cfe:	9b07      	ldr	r3, [sp, #28]
 8007d00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d02:	9e00      	ldr	r6, [sp, #0]
 8007d04:	ea42 0103 	orr.w	r1, r2, r3
 8007d08:	9b06      	ldr	r3, [sp, #24]
 8007d0a:	4319      	orrs	r1, r3
 8007d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d0e:	d10d      	bne.n	8007d2c <_dtoa_r+0xa44>
 8007d10:	2b39      	cmp	r3, #57	@ 0x39
 8007d12:	d027      	beq.n	8007d64 <_dtoa_r+0xa7c>
 8007d14:	9a04      	ldr	r2, [sp, #16]
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	dd01      	ble.n	8007d1e <_dtoa_r+0xa36>
 8007d1a:	9b03      	ldr	r3, [sp, #12]
 8007d1c:	3331      	adds	r3, #49	@ 0x31
 8007d1e:	f88b 3000 	strb.w	r3, [fp]
 8007d22:	e52e      	b.n	8007782 <_dtoa_r+0x49a>
 8007d24:	4628      	mov	r0, r5
 8007d26:	e7b9      	b.n	8007c9c <_dtoa_r+0x9b4>
 8007d28:	2201      	movs	r2, #1
 8007d2a:	e7e2      	b.n	8007cf2 <_dtoa_r+0xa0a>
 8007d2c:	9904      	ldr	r1, [sp, #16]
 8007d2e:	2900      	cmp	r1, #0
 8007d30:	db04      	blt.n	8007d3c <_dtoa_r+0xa54>
 8007d32:	9807      	ldr	r0, [sp, #28]
 8007d34:	4301      	orrs	r1, r0
 8007d36:	9806      	ldr	r0, [sp, #24]
 8007d38:	4301      	orrs	r1, r0
 8007d3a:	d120      	bne.n	8007d7e <_dtoa_r+0xa96>
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	ddee      	ble.n	8007d1e <_dtoa_r+0xa36>
 8007d40:	9902      	ldr	r1, [sp, #8]
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	2201      	movs	r2, #1
 8007d46:	4648      	mov	r0, r9
 8007d48:	f000 fba4 	bl	8008494 <__lshift>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	9002      	str	r0, [sp, #8]
 8007d50:	f000 fc0c 	bl	800856c <__mcmp>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	9b00      	ldr	r3, [sp, #0]
 8007d58:	dc02      	bgt.n	8007d60 <_dtoa_r+0xa78>
 8007d5a:	d1e0      	bne.n	8007d1e <_dtoa_r+0xa36>
 8007d5c:	07da      	lsls	r2, r3, #31
 8007d5e:	d5de      	bpl.n	8007d1e <_dtoa_r+0xa36>
 8007d60:	2b39      	cmp	r3, #57	@ 0x39
 8007d62:	d1da      	bne.n	8007d1a <_dtoa_r+0xa32>
 8007d64:	2339      	movs	r3, #57	@ 0x39
 8007d66:	f88b 3000 	strb.w	r3, [fp]
 8007d6a:	4633      	mov	r3, r6
 8007d6c:	461e      	mov	r6, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d74:	2a39      	cmp	r2, #57	@ 0x39
 8007d76:	d04e      	beq.n	8007e16 <_dtoa_r+0xb2e>
 8007d78:	3201      	adds	r2, #1
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	e501      	b.n	8007782 <_dtoa_r+0x49a>
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	dd03      	ble.n	8007d8a <_dtoa_r+0xaa2>
 8007d82:	2b39      	cmp	r3, #57	@ 0x39
 8007d84:	d0ee      	beq.n	8007d64 <_dtoa_r+0xa7c>
 8007d86:	3301      	adds	r3, #1
 8007d88:	e7c9      	b.n	8007d1e <_dtoa_r+0xa36>
 8007d8a:	9a00      	ldr	r2, [sp, #0]
 8007d8c:	9908      	ldr	r1, [sp, #32]
 8007d8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d92:	428a      	cmp	r2, r1
 8007d94:	d028      	beq.n	8007de8 <_dtoa_r+0xb00>
 8007d96:	9902      	ldr	r1, [sp, #8]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	220a      	movs	r2, #10
 8007d9c:	4648      	mov	r0, r9
 8007d9e:	f000 f9d5 	bl	800814c <__multadd>
 8007da2:	42af      	cmp	r7, r5
 8007da4:	9002      	str	r0, [sp, #8]
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	f04f 020a 	mov.w	r2, #10
 8007dae:	4639      	mov	r1, r7
 8007db0:	4648      	mov	r0, r9
 8007db2:	d107      	bne.n	8007dc4 <_dtoa_r+0xadc>
 8007db4:	f000 f9ca 	bl	800814c <__multadd>
 8007db8:	4607      	mov	r7, r0
 8007dba:	4605      	mov	r5, r0
 8007dbc:	9b00      	ldr	r3, [sp, #0]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	e777      	b.n	8007cb4 <_dtoa_r+0x9cc>
 8007dc4:	f000 f9c2 	bl	800814c <__multadd>
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4607      	mov	r7, r0
 8007dcc:	2300      	movs	r3, #0
 8007dce:	220a      	movs	r2, #10
 8007dd0:	4648      	mov	r0, r9
 8007dd2:	f000 f9bb 	bl	800814c <__multadd>
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	e7f0      	b.n	8007dbc <_dtoa_r+0xad4>
 8007dda:	f1bb 0f00 	cmp.w	fp, #0
 8007dde:	bfcc      	ite	gt
 8007de0:	465e      	movgt	r6, fp
 8007de2:	2601      	movle	r6, #1
 8007de4:	4456      	add	r6, sl
 8007de6:	2700      	movs	r7, #0
 8007de8:	9902      	ldr	r1, [sp, #8]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	2201      	movs	r2, #1
 8007dee:	4648      	mov	r0, r9
 8007df0:	f000 fb50 	bl	8008494 <__lshift>
 8007df4:	4621      	mov	r1, r4
 8007df6:	9002      	str	r0, [sp, #8]
 8007df8:	f000 fbb8 	bl	800856c <__mcmp>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	dcb4      	bgt.n	8007d6a <_dtoa_r+0xa82>
 8007e00:	d102      	bne.n	8007e08 <_dtoa_r+0xb20>
 8007e02:	9b00      	ldr	r3, [sp, #0]
 8007e04:	07db      	lsls	r3, r3, #31
 8007e06:	d4b0      	bmi.n	8007d6a <_dtoa_r+0xa82>
 8007e08:	4633      	mov	r3, r6
 8007e0a:	461e      	mov	r6, r3
 8007e0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e10:	2a30      	cmp	r2, #48	@ 0x30
 8007e12:	d0fa      	beq.n	8007e0a <_dtoa_r+0xb22>
 8007e14:	e4b5      	b.n	8007782 <_dtoa_r+0x49a>
 8007e16:	459a      	cmp	sl, r3
 8007e18:	d1a8      	bne.n	8007d6c <_dtoa_r+0xa84>
 8007e1a:	2331      	movs	r3, #49	@ 0x31
 8007e1c:	f108 0801 	add.w	r8, r8, #1
 8007e20:	f88a 3000 	strb.w	r3, [sl]
 8007e24:	e4ad      	b.n	8007782 <_dtoa_r+0x49a>
 8007e26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007e84 <_dtoa_r+0xb9c>
 8007e2c:	b11b      	cbz	r3, 8007e36 <_dtoa_r+0xb4e>
 8007e2e:	f10a 0308 	add.w	r3, sl, #8
 8007e32:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	4650      	mov	r0, sl
 8007e38:	b017      	add	sp, #92	@ 0x5c
 8007e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3e:	9b07      	ldr	r3, [sp, #28]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	f77f ae2e 	ble.w	8007aa2 <_dtoa_r+0x7ba>
 8007e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e48:	9308      	str	r3, [sp, #32]
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	e64d      	b.n	8007aea <_dtoa_r+0x802>
 8007e4e:	f1bb 0f00 	cmp.w	fp, #0
 8007e52:	f77f aed9 	ble.w	8007c08 <_dtoa_r+0x920>
 8007e56:	4656      	mov	r6, sl
 8007e58:	9802      	ldr	r0, [sp, #8]
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	f7ff f9bb 	bl	80071d6 <quorem>
 8007e60:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007e64:	f806 3b01 	strb.w	r3, [r6], #1
 8007e68:	eba6 020a 	sub.w	r2, r6, sl
 8007e6c:	4593      	cmp	fp, r2
 8007e6e:	ddb4      	ble.n	8007dda <_dtoa_r+0xaf2>
 8007e70:	9902      	ldr	r1, [sp, #8]
 8007e72:	2300      	movs	r3, #0
 8007e74:	220a      	movs	r2, #10
 8007e76:	4648      	mov	r0, r9
 8007e78:	f000 f968 	bl	800814c <__multadd>
 8007e7c:	9002      	str	r0, [sp, #8]
 8007e7e:	e7eb      	b.n	8007e58 <_dtoa_r+0xb70>
 8007e80:	08009084 	.word	0x08009084
 8007e84:	08009008 	.word	0x08009008

08007e88 <_free_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	2900      	cmp	r1, #0
 8007e8e:	d041      	beq.n	8007f14 <_free_r+0x8c>
 8007e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e94:	1f0c      	subs	r4, r1, #4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	bfb8      	it	lt
 8007e9a:	18e4      	addlt	r4, r4, r3
 8007e9c:	f000 f8e8 	bl	8008070 <__malloc_lock>
 8007ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f18 <_free_r+0x90>)
 8007ea2:	6813      	ldr	r3, [r2, #0]
 8007ea4:	b933      	cbnz	r3, 8007eb4 <_free_r+0x2c>
 8007ea6:	6063      	str	r3, [r4, #4]
 8007ea8:	6014      	str	r4, [r2, #0]
 8007eaa:	4628      	mov	r0, r5
 8007eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eb0:	f000 b8e4 	b.w	800807c <__malloc_unlock>
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d908      	bls.n	8007eca <_free_r+0x42>
 8007eb8:	6820      	ldr	r0, [r4, #0]
 8007eba:	1821      	adds	r1, r4, r0
 8007ebc:	428b      	cmp	r3, r1
 8007ebe:	bf01      	itttt	eq
 8007ec0:	6819      	ldreq	r1, [r3, #0]
 8007ec2:	685b      	ldreq	r3, [r3, #4]
 8007ec4:	1809      	addeq	r1, r1, r0
 8007ec6:	6021      	streq	r1, [r4, #0]
 8007ec8:	e7ed      	b.n	8007ea6 <_free_r+0x1e>
 8007eca:	461a      	mov	r2, r3
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	b10b      	cbz	r3, 8007ed4 <_free_r+0x4c>
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	d9fa      	bls.n	8007eca <_free_r+0x42>
 8007ed4:	6811      	ldr	r1, [r2, #0]
 8007ed6:	1850      	adds	r0, r2, r1
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d10b      	bne.n	8007ef4 <_free_r+0x6c>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	4401      	add	r1, r0
 8007ee0:	1850      	adds	r0, r2, r1
 8007ee2:	4283      	cmp	r3, r0
 8007ee4:	6011      	str	r1, [r2, #0]
 8007ee6:	d1e0      	bne.n	8007eaa <_free_r+0x22>
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	6053      	str	r3, [r2, #4]
 8007eee:	4408      	add	r0, r1
 8007ef0:	6010      	str	r0, [r2, #0]
 8007ef2:	e7da      	b.n	8007eaa <_free_r+0x22>
 8007ef4:	d902      	bls.n	8007efc <_free_r+0x74>
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	e7d6      	b.n	8007eaa <_free_r+0x22>
 8007efc:	6820      	ldr	r0, [r4, #0]
 8007efe:	1821      	adds	r1, r4, r0
 8007f00:	428b      	cmp	r3, r1
 8007f02:	bf04      	itt	eq
 8007f04:	6819      	ldreq	r1, [r3, #0]
 8007f06:	685b      	ldreq	r3, [r3, #4]
 8007f08:	6063      	str	r3, [r4, #4]
 8007f0a:	bf04      	itt	eq
 8007f0c:	1809      	addeq	r1, r1, r0
 8007f0e:	6021      	streq	r1, [r4, #0]
 8007f10:	6054      	str	r4, [r2, #4]
 8007f12:	e7ca      	b.n	8007eaa <_free_r+0x22>
 8007f14:	bd38      	pop	{r3, r4, r5, pc}
 8007f16:	bf00      	nop
 8007f18:	20000490 	.word	0x20000490

08007f1c <malloc>:
 8007f1c:	4b02      	ldr	r3, [pc, #8]	@ (8007f28 <malloc+0xc>)
 8007f1e:	4601      	mov	r1, r0
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	f000 b825 	b.w	8007f70 <_malloc_r>
 8007f26:	bf00      	nop
 8007f28:	20000018 	.word	0x20000018

08007f2c <sbrk_aligned>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007f6c <sbrk_aligned+0x40>)
 8007f30:	460c      	mov	r4, r1
 8007f32:	6831      	ldr	r1, [r6, #0]
 8007f34:	4605      	mov	r5, r0
 8007f36:	b911      	cbnz	r1, 8007f3e <sbrk_aligned+0x12>
 8007f38:	f000 fccc 	bl	80088d4 <_sbrk_r>
 8007f3c:	6030      	str	r0, [r6, #0]
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	f000 fcc7 	bl	80088d4 <_sbrk_r>
 8007f46:	1c43      	adds	r3, r0, #1
 8007f48:	d103      	bne.n	8007f52 <sbrk_aligned+0x26>
 8007f4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f4e:	4620      	mov	r0, r4
 8007f50:	bd70      	pop	{r4, r5, r6, pc}
 8007f52:	1cc4      	adds	r4, r0, #3
 8007f54:	f024 0403 	bic.w	r4, r4, #3
 8007f58:	42a0      	cmp	r0, r4
 8007f5a:	d0f8      	beq.n	8007f4e <sbrk_aligned+0x22>
 8007f5c:	1a21      	subs	r1, r4, r0
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f000 fcb8 	bl	80088d4 <_sbrk_r>
 8007f64:	3001      	adds	r0, #1
 8007f66:	d1f2      	bne.n	8007f4e <sbrk_aligned+0x22>
 8007f68:	e7ef      	b.n	8007f4a <sbrk_aligned+0x1e>
 8007f6a:	bf00      	nop
 8007f6c:	2000048c 	.word	0x2000048c

08007f70 <_malloc_r>:
 8007f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f74:	1ccd      	adds	r5, r1, #3
 8007f76:	f025 0503 	bic.w	r5, r5, #3
 8007f7a:	3508      	adds	r5, #8
 8007f7c:	2d0c      	cmp	r5, #12
 8007f7e:	bf38      	it	cc
 8007f80:	250c      	movcc	r5, #12
 8007f82:	2d00      	cmp	r5, #0
 8007f84:	4606      	mov	r6, r0
 8007f86:	db01      	blt.n	8007f8c <_malloc_r+0x1c>
 8007f88:	42a9      	cmp	r1, r5
 8007f8a:	d904      	bls.n	8007f96 <_malloc_r+0x26>
 8007f8c:	230c      	movs	r3, #12
 8007f8e:	6033      	str	r3, [r6, #0]
 8007f90:	2000      	movs	r0, #0
 8007f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800806c <_malloc_r+0xfc>
 8007f9a:	f000 f869 	bl	8008070 <__malloc_lock>
 8007f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa2:	461c      	mov	r4, r3
 8007fa4:	bb44      	cbnz	r4, 8007ff8 <_malloc_r+0x88>
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff ffbf 	bl	8007f2c <sbrk_aligned>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	d158      	bne.n	8008066 <_malloc_r+0xf6>
 8007fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8007fb8:	4627      	mov	r7, r4
 8007fba:	2f00      	cmp	r7, #0
 8007fbc:	d143      	bne.n	8008046 <_malloc_r+0xd6>
 8007fbe:	2c00      	cmp	r4, #0
 8007fc0:	d04b      	beq.n	800805a <_malloc_r+0xea>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	eb04 0903 	add.w	r9, r4, r3
 8007fcc:	f000 fc82 	bl	80088d4 <_sbrk_r>
 8007fd0:	4581      	cmp	r9, r0
 8007fd2:	d142      	bne.n	800805a <_malloc_r+0xea>
 8007fd4:	6821      	ldr	r1, [r4, #0]
 8007fd6:	1a6d      	subs	r5, r5, r1
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff ffa6 	bl	8007f2c <sbrk_aligned>
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	d03a      	beq.n	800805a <_malloc_r+0xea>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	442b      	add	r3, r5
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	f8d8 3000 	ldr.w	r3, [r8]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	bb62      	cbnz	r2, 800804c <_malloc_r+0xdc>
 8007ff2:	f8c8 7000 	str.w	r7, [r8]
 8007ff6:	e00f      	b.n	8008018 <_malloc_r+0xa8>
 8007ff8:	6822      	ldr	r2, [r4, #0]
 8007ffa:	1b52      	subs	r2, r2, r5
 8007ffc:	d420      	bmi.n	8008040 <_malloc_r+0xd0>
 8007ffe:	2a0b      	cmp	r2, #11
 8008000:	d917      	bls.n	8008032 <_malloc_r+0xc2>
 8008002:	1961      	adds	r1, r4, r5
 8008004:	42a3      	cmp	r3, r4
 8008006:	6025      	str	r5, [r4, #0]
 8008008:	bf18      	it	ne
 800800a:	6059      	strne	r1, [r3, #4]
 800800c:	6863      	ldr	r3, [r4, #4]
 800800e:	bf08      	it	eq
 8008010:	f8c8 1000 	streq.w	r1, [r8]
 8008014:	5162      	str	r2, [r4, r5]
 8008016:	604b      	str	r3, [r1, #4]
 8008018:	4630      	mov	r0, r6
 800801a:	f000 f82f 	bl	800807c <__malloc_unlock>
 800801e:	f104 000b 	add.w	r0, r4, #11
 8008022:	1d23      	adds	r3, r4, #4
 8008024:	f020 0007 	bic.w	r0, r0, #7
 8008028:	1ac2      	subs	r2, r0, r3
 800802a:	bf1c      	itt	ne
 800802c:	1a1b      	subne	r3, r3, r0
 800802e:	50a3      	strne	r3, [r4, r2]
 8008030:	e7af      	b.n	8007f92 <_malloc_r+0x22>
 8008032:	6862      	ldr	r2, [r4, #4]
 8008034:	42a3      	cmp	r3, r4
 8008036:	bf0c      	ite	eq
 8008038:	f8c8 2000 	streq.w	r2, [r8]
 800803c:	605a      	strne	r2, [r3, #4]
 800803e:	e7eb      	b.n	8008018 <_malloc_r+0xa8>
 8008040:	4623      	mov	r3, r4
 8008042:	6864      	ldr	r4, [r4, #4]
 8008044:	e7ae      	b.n	8007fa4 <_malloc_r+0x34>
 8008046:	463c      	mov	r4, r7
 8008048:	687f      	ldr	r7, [r7, #4]
 800804a:	e7b6      	b.n	8007fba <_malloc_r+0x4a>
 800804c:	461a      	mov	r2, r3
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	42a3      	cmp	r3, r4
 8008052:	d1fb      	bne.n	800804c <_malloc_r+0xdc>
 8008054:	2300      	movs	r3, #0
 8008056:	6053      	str	r3, [r2, #4]
 8008058:	e7de      	b.n	8008018 <_malloc_r+0xa8>
 800805a:	230c      	movs	r3, #12
 800805c:	6033      	str	r3, [r6, #0]
 800805e:	4630      	mov	r0, r6
 8008060:	f000 f80c 	bl	800807c <__malloc_unlock>
 8008064:	e794      	b.n	8007f90 <_malloc_r+0x20>
 8008066:	6005      	str	r5, [r0, #0]
 8008068:	e7d6      	b.n	8008018 <_malloc_r+0xa8>
 800806a:	bf00      	nop
 800806c:	20000490 	.word	0x20000490

08008070 <__malloc_lock>:
 8008070:	4801      	ldr	r0, [pc, #4]	@ (8008078 <__malloc_lock+0x8>)
 8008072:	f7ff b8ae 	b.w	80071d2 <__retarget_lock_acquire_recursive>
 8008076:	bf00      	nop
 8008078:	20000488 	.word	0x20000488

0800807c <__malloc_unlock>:
 800807c:	4801      	ldr	r0, [pc, #4]	@ (8008084 <__malloc_unlock+0x8>)
 800807e:	f7ff b8a9 	b.w	80071d4 <__retarget_lock_release_recursive>
 8008082:	bf00      	nop
 8008084:	20000488 	.word	0x20000488

08008088 <_Balloc>:
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	69c6      	ldr	r6, [r0, #28]
 800808c:	4604      	mov	r4, r0
 800808e:	460d      	mov	r5, r1
 8008090:	b976      	cbnz	r6, 80080b0 <_Balloc+0x28>
 8008092:	2010      	movs	r0, #16
 8008094:	f7ff ff42 	bl	8007f1c <malloc>
 8008098:	4602      	mov	r2, r0
 800809a:	61e0      	str	r0, [r4, #28]
 800809c:	b920      	cbnz	r0, 80080a8 <_Balloc+0x20>
 800809e:	4b18      	ldr	r3, [pc, #96]	@ (8008100 <_Balloc+0x78>)
 80080a0:	4818      	ldr	r0, [pc, #96]	@ (8008104 <_Balloc+0x7c>)
 80080a2:	216b      	movs	r1, #107	@ 0x6b
 80080a4:	f000 fc34 	bl	8008910 <__assert_func>
 80080a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080ac:	6006      	str	r6, [r0, #0]
 80080ae:	60c6      	str	r6, [r0, #12]
 80080b0:	69e6      	ldr	r6, [r4, #28]
 80080b2:	68f3      	ldr	r3, [r6, #12]
 80080b4:	b183      	cbz	r3, 80080d8 <_Balloc+0x50>
 80080b6:	69e3      	ldr	r3, [r4, #28]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080be:	b9b8      	cbnz	r0, 80080f0 <_Balloc+0x68>
 80080c0:	2101      	movs	r1, #1
 80080c2:	fa01 f605 	lsl.w	r6, r1, r5
 80080c6:	1d72      	adds	r2, r6, #5
 80080c8:	0092      	lsls	r2, r2, #2
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 fc3e 	bl	800894c <_calloc_r>
 80080d0:	b160      	cbz	r0, 80080ec <_Balloc+0x64>
 80080d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080d6:	e00e      	b.n	80080f6 <_Balloc+0x6e>
 80080d8:	2221      	movs	r2, #33	@ 0x21
 80080da:	2104      	movs	r1, #4
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 fc35 	bl	800894c <_calloc_r>
 80080e2:	69e3      	ldr	r3, [r4, #28]
 80080e4:	60f0      	str	r0, [r6, #12]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e4      	bne.n	80080b6 <_Balloc+0x2e>
 80080ec:	2000      	movs	r0, #0
 80080ee:	bd70      	pop	{r4, r5, r6, pc}
 80080f0:	6802      	ldr	r2, [r0, #0]
 80080f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080f6:	2300      	movs	r3, #0
 80080f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080fc:	e7f7      	b.n	80080ee <_Balloc+0x66>
 80080fe:	bf00      	nop
 8008100:	08009015 	.word	0x08009015
 8008104:	08009095 	.word	0x08009095

08008108 <_Bfree>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	69c6      	ldr	r6, [r0, #28]
 800810c:	4605      	mov	r5, r0
 800810e:	460c      	mov	r4, r1
 8008110:	b976      	cbnz	r6, 8008130 <_Bfree+0x28>
 8008112:	2010      	movs	r0, #16
 8008114:	f7ff ff02 	bl	8007f1c <malloc>
 8008118:	4602      	mov	r2, r0
 800811a:	61e8      	str	r0, [r5, #28]
 800811c:	b920      	cbnz	r0, 8008128 <_Bfree+0x20>
 800811e:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <_Bfree+0x3c>)
 8008120:	4809      	ldr	r0, [pc, #36]	@ (8008148 <_Bfree+0x40>)
 8008122:	218f      	movs	r1, #143	@ 0x8f
 8008124:	f000 fbf4 	bl	8008910 <__assert_func>
 8008128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800812c:	6006      	str	r6, [r0, #0]
 800812e:	60c6      	str	r6, [r0, #12]
 8008130:	b13c      	cbz	r4, 8008142 <_Bfree+0x3a>
 8008132:	69eb      	ldr	r3, [r5, #28]
 8008134:	6862      	ldr	r2, [r4, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800813c:	6021      	str	r1, [r4, #0]
 800813e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	08009015 	.word	0x08009015
 8008148:	08009095 	.word	0x08009095

0800814c <__multadd>:
 800814c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	690d      	ldr	r5, [r1, #16]
 8008152:	4607      	mov	r7, r0
 8008154:	460c      	mov	r4, r1
 8008156:	461e      	mov	r6, r3
 8008158:	f101 0c14 	add.w	ip, r1, #20
 800815c:	2000      	movs	r0, #0
 800815e:	f8dc 3000 	ldr.w	r3, [ip]
 8008162:	b299      	uxth	r1, r3
 8008164:	fb02 6101 	mla	r1, r2, r1, r6
 8008168:	0c1e      	lsrs	r6, r3, #16
 800816a:	0c0b      	lsrs	r3, r1, #16
 800816c:	fb02 3306 	mla	r3, r2, r6, r3
 8008170:	b289      	uxth	r1, r1
 8008172:	3001      	adds	r0, #1
 8008174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008178:	4285      	cmp	r5, r0
 800817a:	f84c 1b04 	str.w	r1, [ip], #4
 800817e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008182:	dcec      	bgt.n	800815e <__multadd+0x12>
 8008184:	b30e      	cbz	r6, 80081ca <__multadd+0x7e>
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	42ab      	cmp	r3, r5
 800818a:	dc19      	bgt.n	80081c0 <__multadd+0x74>
 800818c:	6861      	ldr	r1, [r4, #4]
 800818e:	4638      	mov	r0, r7
 8008190:	3101      	adds	r1, #1
 8008192:	f7ff ff79 	bl	8008088 <_Balloc>
 8008196:	4680      	mov	r8, r0
 8008198:	b928      	cbnz	r0, 80081a6 <__multadd+0x5a>
 800819a:	4602      	mov	r2, r0
 800819c:	4b0c      	ldr	r3, [pc, #48]	@ (80081d0 <__multadd+0x84>)
 800819e:	480d      	ldr	r0, [pc, #52]	@ (80081d4 <__multadd+0x88>)
 80081a0:	21ba      	movs	r1, #186	@ 0xba
 80081a2:	f000 fbb5 	bl	8008910 <__assert_func>
 80081a6:	6922      	ldr	r2, [r4, #16]
 80081a8:	3202      	adds	r2, #2
 80081aa:	f104 010c 	add.w	r1, r4, #12
 80081ae:	0092      	lsls	r2, r2, #2
 80081b0:	300c      	adds	r0, #12
 80081b2:	f000 fb9f 	bl	80088f4 <memcpy>
 80081b6:	4621      	mov	r1, r4
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff ffa5 	bl	8008108 <_Bfree>
 80081be:	4644      	mov	r4, r8
 80081c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081c4:	3501      	adds	r5, #1
 80081c6:	615e      	str	r6, [r3, #20]
 80081c8:	6125      	str	r5, [r4, #16]
 80081ca:	4620      	mov	r0, r4
 80081cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d0:	08009084 	.word	0x08009084
 80081d4:	08009095 	.word	0x08009095

080081d8 <__hi0bits>:
 80081d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081dc:	4603      	mov	r3, r0
 80081de:	bf36      	itet	cc
 80081e0:	0403      	lslcc	r3, r0, #16
 80081e2:	2000      	movcs	r0, #0
 80081e4:	2010      	movcc	r0, #16
 80081e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081ea:	bf3c      	itt	cc
 80081ec:	021b      	lslcc	r3, r3, #8
 80081ee:	3008      	addcc	r0, #8
 80081f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081f4:	bf3c      	itt	cc
 80081f6:	011b      	lslcc	r3, r3, #4
 80081f8:	3004      	addcc	r0, #4
 80081fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081fe:	bf3c      	itt	cc
 8008200:	009b      	lslcc	r3, r3, #2
 8008202:	3002      	addcc	r0, #2
 8008204:	2b00      	cmp	r3, #0
 8008206:	db05      	blt.n	8008214 <__hi0bits+0x3c>
 8008208:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800820c:	f100 0001 	add.w	r0, r0, #1
 8008210:	bf08      	it	eq
 8008212:	2020      	moveq	r0, #32
 8008214:	4770      	bx	lr

08008216 <__lo0bits>:
 8008216:	6803      	ldr	r3, [r0, #0]
 8008218:	4602      	mov	r2, r0
 800821a:	f013 0007 	ands.w	r0, r3, #7
 800821e:	d00b      	beq.n	8008238 <__lo0bits+0x22>
 8008220:	07d9      	lsls	r1, r3, #31
 8008222:	d421      	bmi.n	8008268 <__lo0bits+0x52>
 8008224:	0798      	lsls	r0, r3, #30
 8008226:	bf49      	itett	mi
 8008228:	085b      	lsrmi	r3, r3, #1
 800822a:	089b      	lsrpl	r3, r3, #2
 800822c:	2001      	movmi	r0, #1
 800822e:	6013      	strmi	r3, [r2, #0]
 8008230:	bf5c      	itt	pl
 8008232:	6013      	strpl	r3, [r2, #0]
 8008234:	2002      	movpl	r0, #2
 8008236:	4770      	bx	lr
 8008238:	b299      	uxth	r1, r3
 800823a:	b909      	cbnz	r1, 8008240 <__lo0bits+0x2a>
 800823c:	0c1b      	lsrs	r3, r3, #16
 800823e:	2010      	movs	r0, #16
 8008240:	b2d9      	uxtb	r1, r3
 8008242:	b909      	cbnz	r1, 8008248 <__lo0bits+0x32>
 8008244:	3008      	adds	r0, #8
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	0719      	lsls	r1, r3, #28
 800824a:	bf04      	itt	eq
 800824c:	091b      	lsreq	r3, r3, #4
 800824e:	3004      	addeq	r0, #4
 8008250:	0799      	lsls	r1, r3, #30
 8008252:	bf04      	itt	eq
 8008254:	089b      	lsreq	r3, r3, #2
 8008256:	3002      	addeq	r0, #2
 8008258:	07d9      	lsls	r1, r3, #31
 800825a:	d403      	bmi.n	8008264 <__lo0bits+0x4e>
 800825c:	085b      	lsrs	r3, r3, #1
 800825e:	f100 0001 	add.w	r0, r0, #1
 8008262:	d003      	beq.n	800826c <__lo0bits+0x56>
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	4770      	bx	lr
 8008268:	2000      	movs	r0, #0
 800826a:	4770      	bx	lr
 800826c:	2020      	movs	r0, #32
 800826e:	4770      	bx	lr

08008270 <__i2b>:
 8008270:	b510      	push	{r4, lr}
 8008272:	460c      	mov	r4, r1
 8008274:	2101      	movs	r1, #1
 8008276:	f7ff ff07 	bl	8008088 <_Balloc>
 800827a:	4602      	mov	r2, r0
 800827c:	b928      	cbnz	r0, 800828a <__i2b+0x1a>
 800827e:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <__i2b+0x24>)
 8008280:	4805      	ldr	r0, [pc, #20]	@ (8008298 <__i2b+0x28>)
 8008282:	f240 1145 	movw	r1, #325	@ 0x145
 8008286:	f000 fb43 	bl	8008910 <__assert_func>
 800828a:	2301      	movs	r3, #1
 800828c:	6144      	str	r4, [r0, #20]
 800828e:	6103      	str	r3, [r0, #16]
 8008290:	bd10      	pop	{r4, pc}
 8008292:	bf00      	nop
 8008294:	08009084 	.word	0x08009084
 8008298:	08009095 	.word	0x08009095

0800829c <__multiply>:
 800829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a0:	4617      	mov	r7, r2
 80082a2:	690a      	ldr	r2, [r1, #16]
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	bfa8      	it	ge
 80082aa:	463b      	movge	r3, r7
 80082ac:	4689      	mov	r9, r1
 80082ae:	bfa4      	itt	ge
 80082b0:	460f      	movge	r7, r1
 80082b2:	4699      	movge	r9, r3
 80082b4:	693d      	ldr	r5, [r7, #16]
 80082b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	eb05 060a 	add.w	r6, r5, sl
 80082c2:	42b3      	cmp	r3, r6
 80082c4:	b085      	sub	sp, #20
 80082c6:	bfb8      	it	lt
 80082c8:	3101      	addlt	r1, #1
 80082ca:	f7ff fedd 	bl	8008088 <_Balloc>
 80082ce:	b930      	cbnz	r0, 80082de <__multiply+0x42>
 80082d0:	4602      	mov	r2, r0
 80082d2:	4b41      	ldr	r3, [pc, #260]	@ (80083d8 <__multiply+0x13c>)
 80082d4:	4841      	ldr	r0, [pc, #260]	@ (80083dc <__multiply+0x140>)
 80082d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082da:	f000 fb19 	bl	8008910 <__assert_func>
 80082de:	f100 0414 	add.w	r4, r0, #20
 80082e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80082e6:	4623      	mov	r3, r4
 80082e8:	2200      	movs	r2, #0
 80082ea:	4573      	cmp	r3, lr
 80082ec:	d320      	bcc.n	8008330 <__multiply+0x94>
 80082ee:	f107 0814 	add.w	r8, r7, #20
 80082f2:	f109 0114 	add.w	r1, r9, #20
 80082f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80082fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80082fe:	9302      	str	r3, [sp, #8]
 8008300:	1beb      	subs	r3, r5, r7
 8008302:	3b15      	subs	r3, #21
 8008304:	f023 0303 	bic.w	r3, r3, #3
 8008308:	3304      	adds	r3, #4
 800830a:	3715      	adds	r7, #21
 800830c:	42bd      	cmp	r5, r7
 800830e:	bf38      	it	cc
 8008310:	2304      	movcc	r3, #4
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	9b02      	ldr	r3, [sp, #8]
 8008316:	9103      	str	r1, [sp, #12]
 8008318:	428b      	cmp	r3, r1
 800831a:	d80c      	bhi.n	8008336 <__multiply+0x9a>
 800831c:	2e00      	cmp	r6, #0
 800831e:	dd03      	ble.n	8008328 <__multiply+0x8c>
 8008320:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008324:	2b00      	cmp	r3, #0
 8008326:	d055      	beq.n	80083d4 <__multiply+0x138>
 8008328:	6106      	str	r6, [r0, #16]
 800832a:	b005      	add	sp, #20
 800832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008330:	f843 2b04 	str.w	r2, [r3], #4
 8008334:	e7d9      	b.n	80082ea <__multiply+0x4e>
 8008336:	f8b1 a000 	ldrh.w	sl, [r1]
 800833a:	f1ba 0f00 	cmp.w	sl, #0
 800833e:	d01f      	beq.n	8008380 <__multiply+0xe4>
 8008340:	46c4      	mov	ip, r8
 8008342:	46a1      	mov	r9, r4
 8008344:	2700      	movs	r7, #0
 8008346:	f85c 2b04 	ldr.w	r2, [ip], #4
 800834a:	f8d9 3000 	ldr.w	r3, [r9]
 800834e:	fa1f fb82 	uxth.w	fp, r2
 8008352:	b29b      	uxth	r3, r3
 8008354:	fb0a 330b 	mla	r3, sl, fp, r3
 8008358:	443b      	add	r3, r7
 800835a:	f8d9 7000 	ldr.w	r7, [r9]
 800835e:	0c12      	lsrs	r2, r2, #16
 8008360:	0c3f      	lsrs	r7, r7, #16
 8008362:	fb0a 7202 	mla	r2, sl, r2, r7
 8008366:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800836a:	b29b      	uxth	r3, r3
 800836c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008370:	4565      	cmp	r5, ip
 8008372:	f849 3b04 	str.w	r3, [r9], #4
 8008376:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800837a:	d8e4      	bhi.n	8008346 <__multiply+0xaa>
 800837c:	9b01      	ldr	r3, [sp, #4]
 800837e:	50e7      	str	r7, [r4, r3]
 8008380:	9b03      	ldr	r3, [sp, #12]
 8008382:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008386:	3104      	adds	r1, #4
 8008388:	f1b9 0f00 	cmp.w	r9, #0
 800838c:	d020      	beq.n	80083d0 <__multiply+0x134>
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	4647      	mov	r7, r8
 8008392:	46a4      	mov	ip, r4
 8008394:	f04f 0a00 	mov.w	sl, #0
 8008398:	f8b7 b000 	ldrh.w	fp, [r7]
 800839c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80083a0:	fb09 220b 	mla	r2, r9, fp, r2
 80083a4:	4452      	add	r2, sl
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083ac:	f84c 3b04 	str.w	r3, [ip], #4
 80083b0:	f857 3b04 	ldr.w	r3, [r7], #4
 80083b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083b8:	f8bc 3000 	ldrh.w	r3, [ip]
 80083bc:	fb09 330a 	mla	r3, r9, sl, r3
 80083c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80083c4:	42bd      	cmp	r5, r7
 80083c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083ca:	d8e5      	bhi.n	8008398 <__multiply+0xfc>
 80083cc:	9a01      	ldr	r2, [sp, #4]
 80083ce:	50a3      	str	r3, [r4, r2]
 80083d0:	3404      	adds	r4, #4
 80083d2:	e79f      	b.n	8008314 <__multiply+0x78>
 80083d4:	3e01      	subs	r6, #1
 80083d6:	e7a1      	b.n	800831c <__multiply+0x80>
 80083d8:	08009084 	.word	0x08009084
 80083dc:	08009095 	.word	0x08009095

080083e0 <__pow5mult>:
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e4:	4615      	mov	r5, r2
 80083e6:	f012 0203 	ands.w	r2, r2, #3
 80083ea:	4607      	mov	r7, r0
 80083ec:	460e      	mov	r6, r1
 80083ee:	d007      	beq.n	8008400 <__pow5mult+0x20>
 80083f0:	4c25      	ldr	r4, [pc, #148]	@ (8008488 <__pow5mult+0xa8>)
 80083f2:	3a01      	subs	r2, #1
 80083f4:	2300      	movs	r3, #0
 80083f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083fa:	f7ff fea7 	bl	800814c <__multadd>
 80083fe:	4606      	mov	r6, r0
 8008400:	10ad      	asrs	r5, r5, #2
 8008402:	d03d      	beq.n	8008480 <__pow5mult+0xa0>
 8008404:	69fc      	ldr	r4, [r7, #28]
 8008406:	b97c      	cbnz	r4, 8008428 <__pow5mult+0x48>
 8008408:	2010      	movs	r0, #16
 800840a:	f7ff fd87 	bl	8007f1c <malloc>
 800840e:	4602      	mov	r2, r0
 8008410:	61f8      	str	r0, [r7, #28]
 8008412:	b928      	cbnz	r0, 8008420 <__pow5mult+0x40>
 8008414:	4b1d      	ldr	r3, [pc, #116]	@ (800848c <__pow5mult+0xac>)
 8008416:	481e      	ldr	r0, [pc, #120]	@ (8008490 <__pow5mult+0xb0>)
 8008418:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800841c:	f000 fa78 	bl	8008910 <__assert_func>
 8008420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008424:	6004      	str	r4, [r0, #0]
 8008426:	60c4      	str	r4, [r0, #12]
 8008428:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800842c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008430:	b94c      	cbnz	r4, 8008446 <__pow5mult+0x66>
 8008432:	f240 2171 	movw	r1, #625	@ 0x271
 8008436:	4638      	mov	r0, r7
 8008438:	f7ff ff1a 	bl	8008270 <__i2b>
 800843c:	2300      	movs	r3, #0
 800843e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008442:	4604      	mov	r4, r0
 8008444:	6003      	str	r3, [r0, #0]
 8008446:	f04f 0900 	mov.w	r9, #0
 800844a:	07eb      	lsls	r3, r5, #31
 800844c:	d50a      	bpl.n	8008464 <__pow5mult+0x84>
 800844e:	4631      	mov	r1, r6
 8008450:	4622      	mov	r2, r4
 8008452:	4638      	mov	r0, r7
 8008454:	f7ff ff22 	bl	800829c <__multiply>
 8008458:	4631      	mov	r1, r6
 800845a:	4680      	mov	r8, r0
 800845c:	4638      	mov	r0, r7
 800845e:	f7ff fe53 	bl	8008108 <_Bfree>
 8008462:	4646      	mov	r6, r8
 8008464:	106d      	asrs	r5, r5, #1
 8008466:	d00b      	beq.n	8008480 <__pow5mult+0xa0>
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	b938      	cbnz	r0, 800847c <__pow5mult+0x9c>
 800846c:	4622      	mov	r2, r4
 800846e:	4621      	mov	r1, r4
 8008470:	4638      	mov	r0, r7
 8008472:	f7ff ff13 	bl	800829c <__multiply>
 8008476:	6020      	str	r0, [r4, #0]
 8008478:	f8c0 9000 	str.w	r9, [r0]
 800847c:	4604      	mov	r4, r0
 800847e:	e7e4      	b.n	800844a <__pow5mult+0x6a>
 8008480:	4630      	mov	r0, r6
 8008482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008486:	bf00      	nop
 8008488:	08009148 	.word	0x08009148
 800848c:	08009015 	.word	0x08009015
 8008490:	08009095 	.word	0x08009095

08008494 <__lshift>:
 8008494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008498:	460c      	mov	r4, r1
 800849a:	6849      	ldr	r1, [r1, #4]
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084a2:	68a3      	ldr	r3, [r4, #8]
 80084a4:	4607      	mov	r7, r0
 80084a6:	4691      	mov	r9, r2
 80084a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084ac:	f108 0601 	add.w	r6, r8, #1
 80084b0:	42b3      	cmp	r3, r6
 80084b2:	db0b      	blt.n	80084cc <__lshift+0x38>
 80084b4:	4638      	mov	r0, r7
 80084b6:	f7ff fde7 	bl	8008088 <_Balloc>
 80084ba:	4605      	mov	r5, r0
 80084bc:	b948      	cbnz	r0, 80084d2 <__lshift+0x3e>
 80084be:	4602      	mov	r2, r0
 80084c0:	4b28      	ldr	r3, [pc, #160]	@ (8008564 <__lshift+0xd0>)
 80084c2:	4829      	ldr	r0, [pc, #164]	@ (8008568 <__lshift+0xd4>)
 80084c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084c8:	f000 fa22 	bl	8008910 <__assert_func>
 80084cc:	3101      	adds	r1, #1
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	e7ee      	b.n	80084b0 <__lshift+0x1c>
 80084d2:	2300      	movs	r3, #0
 80084d4:	f100 0114 	add.w	r1, r0, #20
 80084d8:	f100 0210 	add.w	r2, r0, #16
 80084dc:	4618      	mov	r0, r3
 80084de:	4553      	cmp	r3, sl
 80084e0:	db33      	blt.n	800854a <__lshift+0xb6>
 80084e2:	6920      	ldr	r0, [r4, #16]
 80084e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084e8:	f104 0314 	add.w	r3, r4, #20
 80084ec:	f019 091f 	ands.w	r9, r9, #31
 80084f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084f8:	d02b      	beq.n	8008552 <__lshift+0xbe>
 80084fa:	f1c9 0e20 	rsb	lr, r9, #32
 80084fe:	468a      	mov	sl, r1
 8008500:	2200      	movs	r2, #0
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	fa00 f009 	lsl.w	r0, r0, r9
 8008508:	4310      	orrs	r0, r2
 800850a:	f84a 0b04 	str.w	r0, [sl], #4
 800850e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008512:	459c      	cmp	ip, r3
 8008514:	fa22 f20e 	lsr.w	r2, r2, lr
 8008518:	d8f3      	bhi.n	8008502 <__lshift+0x6e>
 800851a:	ebac 0304 	sub.w	r3, ip, r4
 800851e:	3b15      	subs	r3, #21
 8008520:	f023 0303 	bic.w	r3, r3, #3
 8008524:	3304      	adds	r3, #4
 8008526:	f104 0015 	add.w	r0, r4, #21
 800852a:	4560      	cmp	r0, ip
 800852c:	bf88      	it	hi
 800852e:	2304      	movhi	r3, #4
 8008530:	50ca      	str	r2, [r1, r3]
 8008532:	b10a      	cbz	r2, 8008538 <__lshift+0xa4>
 8008534:	f108 0602 	add.w	r6, r8, #2
 8008538:	3e01      	subs	r6, #1
 800853a:	4638      	mov	r0, r7
 800853c:	612e      	str	r6, [r5, #16]
 800853e:	4621      	mov	r1, r4
 8008540:	f7ff fde2 	bl	8008108 <_Bfree>
 8008544:	4628      	mov	r0, r5
 8008546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854a:	f842 0f04 	str.w	r0, [r2, #4]!
 800854e:	3301      	adds	r3, #1
 8008550:	e7c5      	b.n	80084de <__lshift+0x4a>
 8008552:	3904      	subs	r1, #4
 8008554:	f853 2b04 	ldr.w	r2, [r3], #4
 8008558:	f841 2f04 	str.w	r2, [r1, #4]!
 800855c:	459c      	cmp	ip, r3
 800855e:	d8f9      	bhi.n	8008554 <__lshift+0xc0>
 8008560:	e7ea      	b.n	8008538 <__lshift+0xa4>
 8008562:	bf00      	nop
 8008564:	08009084 	.word	0x08009084
 8008568:	08009095 	.word	0x08009095

0800856c <__mcmp>:
 800856c:	690a      	ldr	r2, [r1, #16]
 800856e:	4603      	mov	r3, r0
 8008570:	6900      	ldr	r0, [r0, #16]
 8008572:	1a80      	subs	r0, r0, r2
 8008574:	b530      	push	{r4, r5, lr}
 8008576:	d10e      	bne.n	8008596 <__mcmp+0x2a>
 8008578:	3314      	adds	r3, #20
 800857a:	3114      	adds	r1, #20
 800857c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008580:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008584:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008588:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800858c:	4295      	cmp	r5, r2
 800858e:	d003      	beq.n	8008598 <__mcmp+0x2c>
 8008590:	d205      	bcs.n	800859e <__mcmp+0x32>
 8008592:	f04f 30ff 	mov.w	r0, #4294967295
 8008596:	bd30      	pop	{r4, r5, pc}
 8008598:	42a3      	cmp	r3, r4
 800859a:	d3f3      	bcc.n	8008584 <__mcmp+0x18>
 800859c:	e7fb      	b.n	8008596 <__mcmp+0x2a>
 800859e:	2001      	movs	r0, #1
 80085a0:	e7f9      	b.n	8008596 <__mcmp+0x2a>
	...

080085a4 <__mdiff>:
 80085a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	4689      	mov	r9, r1
 80085aa:	4606      	mov	r6, r0
 80085ac:	4611      	mov	r1, r2
 80085ae:	4648      	mov	r0, r9
 80085b0:	4614      	mov	r4, r2
 80085b2:	f7ff ffdb 	bl	800856c <__mcmp>
 80085b6:	1e05      	subs	r5, r0, #0
 80085b8:	d112      	bne.n	80085e0 <__mdiff+0x3c>
 80085ba:	4629      	mov	r1, r5
 80085bc:	4630      	mov	r0, r6
 80085be:	f7ff fd63 	bl	8008088 <_Balloc>
 80085c2:	4602      	mov	r2, r0
 80085c4:	b928      	cbnz	r0, 80085d2 <__mdiff+0x2e>
 80085c6:	4b3f      	ldr	r3, [pc, #252]	@ (80086c4 <__mdiff+0x120>)
 80085c8:	f240 2137 	movw	r1, #567	@ 0x237
 80085cc:	483e      	ldr	r0, [pc, #248]	@ (80086c8 <__mdiff+0x124>)
 80085ce:	f000 f99f 	bl	8008910 <__assert_func>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085d8:	4610      	mov	r0, r2
 80085da:	b003      	add	sp, #12
 80085dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e0:	bfbc      	itt	lt
 80085e2:	464b      	movlt	r3, r9
 80085e4:	46a1      	movlt	r9, r4
 80085e6:	4630      	mov	r0, r6
 80085e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085ec:	bfba      	itte	lt
 80085ee:	461c      	movlt	r4, r3
 80085f0:	2501      	movlt	r5, #1
 80085f2:	2500      	movge	r5, #0
 80085f4:	f7ff fd48 	bl	8008088 <_Balloc>
 80085f8:	4602      	mov	r2, r0
 80085fa:	b918      	cbnz	r0, 8008604 <__mdiff+0x60>
 80085fc:	4b31      	ldr	r3, [pc, #196]	@ (80086c4 <__mdiff+0x120>)
 80085fe:	f240 2145 	movw	r1, #581	@ 0x245
 8008602:	e7e3      	b.n	80085cc <__mdiff+0x28>
 8008604:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008608:	6926      	ldr	r6, [r4, #16]
 800860a:	60c5      	str	r5, [r0, #12]
 800860c:	f109 0310 	add.w	r3, r9, #16
 8008610:	f109 0514 	add.w	r5, r9, #20
 8008614:	f104 0e14 	add.w	lr, r4, #20
 8008618:	f100 0b14 	add.w	fp, r0, #20
 800861c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008620:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	46d9      	mov	r9, fp
 8008628:	f04f 0c00 	mov.w	ip, #0
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008632:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008636:	9301      	str	r3, [sp, #4]
 8008638:	fa1f f38a 	uxth.w	r3, sl
 800863c:	4619      	mov	r1, r3
 800863e:	b283      	uxth	r3, r0
 8008640:	1acb      	subs	r3, r1, r3
 8008642:	0c00      	lsrs	r0, r0, #16
 8008644:	4463      	add	r3, ip
 8008646:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800864a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800864e:	b29b      	uxth	r3, r3
 8008650:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008654:	4576      	cmp	r6, lr
 8008656:	f849 3b04 	str.w	r3, [r9], #4
 800865a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800865e:	d8e5      	bhi.n	800862c <__mdiff+0x88>
 8008660:	1b33      	subs	r3, r6, r4
 8008662:	3b15      	subs	r3, #21
 8008664:	f023 0303 	bic.w	r3, r3, #3
 8008668:	3415      	adds	r4, #21
 800866a:	3304      	adds	r3, #4
 800866c:	42a6      	cmp	r6, r4
 800866e:	bf38      	it	cc
 8008670:	2304      	movcc	r3, #4
 8008672:	441d      	add	r5, r3
 8008674:	445b      	add	r3, fp
 8008676:	461e      	mov	r6, r3
 8008678:	462c      	mov	r4, r5
 800867a:	4544      	cmp	r4, r8
 800867c:	d30e      	bcc.n	800869c <__mdiff+0xf8>
 800867e:	f108 0103 	add.w	r1, r8, #3
 8008682:	1b49      	subs	r1, r1, r5
 8008684:	f021 0103 	bic.w	r1, r1, #3
 8008688:	3d03      	subs	r5, #3
 800868a:	45a8      	cmp	r8, r5
 800868c:	bf38      	it	cc
 800868e:	2100      	movcc	r1, #0
 8008690:	440b      	add	r3, r1
 8008692:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008696:	b191      	cbz	r1, 80086be <__mdiff+0x11a>
 8008698:	6117      	str	r7, [r2, #16]
 800869a:	e79d      	b.n	80085d8 <__mdiff+0x34>
 800869c:	f854 1b04 	ldr.w	r1, [r4], #4
 80086a0:	46e6      	mov	lr, ip
 80086a2:	0c08      	lsrs	r0, r1, #16
 80086a4:	fa1c fc81 	uxtah	ip, ip, r1
 80086a8:	4471      	add	r1, lr
 80086aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80086ae:	b289      	uxth	r1, r1
 80086b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086b4:	f846 1b04 	str.w	r1, [r6], #4
 80086b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086bc:	e7dd      	b.n	800867a <__mdiff+0xd6>
 80086be:	3f01      	subs	r7, #1
 80086c0:	e7e7      	b.n	8008692 <__mdiff+0xee>
 80086c2:	bf00      	nop
 80086c4:	08009084 	.word	0x08009084
 80086c8:	08009095 	.word	0x08009095

080086cc <__d2b>:
 80086cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086d0:	460f      	mov	r7, r1
 80086d2:	2101      	movs	r1, #1
 80086d4:	ec59 8b10 	vmov	r8, r9, d0
 80086d8:	4616      	mov	r6, r2
 80086da:	f7ff fcd5 	bl	8008088 <_Balloc>
 80086de:	4604      	mov	r4, r0
 80086e0:	b930      	cbnz	r0, 80086f0 <__d2b+0x24>
 80086e2:	4602      	mov	r2, r0
 80086e4:	4b23      	ldr	r3, [pc, #140]	@ (8008774 <__d2b+0xa8>)
 80086e6:	4824      	ldr	r0, [pc, #144]	@ (8008778 <__d2b+0xac>)
 80086e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80086ec:	f000 f910 	bl	8008910 <__assert_func>
 80086f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086f8:	b10d      	cbz	r5, 80086fe <__d2b+0x32>
 80086fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086fe:	9301      	str	r3, [sp, #4]
 8008700:	f1b8 0300 	subs.w	r3, r8, #0
 8008704:	d023      	beq.n	800874e <__d2b+0x82>
 8008706:	4668      	mov	r0, sp
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	f7ff fd84 	bl	8008216 <__lo0bits>
 800870e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008712:	b1d0      	cbz	r0, 800874a <__d2b+0x7e>
 8008714:	f1c0 0320 	rsb	r3, r0, #32
 8008718:	fa02 f303 	lsl.w	r3, r2, r3
 800871c:	430b      	orrs	r3, r1
 800871e:	40c2      	lsrs	r2, r0
 8008720:	6163      	str	r3, [r4, #20]
 8008722:	9201      	str	r2, [sp, #4]
 8008724:	9b01      	ldr	r3, [sp, #4]
 8008726:	61a3      	str	r3, [r4, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	bf0c      	ite	eq
 800872c:	2201      	moveq	r2, #1
 800872e:	2202      	movne	r2, #2
 8008730:	6122      	str	r2, [r4, #16]
 8008732:	b1a5      	cbz	r5, 800875e <__d2b+0x92>
 8008734:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008738:	4405      	add	r5, r0
 800873a:	603d      	str	r5, [r7, #0]
 800873c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008740:	6030      	str	r0, [r6, #0]
 8008742:	4620      	mov	r0, r4
 8008744:	b003      	add	sp, #12
 8008746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800874a:	6161      	str	r1, [r4, #20]
 800874c:	e7ea      	b.n	8008724 <__d2b+0x58>
 800874e:	a801      	add	r0, sp, #4
 8008750:	f7ff fd61 	bl	8008216 <__lo0bits>
 8008754:	9b01      	ldr	r3, [sp, #4]
 8008756:	6163      	str	r3, [r4, #20]
 8008758:	3020      	adds	r0, #32
 800875a:	2201      	movs	r2, #1
 800875c:	e7e8      	b.n	8008730 <__d2b+0x64>
 800875e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008762:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008766:	6038      	str	r0, [r7, #0]
 8008768:	6918      	ldr	r0, [r3, #16]
 800876a:	f7ff fd35 	bl	80081d8 <__hi0bits>
 800876e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008772:	e7e5      	b.n	8008740 <__d2b+0x74>
 8008774:	08009084 	.word	0x08009084
 8008778:	08009095 	.word	0x08009095

0800877c <__sflush_r>:
 800877c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008784:	0716      	lsls	r6, r2, #28
 8008786:	4605      	mov	r5, r0
 8008788:	460c      	mov	r4, r1
 800878a:	d454      	bmi.n	8008836 <__sflush_r+0xba>
 800878c:	684b      	ldr	r3, [r1, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	dc02      	bgt.n	8008798 <__sflush_r+0x1c>
 8008792:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd48      	ble.n	800882a <__sflush_r+0xae>
 8008798:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800879a:	2e00      	cmp	r6, #0
 800879c:	d045      	beq.n	800882a <__sflush_r+0xae>
 800879e:	2300      	movs	r3, #0
 80087a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087a4:	682f      	ldr	r7, [r5, #0]
 80087a6:	6a21      	ldr	r1, [r4, #32]
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	d030      	beq.n	800880e <__sflush_r+0x92>
 80087ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	0759      	lsls	r1, r3, #29
 80087b2:	d505      	bpl.n	80087c0 <__sflush_r+0x44>
 80087b4:	6863      	ldr	r3, [r4, #4]
 80087b6:	1ad2      	subs	r2, r2, r3
 80087b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087ba:	b10b      	cbz	r3, 80087c0 <__sflush_r+0x44>
 80087bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	2300      	movs	r3, #0
 80087c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087c4:	6a21      	ldr	r1, [r4, #32]
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b0      	blx	r6
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	d106      	bne.n	80087de <__sflush_r+0x62>
 80087d0:	6829      	ldr	r1, [r5, #0]
 80087d2:	291d      	cmp	r1, #29
 80087d4:	d82b      	bhi.n	800882e <__sflush_r+0xb2>
 80087d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008880 <__sflush_r+0x104>)
 80087d8:	40ca      	lsrs	r2, r1
 80087da:	07d6      	lsls	r6, r2, #31
 80087dc:	d527      	bpl.n	800882e <__sflush_r+0xb2>
 80087de:	2200      	movs	r2, #0
 80087e0:	6062      	str	r2, [r4, #4]
 80087e2:	04d9      	lsls	r1, r3, #19
 80087e4:	6922      	ldr	r2, [r4, #16]
 80087e6:	6022      	str	r2, [r4, #0]
 80087e8:	d504      	bpl.n	80087f4 <__sflush_r+0x78>
 80087ea:	1c42      	adds	r2, r0, #1
 80087ec:	d101      	bne.n	80087f2 <__sflush_r+0x76>
 80087ee:	682b      	ldr	r3, [r5, #0]
 80087f0:	b903      	cbnz	r3, 80087f4 <__sflush_r+0x78>
 80087f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80087f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087f6:	602f      	str	r7, [r5, #0]
 80087f8:	b1b9      	cbz	r1, 800882a <__sflush_r+0xae>
 80087fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087fe:	4299      	cmp	r1, r3
 8008800:	d002      	beq.n	8008808 <__sflush_r+0x8c>
 8008802:	4628      	mov	r0, r5
 8008804:	f7ff fb40 	bl	8007e88 <_free_r>
 8008808:	2300      	movs	r3, #0
 800880a:	6363      	str	r3, [r4, #52]	@ 0x34
 800880c:	e00d      	b.n	800882a <__sflush_r+0xae>
 800880e:	2301      	movs	r3, #1
 8008810:	4628      	mov	r0, r5
 8008812:	47b0      	blx	r6
 8008814:	4602      	mov	r2, r0
 8008816:	1c50      	adds	r0, r2, #1
 8008818:	d1c9      	bne.n	80087ae <__sflush_r+0x32>
 800881a:	682b      	ldr	r3, [r5, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d0c6      	beq.n	80087ae <__sflush_r+0x32>
 8008820:	2b1d      	cmp	r3, #29
 8008822:	d001      	beq.n	8008828 <__sflush_r+0xac>
 8008824:	2b16      	cmp	r3, #22
 8008826:	d11e      	bne.n	8008866 <__sflush_r+0xea>
 8008828:	602f      	str	r7, [r5, #0]
 800882a:	2000      	movs	r0, #0
 800882c:	e022      	b.n	8008874 <__sflush_r+0xf8>
 800882e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008832:	b21b      	sxth	r3, r3
 8008834:	e01b      	b.n	800886e <__sflush_r+0xf2>
 8008836:	690f      	ldr	r7, [r1, #16]
 8008838:	2f00      	cmp	r7, #0
 800883a:	d0f6      	beq.n	800882a <__sflush_r+0xae>
 800883c:	0793      	lsls	r3, r2, #30
 800883e:	680e      	ldr	r6, [r1, #0]
 8008840:	bf08      	it	eq
 8008842:	694b      	ldreq	r3, [r1, #20]
 8008844:	600f      	str	r7, [r1, #0]
 8008846:	bf18      	it	ne
 8008848:	2300      	movne	r3, #0
 800884a:	eba6 0807 	sub.w	r8, r6, r7
 800884e:	608b      	str	r3, [r1, #8]
 8008850:	f1b8 0f00 	cmp.w	r8, #0
 8008854:	dde9      	ble.n	800882a <__sflush_r+0xae>
 8008856:	6a21      	ldr	r1, [r4, #32]
 8008858:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800885a:	4643      	mov	r3, r8
 800885c:	463a      	mov	r2, r7
 800885e:	4628      	mov	r0, r5
 8008860:	47b0      	blx	r6
 8008862:	2800      	cmp	r0, #0
 8008864:	dc08      	bgt.n	8008878 <__sflush_r+0xfc>
 8008866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008878:	4407      	add	r7, r0
 800887a:	eba8 0800 	sub.w	r8, r8, r0
 800887e:	e7e7      	b.n	8008850 <__sflush_r+0xd4>
 8008880:	20400001 	.word	0x20400001

08008884 <_fflush_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	690b      	ldr	r3, [r1, #16]
 8008888:	4605      	mov	r5, r0
 800888a:	460c      	mov	r4, r1
 800888c:	b913      	cbnz	r3, 8008894 <_fflush_r+0x10>
 800888e:	2500      	movs	r5, #0
 8008890:	4628      	mov	r0, r5
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	b118      	cbz	r0, 800889e <_fflush_r+0x1a>
 8008896:	6a03      	ldr	r3, [r0, #32]
 8008898:	b90b      	cbnz	r3, 800889e <_fflush_r+0x1a>
 800889a:	f7fe fba3 	bl	8006fe4 <__sinit>
 800889e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f3      	beq.n	800888e <_fflush_r+0xa>
 80088a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088a8:	07d0      	lsls	r0, r2, #31
 80088aa:	d404      	bmi.n	80088b6 <_fflush_r+0x32>
 80088ac:	0599      	lsls	r1, r3, #22
 80088ae:	d402      	bmi.n	80088b6 <_fflush_r+0x32>
 80088b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088b2:	f7fe fc8e 	bl	80071d2 <__retarget_lock_acquire_recursive>
 80088b6:	4628      	mov	r0, r5
 80088b8:	4621      	mov	r1, r4
 80088ba:	f7ff ff5f 	bl	800877c <__sflush_r>
 80088be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088c0:	07da      	lsls	r2, r3, #31
 80088c2:	4605      	mov	r5, r0
 80088c4:	d4e4      	bmi.n	8008890 <_fflush_r+0xc>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	059b      	lsls	r3, r3, #22
 80088ca:	d4e1      	bmi.n	8008890 <_fflush_r+0xc>
 80088cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088ce:	f7fe fc81 	bl	80071d4 <__retarget_lock_release_recursive>
 80088d2:	e7dd      	b.n	8008890 <_fflush_r+0xc>

080088d4 <_sbrk_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d06      	ldr	r5, [pc, #24]	@ (80088f0 <_sbrk_r+0x1c>)
 80088d8:	2300      	movs	r3, #0
 80088da:	4604      	mov	r4, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	f7f8 ff8c 	bl	80017fc <_sbrk>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_sbrk_r+0x1a>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_sbrk_r+0x1a>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	20000484 	.word	0x20000484

080088f4 <memcpy>:
 80088f4:	440a      	add	r2, r1
 80088f6:	4291      	cmp	r1, r2
 80088f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088fc:	d100      	bne.n	8008900 <memcpy+0xc>
 80088fe:	4770      	bx	lr
 8008900:	b510      	push	{r4, lr}
 8008902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800890a:	4291      	cmp	r1, r2
 800890c:	d1f9      	bne.n	8008902 <memcpy+0xe>
 800890e:	bd10      	pop	{r4, pc}

08008910 <__assert_func>:
 8008910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008912:	4614      	mov	r4, r2
 8008914:	461a      	mov	r2, r3
 8008916:	4b09      	ldr	r3, [pc, #36]	@ (800893c <__assert_func+0x2c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4605      	mov	r5, r0
 800891c:	68d8      	ldr	r0, [r3, #12]
 800891e:	b14c      	cbz	r4, 8008934 <__assert_func+0x24>
 8008920:	4b07      	ldr	r3, [pc, #28]	@ (8008940 <__assert_func+0x30>)
 8008922:	9100      	str	r1, [sp, #0]
 8008924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008928:	4906      	ldr	r1, [pc, #24]	@ (8008944 <__assert_func+0x34>)
 800892a:	462b      	mov	r3, r5
 800892c:	f000 f842 	bl	80089b4 <fiprintf>
 8008930:	f000 f852 	bl	80089d8 <abort>
 8008934:	4b04      	ldr	r3, [pc, #16]	@ (8008948 <__assert_func+0x38>)
 8008936:	461c      	mov	r4, r3
 8008938:	e7f3      	b.n	8008922 <__assert_func+0x12>
 800893a:	bf00      	nop
 800893c:	20000018 	.word	0x20000018
 8008940:	080090f8 	.word	0x080090f8
 8008944:	08009105 	.word	0x08009105
 8008948:	08009133 	.word	0x08009133

0800894c <_calloc_r>:
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	fba1 5402 	umull	r5, r4, r1, r2
 8008952:	b934      	cbnz	r4, 8008962 <_calloc_r+0x16>
 8008954:	4629      	mov	r1, r5
 8008956:	f7ff fb0b 	bl	8007f70 <_malloc_r>
 800895a:	4606      	mov	r6, r0
 800895c:	b928      	cbnz	r0, 800896a <_calloc_r+0x1e>
 800895e:	4630      	mov	r0, r6
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	220c      	movs	r2, #12
 8008964:	6002      	str	r2, [r0, #0]
 8008966:	2600      	movs	r6, #0
 8008968:	e7f9      	b.n	800895e <_calloc_r+0x12>
 800896a:	462a      	mov	r2, r5
 800896c:	4621      	mov	r1, r4
 800896e:	f7fe fbb2 	bl	80070d6 <memset>
 8008972:	e7f4      	b.n	800895e <_calloc_r+0x12>

08008974 <__ascii_mbtowc>:
 8008974:	b082      	sub	sp, #8
 8008976:	b901      	cbnz	r1, 800897a <__ascii_mbtowc+0x6>
 8008978:	a901      	add	r1, sp, #4
 800897a:	b142      	cbz	r2, 800898e <__ascii_mbtowc+0x1a>
 800897c:	b14b      	cbz	r3, 8008992 <__ascii_mbtowc+0x1e>
 800897e:	7813      	ldrb	r3, [r2, #0]
 8008980:	600b      	str	r3, [r1, #0]
 8008982:	7812      	ldrb	r2, [r2, #0]
 8008984:	1e10      	subs	r0, r2, #0
 8008986:	bf18      	it	ne
 8008988:	2001      	movne	r0, #1
 800898a:	b002      	add	sp, #8
 800898c:	4770      	bx	lr
 800898e:	4610      	mov	r0, r2
 8008990:	e7fb      	b.n	800898a <__ascii_mbtowc+0x16>
 8008992:	f06f 0001 	mvn.w	r0, #1
 8008996:	e7f8      	b.n	800898a <__ascii_mbtowc+0x16>

08008998 <__ascii_wctomb>:
 8008998:	4603      	mov	r3, r0
 800899a:	4608      	mov	r0, r1
 800899c:	b141      	cbz	r1, 80089b0 <__ascii_wctomb+0x18>
 800899e:	2aff      	cmp	r2, #255	@ 0xff
 80089a0:	d904      	bls.n	80089ac <__ascii_wctomb+0x14>
 80089a2:	228a      	movs	r2, #138	@ 0x8a
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295
 80089aa:	4770      	bx	lr
 80089ac:	700a      	strb	r2, [r1, #0]
 80089ae:	2001      	movs	r0, #1
 80089b0:	4770      	bx	lr
	...

080089b4 <fiprintf>:
 80089b4:	b40e      	push	{r1, r2, r3}
 80089b6:	b503      	push	{r0, r1, lr}
 80089b8:	4601      	mov	r1, r0
 80089ba:	ab03      	add	r3, sp, #12
 80089bc:	4805      	ldr	r0, [pc, #20]	@ (80089d4 <fiprintf+0x20>)
 80089be:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c2:	6800      	ldr	r0, [r0, #0]
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	f000 f837 	bl	8008a38 <_vfiprintf_r>
 80089ca:	b002      	add	sp, #8
 80089cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d0:	b003      	add	sp, #12
 80089d2:	4770      	bx	lr
 80089d4:	20000018 	.word	0x20000018

080089d8 <abort>:
 80089d8:	b508      	push	{r3, lr}
 80089da:	2006      	movs	r0, #6
 80089dc:	f000 fa00 	bl	8008de0 <raise>
 80089e0:	2001      	movs	r0, #1
 80089e2:	f7f8 fe93 	bl	800170c <_exit>

080089e6 <__sfputc_r>:
 80089e6:	6893      	ldr	r3, [r2, #8]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	b410      	push	{r4}
 80089ee:	6093      	str	r3, [r2, #8]
 80089f0:	da08      	bge.n	8008a04 <__sfputc_r+0x1e>
 80089f2:	6994      	ldr	r4, [r2, #24]
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	db01      	blt.n	80089fc <__sfputc_r+0x16>
 80089f8:	290a      	cmp	r1, #10
 80089fa:	d103      	bne.n	8008a04 <__sfputc_r+0x1e>
 80089fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a00:	f000 b932 	b.w	8008c68 <__swbuf_r>
 8008a04:	6813      	ldr	r3, [r2, #0]
 8008a06:	1c58      	adds	r0, r3, #1
 8008a08:	6010      	str	r0, [r2, #0]
 8008a0a:	7019      	strb	r1, [r3, #0]
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <__sfputs_r>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	4606      	mov	r6, r0
 8008a18:	460f      	mov	r7, r1
 8008a1a:	4614      	mov	r4, r2
 8008a1c:	18d5      	adds	r5, r2, r3
 8008a1e:	42ac      	cmp	r4, r5
 8008a20:	d101      	bne.n	8008a26 <__sfputs_r+0x12>
 8008a22:	2000      	movs	r0, #0
 8008a24:	e007      	b.n	8008a36 <__sfputs_r+0x22>
 8008a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f7ff ffda 	bl	80089e6 <__sfputc_r>
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	d1f3      	bne.n	8008a1e <__sfputs_r+0xa>
 8008a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a38 <_vfiprintf_r>:
 8008a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	460d      	mov	r5, r1
 8008a3e:	b09d      	sub	sp, #116	@ 0x74
 8008a40:	4614      	mov	r4, r2
 8008a42:	4698      	mov	r8, r3
 8008a44:	4606      	mov	r6, r0
 8008a46:	b118      	cbz	r0, 8008a50 <_vfiprintf_r+0x18>
 8008a48:	6a03      	ldr	r3, [r0, #32]
 8008a4a:	b90b      	cbnz	r3, 8008a50 <_vfiprintf_r+0x18>
 8008a4c:	f7fe faca 	bl	8006fe4 <__sinit>
 8008a50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a52:	07d9      	lsls	r1, r3, #31
 8008a54:	d405      	bmi.n	8008a62 <_vfiprintf_r+0x2a>
 8008a56:	89ab      	ldrh	r3, [r5, #12]
 8008a58:	059a      	lsls	r2, r3, #22
 8008a5a:	d402      	bmi.n	8008a62 <_vfiprintf_r+0x2a>
 8008a5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a5e:	f7fe fbb8 	bl	80071d2 <__retarget_lock_acquire_recursive>
 8008a62:	89ab      	ldrh	r3, [r5, #12]
 8008a64:	071b      	lsls	r3, r3, #28
 8008a66:	d501      	bpl.n	8008a6c <_vfiprintf_r+0x34>
 8008a68:	692b      	ldr	r3, [r5, #16]
 8008a6a:	b99b      	cbnz	r3, 8008a94 <_vfiprintf_r+0x5c>
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f000 f938 	bl	8008ce4 <__swsetup_r>
 8008a74:	b170      	cbz	r0, 8008a94 <_vfiprintf_r+0x5c>
 8008a76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a78:	07dc      	lsls	r4, r3, #31
 8008a7a:	d504      	bpl.n	8008a86 <_vfiprintf_r+0x4e>
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	b01d      	add	sp, #116	@ 0x74
 8008a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a86:	89ab      	ldrh	r3, [r5, #12]
 8008a88:	0598      	lsls	r0, r3, #22
 8008a8a:	d4f7      	bmi.n	8008a7c <_vfiprintf_r+0x44>
 8008a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a8e:	f7fe fba1 	bl	80071d4 <__retarget_lock_release_recursive>
 8008a92:	e7f3      	b.n	8008a7c <_vfiprintf_r+0x44>
 8008a94:	2300      	movs	r3, #0
 8008a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a98:	2320      	movs	r3, #32
 8008a9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aa2:	2330      	movs	r3, #48	@ 0x30
 8008aa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c54 <_vfiprintf_r+0x21c>
 8008aa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aac:	f04f 0901 	mov.w	r9, #1
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	469a      	mov	sl, r3
 8008ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab8:	b10a      	cbz	r2, 8008abe <_vfiprintf_r+0x86>
 8008aba:	2a25      	cmp	r2, #37	@ 0x25
 8008abc:	d1f9      	bne.n	8008ab2 <_vfiprintf_r+0x7a>
 8008abe:	ebba 0b04 	subs.w	fp, sl, r4
 8008ac2:	d00b      	beq.n	8008adc <_vfiprintf_r+0xa4>
 8008ac4:	465b      	mov	r3, fp
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7ff ffa2 	bl	8008a14 <__sfputs_r>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	f000 80a7 	beq.w	8008c24 <_vfiprintf_r+0x1ec>
 8008ad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ad8:	445a      	add	r2, fp
 8008ada:	9209      	str	r2, [sp, #36]	@ 0x24
 8008adc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 809f 	beq.w	8008c24 <_vfiprintf_r+0x1ec>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008af0:	f10a 0a01 	add.w	sl, sl, #1
 8008af4:	9304      	str	r3, [sp, #16]
 8008af6:	9307      	str	r3, [sp, #28]
 8008af8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008afc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008afe:	4654      	mov	r4, sl
 8008b00:	2205      	movs	r2, #5
 8008b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b06:	4853      	ldr	r0, [pc, #332]	@ (8008c54 <_vfiprintf_r+0x21c>)
 8008b08:	f7f7 fb8a 	bl	8000220 <memchr>
 8008b0c:	9a04      	ldr	r2, [sp, #16]
 8008b0e:	b9d8      	cbnz	r0, 8008b48 <_vfiprintf_r+0x110>
 8008b10:	06d1      	lsls	r1, r2, #27
 8008b12:	bf44      	itt	mi
 8008b14:	2320      	movmi	r3, #32
 8008b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b1a:	0713      	lsls	r3, r2, #28
 8008b1c:	bf44      	itt	mi
 8008b1e:	232b      	movmi	r3, #43	@ 0x2b
 8008b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b24:	f89a 3000 	ldrb.w	r3, [sl]
 8008b28:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b2a:	d015      	beq.n	8008b58 <_vfiprintf_r+0x120>
 8008b2c:	9a07      	ldr	r2, [sp, #28]
 8008b2e:	4654      	mov	r4, sl
 8008b30:	2000      	movs	r0, #0
 8008b32:	f04f 0c0a 	mov.w	ip, #10
 8008b36:	4621      	mov	r1, r4
 8008b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b3c:	3b30      	subs	r3, #48	@ 0x30
 8008b3e:	2b09      	cmp	r3, #9
 8008b40:	d94b      	bls.n	8008bda <_vfiprintf_r+0x1a2>
 8008b42:	b1b0      	cbz	r0, 8008b72 <_vfiprintf_r+0x13a>
 8008b44:	9207      	str	r2, [sp, #28]
 8008b46:	e014      	b.n	8008b72 <_vfiprintf_r+0x13a>
 8008b48:	eba0 0308 	sub.w	r3, r0, r8
 8008b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b50:	4313      	orrs	r3, r2
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	46a2      	mov	sl, r4
 8008b56:	e7d2      	b.n	8008afe <_vfiprintf_r+0xc6>
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	1d19      	adds	r1, r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	9103      	str	r1, [sp, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	bfbb      	ittet	lt
 8008b64:	425b      	neglt	r3, r3
 8008b66:	f042 0202 	orrlt.w	r2, r2, #2
 8008b6a:	9307      	strge	r3, [sp, #28]
 8008b6c:	9307      	strlt	r3, [sp, #28]
 8008b6e:	bfb8      	it	lt
 8008b70:	9204      	strlt	r2, [sp, #16]
 8008b72:	7823      	ldrb	r3, [r4, #0]
 8008b74:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b76:	d10a      	bne.n	8008b8e <_vfiprintf_r+0x156>
 8008b78:	7863      	ldrb	r3, [r4, #1]
 8008b7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b7c:	d132      	bne.n	8008be4 <_vfiprintf_r+0x1ac>
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	1d1a      	adds	r2, r3, #4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	9203      	str	r2, [sp, #12]
 8008b86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b8a:	3402      	adds	r4, #2
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c64 <_vfiprintf_r+0x22c>
 8008b92:	7821      	ldrb	r1, [r4, #0]
 8008b94:	2203      	movs	r2, #3
 8008b96:	4650      	mov	r0, sl
 8008b98:	f7f7 fb42 	bl	8000220 <memchr>
 8008b9c:	b138      	cbz	r0, 8008bae <_vfiprintf_r+0x176>
 8008b9e:	9b04      	ldr	r3, [sp, #16]
 8008ba0:	eba0 000a 	sub.w	r0, r0, sl
 8008ba4:	2240      	movs	r2, #64	@ 0x40
 8008ba6:	4082      	lsls	r2, r0
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	3401      	adds	r4, #1
 8008bac:	9304      	str	r3, [sp, #16]
 8008bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb2:	4829      	ldr	r0, [pc, #164]	@ (8008c58 <_vfiprintf_r+0x220>)
 8008bb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bb8:	2206      	movs	r2, #6
 8008bba:	f7f7 fb31 	bl	8000220 <memchr>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d03f      	beq.n	8008c42 <_vfiprintf_r+0x20a>
 8008bc2:	4b26      	ldr	r3, [pc, #152]	@ (8008c5c <_vfiprintf_r+0x224>)
 8008bc4:	bb1b      	cbnz	r3, 8008c0e <_vfiprintf_r+0x1d6>
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	3307      	adds	r3, #7
 8008bca:	f023 0307 	bic.w	r3, r3, #7
 8008bce:	3308      	adds	r3, #8
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd4:	443b      	add	r3, r7
 8008bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bd8:	e76a      	b.n	8008ab0 <_vfiprintf_r+0x78>
 8008bda:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bde:	460c      	mov	r4, r1
 8008be0:	2001      	movs	r0, #1
 8008be2:	e7a8      	b.n	8008b36 <_vfiprintf_r+0xfe>
 8008be4:	2300      	movs	r3, #0
 8008be6:	3401      	adds	r4, #1
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	4619      	mov	r1, r3
 8008bec:	f04f 0c0a 	mov.w	ip, #10
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bf6:	3a30      	subs	r2, #48	@ 0x30
 8008bf8:	2a09      	cmp	r2, #9
 8008bfa:	d903      	bls.n	8008c04 <_vfiprintf_r+0x1cc>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0c6      	beq.n	8008b8e <_vfiprintf_r+0x156>
 8008c00:	9105      	str	r1, [sp, #20]
 8008c02:	e7c4      	b.n	8008b8e <_vfiprintf_r+0x156>
 8008c04:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c08:	4604      	mov	r4, r0
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e7f0      	b.n	8008bf0 <_vfiprintf_r+0x1b8>
 8008c0e:	ab03      	add	r3, sp, #12
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	462a      	mov	r2, r5
 8008c14:	4b12      	ldr	r3, [pc, #72]	@ (8008c60 <_vfiprintf_r+0x228>)
 8008c16:	a904      	add	r1, sp, #16
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f7fd fda1 	bl	8006760 <_printf_float>
 8008c1e:	4607      	mov	r7, r0
 8008c20:	1c78      	adds	r0, r7, #1
 8008c22:	d1d6      	bne.n	8008bd2 <_vfiprintf_r+0x19a>
 8008c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c26:	07d9      	lsls	r1, r3, #31
 8008c28:	d405      	bmi.n	8008c36 <_vfiprintf_r+0x1fe>
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	059a      	lsls	r2, r3, #22
 8008c2e:	d402      	bmi.n	8008c36 <_vfiprintf_r+0x1fe>
 8008c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c32:	f7fe facf 	bl	80071d4 <__retarget_lock_release_recursive>
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	065b      	lsls	r3, r3, #25
 8008c3a:	f53f af1f 	bmi.w	8008a7c <_vfiprintf_r+0x44>
 8008c3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c40:	e71e      	b.n	8008a80 <_vfiprintf_r+0x48>
 8008c42:	ab03      	add	r3, sp, #12
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	462a      	mov	r2, r5
 8008c48:	4b05      	ldr	r3, [pc, #20]	@ (8008c60 <_vfiprintf_r+0x228>)
 8008c4a:	a904      	add	r1, sp, #16
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7fe f81f 	bl	8006c90 <_printf_i>
 8008c52:	e7e4      	b.n	8008c1e <_vfiprintf_r+0x1e6>
 8008c54:	08009134 	.word	0x08009134
 8008c58:	0800913e 	.word	0x0800913e
 8008c5c:	08006761 	.word	0x08006761
 8008c60:	08008a15 	.word	0x08008a15
 8008c64:	0800913a 	.word	0x0800913a

08008c68 <__swbuf_r>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	460e      	mov	r6, r1
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	4605      	mov	r5, r0
 8008c70:	b118      	cbz	r0, 8008c7a <__swbuf_r+0x12>
 8008c72:	6a03      	ldr	r3, [r0, #32]
 8008c74:	b90b      	cbnz	r3, 8008c7a <__swbuf_r+0x12>
 8008c76:	f7fe f9b5 	bl	8006fe4 <__sinit>
 8008c7a:	69a3      	ldr	r3, [r4, #24]
 8008c7c:	60a3      	str	r3, [r4, #8]
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	071a      	lsls	r2, r3, #28
 8008c82:	d501      	bpl.n	8008c88 <__swbuf_r+0x20>
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	b943      	cbnz	r3, 8008c9a <__swbuf_r+0x32>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 f82a 	bl	8008ce4 <__swsetup_r>
 8008c90:	b118      	cbz	r0, 8008c9a <__swbuf_r+0x32>
 8008c92:	f04f 37ff 	mov.w	r7, #4294967295
 8008c96:	4638      	mov	r0, r7
 8008c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	6922      	ldr	r2, [r4, #16]
 8008c9e:	1a98      	subs	r0, r3, r2
 8008ca0:	6963      	ldr	r3, [r4, #20]
 8008ca2:	b2f6      	uxtb	r6, r6
 8008ca4:	4283      	cmp	r3, r0
 8008ca6:	4637      	mov	r7, r6
 8008ca8:	dc05      	bgt.n	8008cb6 <__swbuf_r+0x4e>
 8008caa:	4621      	mov	r1, r4
 8008cac:	4628      	mov	r0, r5
 8008cae:	f7ff fde9 	bl	8008884 <_fflush_r>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d1ed      	bne.n	8008c92 <__swbuf_r+0x2a>
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	60a3      	str	r3, [r4, #8]
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	6022      	str	r2, [r4, #0]
 8008cc2:	701e      	strb	r6, [r3, #0]
 8008cc4:	6962      	ldr	r2, [r4, #20]
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d004      	beq.n	8008cd6 <__swbuf_r+0x6e>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	07db      	lsls	r3, r3, #31
 8008cd0:	d5e1      	bpl.n	8008c96 <__swbuf_r+0x2e>
 8008cd2:	2e0a      	cmp	r6, #10
 8008cd4:	d1df      	bne.n	8008c96 <__swbuf_r+0x2e>
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	4628      	mov	r0, r5
 8008cda:	f7ff fdd3 	bl	8008884 <_fflush_r>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d0d9      	beq.n	8008c96 <__swbuf_r+0x2e>
 8008ce2:	e7d6      	b.n	8008c92 <__swbuf_r+0x2a>

08008ce4 <__swsetup_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4b29      	ldr	r3, [pc, #164]	@ (8008d8c <__swsetup_r+0xa8>)
 8008ce8:	4605      	mov	r5, r0
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	460c      	mov	r4, r1
 8008cee:	b118      	cbz	r0, 8008cf8 <__swsetup_r+0x14>
 8008cf0:	6a03      	ldr	r3, [r0, #32]
 8008cf2:	b90b      	cbnz	r3, 8008cf8 <__swsetup_r+0x14>
 8008cf4:	f7fe f976 	bl	8006fe4 <__sinit>
 8008cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cfc:	0719      	lsls	r1, r3, #28
 8008cfe:	d422      	bmi.n	8008d46 <__swsetup_r+0x62>
 8008d00:	06da      	lsls	r2, r3, #27
 8008d02:	d407      	bmi.n	8008d14 <__swsetup_r+0x30>
 8008d04:	2209      	movs	r2, #9
 8008d06:	602a      	str	r2, [r5, #0]
 8008d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d12:	e033      	b.n	8008d7c <__swsetup_r+0x98>
 8008d14:	0758      	lsls	r0, r3, #29
 8008d16:	d512      	bpl.n	8008d3e <__swsetup_r+0x5a>
 8008d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d1a:	b141      	cbz	r1, 8008d2e <__swsetup_r+0x4a>
 8008d1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d20:	4299      	cmp	r1, r3
 8008d22:	d002      	beq.n	8008d2a <__swsetup_r+0x46>
 8008d24:	4628      	mov	r0, r5
 8008d26:	f7ff f8af 	bl	8007e88 <_free_r>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d34:	81a3      	strh	r3, [r4, #12]
 8008d36:	2300      	movs	r3, #0
 8008d38:	6063      	str	r3, [r4, #4]
 8008d3a:	6923      	ldr	r3, [r4, #16]
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	f043 0308 	orr.w	r3, r3, #8
 8008d44:	81a3      	strh	r3, [r4, #12]
 8008d46:	6923      	ldr	r3, [r4, #16]
 8008d48:	b94b      	cbnz	r3, 8008d5e <__swsetup_r+0x7a>
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d54:	d003      	beq.n	8008d5e <__swsetup_r+0x7a>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f000 f883 	bl	8008e64 <__smakebuf_r>
 8008d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d62:	f013 0201 	ands.w	r2, r3, #1
 8008d66:	d00a      	beq.n	8008d7e <__swsetup_r+0x9a>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	60a2      	str	r2, [r4, #8]
 8008d6c:	6962      	ldr	r2, [r4, #20]
 8008d6e:	4252      	negs	r2, r2
 8008d70:	61a2      	str	r2, [r4, #24]
 8008d72:	6922      	ldr	r2, [r4, #16]
 8008d74:	b942      	cbnz	r2, 8008d88 <__swsetup_r+0xa4>
 8008d76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d7a:	d1c5      	bne.n	8008d08 <__swsetup_r+0x24>
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
 8008d7e:	0799      	lsls	r1, r3, #30
 8008d80:	bf58      	it	pl
 8008d82:	6962      	ldrpl	r2, [r4, #20]
 8008d84:	60a2      	str	r2, [r4, #8]
 8008d86:	e7f4      	b.n	8008d72 <__swsetup_r+0x8e>
 8008d88:	2000      	movs	r0, #0
 8008d8a:	e7f7      	b.n	8008d7c <__swsetup_r+0x98>
 8008d8c:	20000018 	.word	0x20000018

08008d90 <_raise_r>:
 8008d90:	291f      	cmp	r1, #31
 8008d92:	b538      	push	{r3, r4, r5, lr}
 8008d94:	4605      	mov	r5, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	d904      	bls.n	8008da4 <_raise_r+0x14>
 8008d9a:	2316      	movs	r3, #22
 8008d9c:	6003      	str	r3, [r0, #0]
 8008d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008da6:	b112      	cbz	r2, 8008dae <_raise_r+0x1e>
 8008da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dac:	b94b      	cbnz	r3, 8008dc2 <_raise_r+0x32>
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f830 	bl	8008e14 <_getpid_r>
 8008db4:	4622      	mov	r2, r4
 8008db6:	4601      	mov	r1, r0
 8008db8:	4628      	mov	r0, r5
 8008dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dbe:	f000 b817 	b.w	8008df0 <_kill_r>
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d00a      	beq.n	8008ddc <_raise_r+0x4c>
 8008dc6:	1c59      	adds	r1, r3, #1
 8008dc8:	d103      	bne.n	8008dd2 <_raise_r+0x42>
 8008dca:	2316      	movs	r3, #22
 8008dcc:	6003      	str	r3, [r0, #0]
 8008dce:	2001      	movs	r0, #1
 8008dd0:	e7e7      	b.n	8008da2 <_raise_r+0x12>
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008dd8:	4620      	mov	r0, r4
 8008dda:	4798      	blx	r3
 8008ddc:	2000      	movs	r0, #0
 8008dde:	e7e0      	b.n	8008da2 <_raise_r+0x12>

08008de0 <raise>:
 8008de0:	4b02      	ldr	r3, [pc, #8]	@ (8008dec <raise+0xc>)
 8008de2:	4601      	mov	r1, r0
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	f7ff bfd3 	b.w	8008d90 <_raise_r>
 8008dea:	bf00      	nop
 8008dec:	20000018 	.word	0x20000018

08008df0 <_kill_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4d07      	ldr	r5, [pc, #28]	@ (8008e10 <_kill_r+0x20>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	4604      	mov	r4, r0
 8008df8:	4608      	mov	r0, r1
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	f7f8 fc75 	bl	80016ec <_kill>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	d102      	bne.n	8008e0c <_kill_r+0x1c>
 8008e06:	682b      	ldr	r3, [r5, #0]
 8008e08:	b103      	cbz	r3, 8008e0c <_kill_r+0x1c>
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	bd38      	pop	{r3, r4, r5, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000484 	.word	0x20000484

08008e14 <_getpid_r>:
 8008e14:	f7f8 bc62 	b.w	80016dc <_getpid>

08008e18 <__swhatbuf_r>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e20:	2900      	cmp	r1, #0
 8008e22:	b096      	sub	sp, #88	@ 0x58
 8008e24:	4615      	mov	r5, r2
 8008e26:	461e      	mov	r6, r3
 8008e28:	da0d      	bge.n	8008e46 <__swhatbuf_r+0x2e>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e30:	f04f 0100 	mov.w	r1, #0
 8008e34:	bf14      	ite	ne
 8008e36:	2340      	movne	r3, #64	@ 0x40
 8008e38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	6031      	str	r1, [r6, #0]
 8008e40:	602b      	str	r3, [r5, #0]
 8008e42:	b016      	add	sp, #88	@ 0x58
 8008e44:	bd70      	pop	{r4, r5, r6, pc}
 8008e46:	466a      	mov	r2, sp
 8008e48:	f000 f848 	bl	8008edc <_fstat_r>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	dbec      	blt.n	8008e2a <__swhatbuf_r+0x12>
 8008e50:	9901      	ldr	r1, [sp, #4]
 8008e52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e5a:	4259      	negs	r1, r3
 8008e5c:	4159      	adcs	r1, r3
 8008e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e62:	e7eb      	b.n	8008e3c <__swhatbuf_r+0x24>

08008e64 <__smakebuf_r>:
 8008e64:	898b      	ldrh	r3, [r1, #12]
 8008e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e68:	079d      	lsls	r5, r3, #30
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	d507      	bpl.n	8008e80 <__smakebuf_r+0x1c>
 8008e70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	6123      	str	r3, [r4, #16]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	6163      	str	r3, [r4, #20]
 8008e7c:	b003      	add	sp, #12
 8008e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e80:	ab01      	add	r3, sp, #4
 8008e82:	466a      	mov	r2, sp
 8008e84:	f7ff ffc8 	bl	8008e18 <__swhatbuf_r>
 8008e88:	9f00      	ldr	r7, [sp, #0]
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f7ff f86e 	bl	8007f70 <_malloc_r>
 8008e94:	b948      	cbnz	r0, 8008eaa <__smakebuf_r+0x46>
 8008e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9a:	059a      	lsls	r2, r3, #22
 8008e9c:	d4ee      	bmi.n	8008e7c <__smakebuf_r+0x18>
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	f043 0302 	orr.w	r3, r3, #2
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	e7e2      	b.n	8008e70 <__smakebuf_r+0xc>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	6020      	str	r0, [r4, #0]
 8008eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb2:	81a3      	strh	r3, [r4, #12]
 8008eb4:	9b01      	ldr	r3, [sp, #4]
 8008eb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008eba:	b15b      	cbz	r3, 8008ed4 <__smakebuf_r+0x70>
 8008ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f000 f81d 	bl	8008f00 <_isatty_r>
 8008ec6:	b128      	cbz	r0, 8008ed4 <__smakebuf_r+0x70>
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	f023 0303 	bic.w	r3, r3, #3
 8008ece:	f043 0301 	orr.w	r3, r3, #1
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	431d      	orrs	r5, r3
 8008ed8:	81a5      	strh	r5, [r4, #12]
 8008eda:	e7cf      	b.n	8008e7c <__smakebuf_r+0x18>

08008edc <_fstat_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d07      	ldr	r5, [pc, #28]	@ (8008efc <_fstat_r+0x20>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	f7f8 fc5f 	bl	80017ac <_fstat>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d102      	bne.n	8008ef8 <_fstat_r+0x1c>
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	b103      	cbz	r3, 8008ef8 <_fstat_r+0x1c>
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	bd38      	pop	{r3, r4, r5, pc}
 8008efa:	bf00      	nop
 8008efc:	20000484 	.word	0x20000484

08008f00 <_isatty_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d06      	ldr	r5, [pc, #24]	@ (8008f1c <_isatty_r+0x1c>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	602b      	str	r3, [r5, #0]
 8008f0c:	f7f8 fc5e 	bl	80017cc <_isatty>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_isatty_r+0x1a>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_isatty_r+0x1a>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	20000484 	.word	0x20000484

08008f20 <_init>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr

08008f2c <_fini>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	bf00      	nop
 8008f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f32:	bc08      	pop	{r3}
 8008f34:	469e      	mov	lr, r3
 8008f36:	4770      	bx	lr
