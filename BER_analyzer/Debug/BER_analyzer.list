
BER_analyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f78  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005158  08005158  00006158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ec  080051ec  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f4  080051f4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f4  080051f4  000061f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051f8  080051f8  000061f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080051fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000005c  08005258  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08005258  000073c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012942  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246c  00000000  00000000  000199ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd9  00000000  00000000  0001cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026613  00000000  00000000  0001db81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f1e  00000000  00000000  00044194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbc6f  00000000  00000000  000570b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152d21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad8  00000000  00000000  00152d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0015783c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005140 	.word	0x08005140

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005140 	.word	0x08005140

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fbea 	bl	8000dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f86b 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f9bb 	bl	8000974 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fe:	f000 f98f 	bl	8000920 <MX_DMA_Init>
  MX_TIM2_Init();
 8000602:	f000 f8a5 	bl	8000750 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000606:	f000 f8f1 	bl	80007ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800060a:	f000 f93d 	bl	8000888 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t buff[11] = {0x0000, 0x0400, 0x0000, 0x0000, 0x0400, 0x0000, 0x0000, 0x0400, 0x0400, 0x0000, 0x0400};
 800060e:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <main+0xbc>)
 8000610:	463c      	mov	r4, r7
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0003 	ldmia.w	r5, {r0, r1}
 800061c:	6020      	str	r0, [r4, #0]
 800061e:	3404      	adds	r4, #4
 8000620:	8021      	strh	r1, [r4, #0]

  __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8000622:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <main+0xc0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	68da      	ldr	r2, [r3, #12]
 8000628:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <main+0xc0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000630:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim2);
 8000632:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <main+0xc0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <main+0xc0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f042 0201 	orr.w	r2, r2, #1
 8000640:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GPIOB->ODR = 0x0400;
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <main+0xc4>)
 8000644:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000648:	615a      	str	r2, [r3, #20]
	  HAL_DMA_Start(htim2.hdma[TIM_DMA_ID_UPDATE], (uint32_t)buff, (uint32_t)&GPIOB->ODR, 11);
 800064a:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <main+0xc0>)
 800064c:	6a18      	ldr	r0, [r3, #32]
 800064e:	4639      	mov	r1, r7
 8000650:	230b      	movs	r3, #11
 8000652:	4a18      	ldr	r2, [pc, #96]	@ (80006b4 <main+0xc8>)
 8000654:	f000 fde2 	bl	800121c <HAL_DMA_Start>
	  HAL_UART_Receive(&huart1, rx_data, 1, 150);
 8000658:	2396      	movs	r3, #150	@ 0x96
 800065a:	2201      	movs	r2, #1
 800065c:	4916      	ldr	r1, [pc, #88]	@ (80006b8 <main+0xcc>)
 800065e:	4817      	ldr	r0, [pc, #92]	@ (80006bc <main+0xd0>)
 8000660:	f002 fe2a 	bl	80032b8 <HAL_UART_Receive>

	  sprintf(tx_buffer, "%d", (uint8_t)rx_data[0]);
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <main+0xcc>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4915      	ldr	r1, [pc, #84]	@ (80006c0 <main+0xd4>)
 800066c:	4815      	ldr	r0, [pc, #84]	@ (80006c4 <main+0xd8>)
 800066e:	f004 f8c7 	bl	8004800 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, 15, 5);
 8000672:	2305      	movs	r3, #5
 8000674:	220f      	movs	r2, #15
 8000676:	4913      	ldr	r1, [pc, #76]	@ (80006c4 <main+0xd8>)
 8000678:	4813      	ldr	r0, [pc, #76]	@ (80006c8 <main+0xdc>)
 800067a:	f002 fd8f 	bl	800319c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (unsigned char *)"\n\r", 2 , 5);
 800067e:	2305      	movs	r3, #5
 8000680:	2202      	movs	r2, #2
 8000682:	4912      	ldr	r1, [pc, #72]	@ (80006cc <main+0xe0>)
 8000684:	4810      	ldr	r0, [pc, #64]	@ (80006c8 <main+0xdc>)
 8000686:	f002 fd89 	bl	800319c <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart2, rx_data, 1, 5);
 800068a:	2305      	movs	r3, #5
 800068c:	2201      	movs	r2, #1
 800068e:	490a      	ldr	r1, [pc, #40]	@ (80006b8 <main+0xcc>)
 8000690:	480d      	ldr	r0, [pc, #52]	@ (80006c8 <main+0xdc>)
 8000692:	f002 fd83 	bl	800319c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (unsigned char *)"\n\r", 2 , 5);
 8000696:	2305      	movs	r3, #5
 8000698:	2202      	movs	r2, #2
 800069a:	490c      	ldr	r1, [pc, #48]	@ (80006cc <main+0xe0>)
 800069c:	480a      	ldr	r0, [pc, #40]	@ (80006c8 <main+0xdc>)
 800069e:	f002 fd7d 	bl	800319c <HAL_UART_Transmit>
	  GPIOB->ODR = 0x0400;
 80006a2:	bf00      	nop
 80006a4:	e7cd      	b.n	8000642 <main+0x56>
 80006a6:	bf00      	nop
 80006a8:	08005160 	.word	0x08005160
 80006ac:	20000078 	.word	0x20000078
 80006b0:	48000400 	.word	0x48000400
 80006b4:	48000414 	.word	0x48000414
 80006b8:	2000026c 	.word	0x2000026c
 80006bc:	20000124 	.word	0x20000124
 80006c0:	08005158 	.word	0x08005158
 80006c4:	2000024c 	.word	0x2000024c
 80006c8:	200001b8 	.word	0x200001b8
 80006cc:	0800515c 	.word	0x0800515c

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	@ 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0318 	add.w	r3, r7, #24
 80006da:	2238      	movs	r2, #56	@ 0x38
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 f8b0 	bl	8004844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006f6:	f001 f97d 	bl	80019f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2340      	movs	r3, #64	@ 0x40
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000708:	2300      	movs	r3, #0
 800070a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0318 	add.w	r3, r7, #24
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fa23 	bl	8001b5c <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800071c:	f000 f98c 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000724:	2301      	movs	r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fd21 	bl	8002180 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000744:	f000 f978 	bl	8000a38 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	@ 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076e:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <MX_TIM2_Init+0x98>)
 8000770:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000774:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_TIM2_Init+0x98>)
 8000778:	220f      	movs	r2, #15
 800077a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_TIM2_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400;
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_TIM2_Init+0x98>)
 8000784:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_TIM2_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_TIM2_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000796:	4814      	ldr	r0, [pc, #80]	@ (80007e8 <MX_TIM2_Init+0x98>)
 8000798:	f002 f95c 	bl	8002a54 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007a2:	f000 f949 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <MX_TIM2_Init+0x98>)
 80007b4:	f002 f9a6 	bl	8002b04 <HAL_TIM_ConfigClockSource>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007be:	f000 f93b 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <MX_TIM2_Init+0x98>)
 80007d0:	f002 fbfe 	bl	8002fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007da:	f000 f92d 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000078 	.word	0x20000078

080007ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 80007f2:	4a24      	ldr	r2, [pc, #144]	@ (8000884 <MX_USART1_UART_Init+0x98>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2500;
 80007f6:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 80007f8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80007fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 8000800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000804:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 8000814:	220c      	movs	r2, #12
 8000816:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000824:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000836:	4812      	ldr	r0, [pc, #72]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 8000838:	f002 fc60 	bl	80030fc <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000842:	f000 f8f9 	bl	8000a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	480d      	ldr	r0, [pc, #52]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 800084a:	f003 ff0e 	bl	800466a <HAL_UARTEx_SetTxFifoThreshold>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000854:	f000 f8f0 	bl	8000a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	4809      	ldr	r0, [pc, #36]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 800085c:	f003 ff43 	bl	80046e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000866:	f000 f8e7 	bl	8000a38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_USART1_UART_Init+0x94>)
 800086c:	f003 fec4 	bl	80045f8 <HAL_UARTEx_DisableFifoMode>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000876:	f000 f8df 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000124 	.word	0x20000124
 8000884:	40013800 	.word	0x40013800

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	@ (800091c <MX_USART2_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008d2:	f002 fc13 	bl	80030fc <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f8ac 	bl	8000a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008e4:	f003 fec1 	bl	800466a <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 f8a3 	bl	8000a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 80008f6:	f003 fef6 	bl	80046e6 <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 f89a 	bl	8000a38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_USART2_UART_Init+0x90>)
 8000906:	f003 fe77 	bl	80045f8 <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f892 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200001b8 	.word	0x200001b8
 800091c:	40004400 	.word	0x40004400

08000920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_DMA_Init+0x50>)
 8000928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800092a:	4a11      	ldr	r2, [pc, #68]	@ (8000970 <MX_DMA_Init+0x50>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6493      	str	r3, [r2, #72]	@ 0x48
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_DMA_Init+0x50>)
 8000934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_DMA_Init+0x50>)
 8000940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000942:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <MX_DMA_Init+0x50>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6493      	str	r3, [r2, #72]	@ 0x48
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_DMA_Init+0x50>)
 800094c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	200b      	movs	r0, #11
 800095c:	f000 fb81 	bl	8001062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000960:	200b      	movs	r0, #11
 8000962:	f000 fb98 	bl	8001096 <HAL_NVIC_EnableIRQ>

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <MX_GPIO_Init+0xbc>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a28      	ldr	r2, [pc, #160]	@ (8000a30 <MX_GPIO_Init+0xbc>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_GPIO_Init+0xbc>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <MX_GPIO_Init+0xbc>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a22      	ldr	r2, [pc, #136]	@ (8000a30 <MX_GPIO_Init+0xbc>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <MX_GPIO_Init+0xbc>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <MX_GPIO_Init+0xbc>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <MX_GPIO_Init+0xbc>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_GPIO_Init+0xbc>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2120      	movs	r1, #32
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009da:	f000 fff3 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e4:	4813      	ldr	r0, [pc, #76]	@ (8000a34 <MX_GPIO_Init+0xc0>)
 80009e6:	f000 ffed 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009ea:	2320      	movs	r3, #32
 80009ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a04:	f000 fe5c 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_GPIO_Init+0xc0>)
 8000a22:	f000 fe4d 	bl	80016c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000400 	.word	0x48000400

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a66:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a7a:	f001 f85f 	bl	8001b3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a9c:	d136      	bne.n	8000b0c <HAL_TIM_Base_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <HAL_TIM_Base_MspInit+0x88>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b14 <HAL_TIM_Base_MspInit+0x88>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <HAL_TIM_Base_MspInit+0x88>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel1;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000ab8:	4a18      	ldr	r2, [pc, #96]	@ (8000b1c <HAL_TIM_Base_MspInit+0x90>)
 8000aba:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 8000abc:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000abe:	223c      	movs	r2, #60	@ 0x3c
 8000ac0:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000ad6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ada:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000ade:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ae2:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000af0:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000af2:	f000 faeb 	bl	80010cc <HAL_DMA_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000afc:	f7ff ff9c 	bl	8000a38 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000b04:	621a      	str	r2, [r3, #32]
 8000b06:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <HAL_TIM_Base_MspInit+0x8c>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	200000c4 	.word	0x200000c4
 8000b1c:	40020008 	.word	0x40020008

08000b20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0a0      	sub	sp, #128	@ 0x80
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	2254      	movs	r2, #84	@ 0x54
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 fe7f 	bl	8004844 <memset>
  if(huart->Instance==USART1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a41      	ldr	r2, [pc, #260]	@ (8000c50 <HAL_UART_MspInit+0x130>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d136      	bne.n	8000bbe <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 fd2b 	bl	80025b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b68:	f7ff ff66 	bl	8000a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6c:	4b39      	ldr	r3, [pc, #228]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b70:	4a38      	ldr	r2, [pc, #224]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b76:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b78:	4b36      	ldr	r3, [pc, #216]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	4b33      	ldr	r3, [pc, #204]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	4a32      	ldr	r2, [pc, #200]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b90:	4b30      	ldr	r3, [pc, #192]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b9c:	2330      	movs	r3, #48	@ 0x30
 8000b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bac:	2307      	movs	r3, #7
 8000bae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4828      	ldr	r0, [pc, #160]	@ (8000c58 <HAL_UART_MspInit+0x138>)
 8000bb8:	f000 fd82 	bl	80016c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bbc:	e043      	b.n	8000c46 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a26      	ldr	r2, [pc, #152]	@ (8000c5c <HAL_UART_MspInit+0x13c>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d13e      	bne.n	8000c46 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 fcef 	bl	80025b8 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8000be0:	f7ff ff2a 	bl	8000a38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bee:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_UART_MspInit+0x134>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c14:	230c      	movs	r3, #12
 8000c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c24:	2307      	movs	r3, #7
 8000c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c32:	f000 fd45 	bl	80016c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2026      	movs	r0, #38	@ 0x26
 8000c3c:	f000 fa11 	bl	8001062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c40:	2026      	movs	r0, #38	@ 0x26
 8000c42:	f000 fa28 	bl	8001096 <HAL_NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3780      	adds	r7, #128	@ 0x80
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40013800 	.word	0x40013800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	40004400 	.word	0x40004400

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <MemManage_Handler+0x4>

08000c78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb6:	f000 f8db 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <DMA1_Channel1_IRQHandler+0x10>)
 8000cc6:	f000 fbac 	bl	8001422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000c4 	.word	0x200000c4

08000cd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <USART2_IRQHandler+0x10>)
 8000cda:	f002 fbb5 	bl	8003448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001b8 	.word	0x200001b8

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	@ (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f003 fd9c 	bl	8004854 <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	@ (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20020000 	.word	0x20020000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	20000274 	.word	0x20000274
 8000d50:	200003c8 	.word	0x200003c8

08000d54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d78:	480d      	ldr	r0, [pc, #52]	@ (8000db0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff ffea 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	@ (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f003 fd5b 	bl	8004860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000daa:	f7ff fc1f 	bl	80005ec <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   r0, =_estack
 8000db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dbc:	080051fc 	.word	0x080051fc
  ldr r2, =_sbss
 8000dc0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dc4:	200003c4 	.word	0x200003c4

08000dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_2_IRQHandler>

08000dca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f939 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f000 f80e 	bl	8000dfc <HAL_InitTick>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	e001      	b.n	8000df0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dec:	f7ff fe2a 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df0:	79fb      	ldrb	r3, [r7, #7]

}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e08:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <HAL_InitTick+0x68>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d022      	beq.n	8000e56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_InitTick+0x6c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <HAL_InitTick+0x68>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f944 	bl	80010b2 <HAL_SYSTICK_Config>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10f      	bne.n	8000e50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	d809      	bhi.n	8000e4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e36:	2200      	movs	r2, #0
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3e:	f000 f910 	bl	8001062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_InitTick+0x70>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	e007      	b.n	8000e5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e004      	b.n	8000e5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e001      	b.n	8000e5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <HAL_IncTick+0x1c>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a03      	ldr	r2, [pc, #12]	@ (8000e8c <HAL_IncTick+0x1c>)
 8000e80:	6013      	str	r3, [r2, #0]
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	20000278 	.word	0x20000278
 8000e90:	20000008 	.word	0x20000008

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000278 	.word	0x20000278

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	@ (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	@ (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	@ (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	@ 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff29 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff40 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff90 	bl	8000fa0 <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5f 	bl	8000f4c <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff33 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa4 	bl	8001008 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e08d      	b.n	80011fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b47      	ldr	r3, [pc, #284]	@ (8001204 <HAL_DMA_Init+0x138>)
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d80f      	bhi.n	800110a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b45      	ldr	r3, [pc, #276]	@ (8001208 <HAL_DMA_Init+0x13c>)
 80010f2:	4413      	add	r3, r2
 80010f4:	4a45      	ldr	r2, [pc, #276]	@ (800120c <HAL_DMA_Init+0x140>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	009a      	lsls	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a42      	ldr	r2, [pc, #264]	@ (8001210 <HAL_DMA_Init+0x144>)
 8001106:	641a      	str	r2, [r3, #64]	@ 0x40
 8001108:	e00e      	b.n	8001128 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	4b40      	ldr	r3, [pc, #256]	@ (8001214 <HAL_DMA_Init+0x148>)
 8001112:	4413      	add	r3, r2
 8001114:	4a3d      	ldr	r2, [pc, #244]	@ (800120c <HAL_DMA_Init+0x140>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	009a      	lsls	r2, r3, #2
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a3c      	ldr	r2, [pc, #240]	@ (8001218 <HAL_DMA_Init+0x14c>)
 8001126:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2202      	movs	r2, #2
 800112c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800113e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001142:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800114c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001158:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001164:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 fa3e 	bl	80015fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001188:	d102      	bne.n	8001190 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d010      	beq.n	80011d0 <HAL_DMA_Init+0x104>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d80c      	bhi.n	80011d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fa5e 	bl	8001678 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	e008      	b.n	80011e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020407 	.word	0x40020407
 8001208:	bffdfff8 	.word	0xbffdfff8
 800120c:	cccccccd 	.word	0xcccccccd
 8001210:	40020000 	.word	0x40020000
 8001214:	bffdfbf8 	.word	0xbffdfbf8
 8001218:	40020400 	.word	0x40020400

0800121c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_DMA_Start+0x20>
 8001238:	2302      	movs	r3, #2
 800123a:	e02e      	b.n	800129a <HAL_DMA_Start+0x7e>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d11d      	bne.n	800128c <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 f983 	bl	8001580 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0201 	orr.w	r2, r2, #1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e005      	b.n	8001298 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8001294:	2302      	movs	r3, #2
 8001296:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001298:	7dfb      	ldrb	r3, [r7, #23]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b085      	sub	sp, #20
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d005      	beq.n	80012c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2204      	movs	r2, #4
 80012be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e037      	b.n	8001336 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 020e 	bic.w	r2, r2, #14
 80012d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f003 021f 	and.w	r2, r3, #31
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001312:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00c      	beq.n	8001336 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001326:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800132a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001334:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d00d      	beq.n	8001388 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2204      	movs	r2, #4
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	e047      	b.n	8001418 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 020e 	bic.w	r2, r2, #14
 8001396:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00c      	beq.n	80013f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
    }
  }
  return status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	2204      	movs	r2, #4
 8001444:	409a      	lsls	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d026      	beq.n	800149c <HAL_DMA_IRQHandler+0x7a>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d021      	beq.n	800149c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	2b00      	cmp	r3, #0
 8001464:	d107      	bne.n	8001476 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0204 	bic.w	r2, r2, #4
 8001474:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f003 021f 	and.w	r2, r3, #31
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	2104      	movs	r1, #4
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	2b00      	cmp	r3, #0
 8001490:	d071      	beq.n	8001576 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800149a:	e06c      	b.n	8001576 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	2202      	movs	r2, #2
 80014a6:	409a      	lsls	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d02e      	beq.n	800150e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d029      	beq.n	800150e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10b      	bne.n	80014e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020a 	bic.w	r2, r2, #10
 80014d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	2102      	movs	r1, #2
 80014ee:	fa01 f202 	lsl.w	r2, r1, r2
 80014f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d038      	beq.n	8001576 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800150c:	e033      	b.n	8001576 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	2208      	movs	r2, #8
 8001518:	409a      	lsls	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d02a      	beq.n	8001578 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b00      	cmp	r3, #0
 800152a:	d025      	beq.n	8001578 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 020e 	bic.w	r2, r2, #14
 800153a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f202 	lsl.w	r2, r1, r2
 800154e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001576:	bf00      	nop
 8001578:	bf00      	nop
}
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001596:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f003 021f 	and.w	r2, r3, #31
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d108      	bne.n	80015e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015de:	e007      	b.n	80015f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	60da      	str	r2, [r3, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800160c:	429a      	cmp	r2, r3
 800160e:	d802      	bhi.n	8001616 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e001      	b.n	800161a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001618:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	3b08      	subs	r3, #8
 8001626:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	009a      	lsls	r2, r3, #2
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4413      	add	r3, r2
 800163c:	461a      	mov	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001646:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	2201      	movs	r2, #1
 8001650:	409a      	lsls	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40020407 	.word	0x40020407
 8001668:	40020800 	.word	0x40020800
 800166c:	40020820 	.word	0x40020820
 8001670:	cccccccd 	.word	0xcccccccd
 8001674:	40020880 	.word	0x40020880

08001678 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a08      	ldr	r2, [pc, #32]	@ (80016bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800169a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2201      	movs	r2, #1
 80016a6:	409a      	lsls	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	1000823f 	.word	0x1000823f
 80016bc:	40020940 	.word	0x40020940

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016ce:	e15a      	b.n	8001986 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 814c 	beq.w	8001980 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d005      	beq.n	8001700 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d130      	bne.n	8001762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001736:	2201      	movs	r2, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f003 0201 	and.w	r2, r3, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b03      	cmp	r3, #3
 800176c:	d017      	beq.n	800179e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d123      	bne.n	80017f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	6939      	ldr	r1, [r7, #16]
 80017ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0203 	and.w	r2, r3, #3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80a6 	beq.w	8001980 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001834:	4b5b      	ldr	r3, [pc, #364]	@ (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001838:	4a5a      	ldr	r2, [pc, #360]	@ (80019a4 <HAL_GPIO_Init+0x2e4>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001840:	4b58      	ldr	r3, [pc, #352]	@ (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184c:	4a56      	ldr	r2, [pc, #344]	@ (80019a8 <HAL_GPIO_Init+0x2e8>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001876:	d01f      	beq.n	80018b8 <HAL_GPIO_Init+0x1f8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a4c      	ldr	r2, [pc, #304]	@ (80019ac <HAL_GPIO_Init+0x2ec>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d019      	beq.n	80018b4 <HAL_GPIO_Init+0x1f4>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a4b      	ldr	r2, [pc, #300]	@ (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d013      	beq.n	80018b0 <HAL_GPIO_Init+0x1f0>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a4a      	ldr	r2, [pc, #296]	@ (80019b4 <HAL_GPIO_Init+0x2f4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00d      	beq.n	80018ac <HAL_GPIO_Init+0x1ec>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a49      	ldr	r2, [pc, #292]	@ (80019b8 <HAL_GPIO_Init+0x2f8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d007      	beq.n	80018a8 <HAL_GPIO_Init+0x1e8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a48      	ldr	r2, [pc, #288]	@ (80019bc <HAL_GPIO_Init+0x2fc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d101      	bne.n	80018a4 <HAL_GPIO_Init+0x1e4>
 80018a0:	2305      	movs	r3, #5
 80018a2:	e00a      	b.n	80018ba <HAL_GPIO_Init+0x1fa>
 80018a4:	2306      	movs	r3, #6
 80018a6:	e008      	b.n	80018ba <HAL_GPIO_Init+0x1fa>
 80018a8:	2304      	movs	r3, #4
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x1fa>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e004      	b.n	80018ba <HAL_GPIO_Init+0x1fa>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x1fa>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_GPIO_Init+0x1fa>
 80018b8:	2300      	movs	r3, #0
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	f002 0203 	and.w	r2, r2, #3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ca:	4937      	ldr	r1, [pc, #220]	@ (80019a8 <HAL_GPIO_Init+0x2e8>)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d8:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <HAL_GPIO_Init+0x300>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018fc:	4a30      	ldr	r2, [pc, #192]	@ (80019c0 <HAL_GPIO_Init+0x300>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001902:	4b2f      	ldr	r3, [pc, #188]	@ (80019c0 <HAL_GPIO_Init+0x300>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001926:	4a26      	ldr	r2, [pc, #152]	@ (80019c0 <HAL_GPIO_Init+0x300>)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800192c:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <HAL_GPIO_Init+0x300>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <HAL_GPIO_Init+0x300>)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001956:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <HAL_GPIO_Init+0x300>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800197a:	4a11      	ldr	r2, [pc, #68]	@ (80019c0 <HAL_GPIO_Init+0x300>)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f ae9d 	bne.w	80016d0 <HAL_GPIO_Init+0x10>
  }
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	371c      	adds	r7, #28
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	48000400 	.word	0x48000400
 80019b0:	48000800 	.word	0x48000800
 80019b4:	48000c00 	.word	0x48000c00
 80019b8:	48001000 	.word	0x48001000
 80019bc:	48001400 	.word	0x48001400
 80019c0:	40010400 	.word	0x40010400

080019c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
 80019d0:	4613      	mov	r3, r2
 80019d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d4:	787b      	ldrb	r3, [r7, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d141      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a02:	4b4b      	ldr	r3, [pc, #300]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a0e:	d131      	bne.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a10:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a16:	4a46      	ldr	r2, [pc, #280]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	4b43      	ldr	r3, [pc, #268]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a28:	4a41      	ldr	r2, [pc, #260]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a30:	4b40      	ldr	r3, [pc, #256]	@ (8001b34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2232      	movs	r2, #50	@ 0x32
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a46:	e002      	b.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4e:	4b38      	ldr	r3, [pc, #224]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a5a:	d102      	bne.n	8001a62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f2      	bne.n	8001a48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a62:	4b33      	ldr	r3, [pc, #204]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6e:	d158      	bne.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e057      	b.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a74:	4b2e      	ldr	r3, [pc, #184]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a84:	e04d      	b.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a8c:	d141      	bne.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a8e:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a9a:	d131      	bne.n	8001b00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a9c:	4b24      	ldr	r3, [pc, #144]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aa2:	4a23      	ldr	r2, [pc, #140]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aac:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2232      	movs	r2, #50	@ 0x32
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	0c9b      	lsrs	r3, r3, #18
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad2:	e002      	b.n	8001ada <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ae6:	d102      	bne.n	8001aee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f2      	bne.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aee:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001afa:	d112      	bne.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e011      	b.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b10:	e007      	b.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b1a:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	40007000 	.word	0x40007000
 8001b34:	20000000 	.word	0x20000000
 8001b38:	431bde83 	.word	0x431bde83

08001b3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b4a:	6093      	str	r3, [r2, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40007000 	.word	0x40007000

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e2fe      	b.n	800216c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d075      	beq.n	8001c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7a:	4b97      	ldr	r3, [pc, #604]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b84:	4b94      	ldr	r3, [pc, #592]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3e>
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d002      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x44>
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d10b      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	4b8d      	ldr	r3, [pc, #564]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d05b      	beq.n	8001c64 <HAL_RCC_OscConfig+0x108>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d157      	bne.n	8001c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e2d9      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc0:	d106      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x74>
 8001bc2:	4b85      	ldr	r3, [pc, #532]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a84      	ldr	r2, [pc, #528]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0xb0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x98>
 8001bda:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7e      	ldr	r2, [pc, #504]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a7b      	ldr	r2, [pc, #492]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xb0>
 8001bf4:	4b78      	ldr	r3, [pc, #480]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a77      	ldr	r2, [pc, #476]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b75      	ldr	r3, [pc, #468]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a74      	ldr	r2, [pc, #464]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f93e 	bl	8000e94 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff f93a 	bl	8000e94 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	@ 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e29e      	b.n	800216c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0xc0>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f92a 	bl	8000e94 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff f926 	bl	8000e94 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	@ 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e28a      	b.n	800216c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c56:	4b60      	ldr	r3, [pc, #384]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0xe8>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d075      	beq.n	8001d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c72:	4b59      	ldr	r3, [pc, #356]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c7c:	4b56      	ldr	r3, [pc, #344]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d102      	bne.n	8001c92 <HAL_RCC_OscConfig+0x136>
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d002      	beq.n	8001c98 <HAL_RCC_OscConfig+0x13c>
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d11f      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c98:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x154>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e25d      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb0:	4b49      	ldr	r3, [pc, #292]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	061b      	lsls	r3, r3, #24
 8001cbe:	4946      	ldr	r1, [pc, #280]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cc4:	4b45      	ldr	r3, [pc, #276]	@ (8001ddc <HAL_RCC_OscConfig+0x280>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f897 	bl	8000dfc <HAL_InitTick>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d043      	beq.n	8001d5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e249      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d023      	beq.n	8001d28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff f8d2 	bl	8000e94 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff f8ce 	bl	8000e94 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e232      	b.n	800216c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d06:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b31      	ldr	r3, [pc, #196]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	061b      	lsls	r3, r3, #24
 8001d20:	492d      	ldr	r1, [pc, #180]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
 8001d26:	e01a      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d28:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f8ae 	bl	8000e94 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff f8aa 	bl	8000e94 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e20e      	b.n	800216c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d4e:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1e0>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d041      	beq.n	8001dee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01c      	beq.n	8001dac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d78:	4a17      	ldr	r2, [pc, #92]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7ff f887 	bl	8000e94 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7ff f883 	bl	8000e94 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1e7      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0ef      	beq.n	8001d8a <HAL_RCC_OscConfig+0x22e>
 8001daa:	e020      	b.n	8001dee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dac:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db2:	4a09      	ldr	r2, [pc, #36]	@ (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff f86a 	bl	8000e94 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc2:	e00d      	b.n	8001de0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f866 	bl	8000e94 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d906      	bls.n	8001de0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1ca      	b.n	800216c <HAL_RCC_OscConfig+0x610>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de0:	4b8c      	ldr	r3, [pc, #560]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ea      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80a6 	beq.w	8001f48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e00:	4b84      	ldr	r3, [pc, #528]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2b4>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x2b6>
 8001e10:	2300      	movs	r3, #0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b7f      	ldr	r3, [pc, #508]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e22:	4b7c      	ldr	r3, [pc, #496]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e32:	4b79      	ldr	r3, [pc, #484]	@ (8002018 <HAL_RCC_OscConfig+0x4bc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e3e:	4b76      	ldr	r3, [pc, #472]	@ (8002018 <HAL_RCC_OscConfig+0x4bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a75      	ldr	r2, [pc, #468]	@ (8002018 <HAL_RCC_OscConfig+0x4bc>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f823 	bl	8000e94 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff f81f 	bl	8000e94 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e183      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e64:	4b6c      	ldr	r3, [pc, #432]	@ (8002018 <HAL_RCC_OscConfig+0x4bc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d108      	bne.n	8001e8a <HAL_RCC_OscConfig+0x32e>
 8001e78:	4b66      	ldr	r3, [pc, #408]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7e:	4a65      	ldr	r2, [pc, #404]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e88:	e024      	b.n	8001ed4 <HAL_RCC_OscConfig+0x378>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d110      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x358>
 8001e92:	4b60      	ldr	r3, [pc, #384]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e98:	4a5e      	ldr	r2, [pc, #376]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea8:	4a5a      	ldr	r2, [pc, #360]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb2:	e00f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x378>
 8001eb4:	4b57      	ldr	r3, [pc, #348]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eba:	4a56      	ldr	r2, [pc, #344]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec4:	4b53      	ldr	r3, [pc, #332]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eca:	4a52      	ldr	r2, [pc, #328]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d016      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7fe ffda 	bl	8000e94 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7fe ffd6 	bl	8000e94 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e138      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efa:	4b46      	ldr	r3, [pc, #280]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ed      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x388>
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7fe ffc3 	bl	8000e94 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7fe ffbf 	bl	8000e94 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e121      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f28:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ed      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3c:	4b35      	ldr	r3, [pc, #212]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	4a34      	ldr	r2, [pc, #208]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d03c      	beq.n	8001fce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f62:	4a2c      	ldr	r2, [pc, #176]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7fe ff92 	bl	8000e94 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f74:	f7fe ff8e 	bl	8000e94 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0f2      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f86:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ef      	beq.n	8001f74 <HAL_RCC_OscConfig+0x418>
 8001f94:	e01b      	b.n	8001fce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f96:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7fe ff75 	bl	8000e94 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fae:	f7fe ff71 	bl	8000e94 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0d5      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fc0:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ef      	bne.n	8001fae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80c9 	beq.w	800216a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	f000 8083 	beq.w	80020ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d15e      	bne.n	80020ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7fe ff4b 	bl	8000e94 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	e00c      	b.n	800201c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7fe ff47 	bl	8000e94 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d905      	bls.n	800201c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0ab      	b.n	800216c <HAL_RCC_OscConfig+0x610>
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201c:	4b55      	ldr	r3, [pc, #340]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ec      	bne.n	8002002 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002028:	4b52      	ldr	r3, [pc, #328]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4b52      	ldr	r3, [pc, #328]	@ (8002178 <HAL_RCC_OscConfig+0x61c>)
 800202e:	4013      	ands	r3, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6a11      	ldr	r1, [r2, #32]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002038:	3a01      	subs	r2, #1
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002042:	0212      	lsls	r2, r2, #8
 8002044:	4311      	orrs	r1, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800204a:	0852      	lsrs	r2, r2, #1
 800204c:	3a01      	subs	r2, #1
 800204e:	0552      	lsls	r2, r2, #21
 8002050:	4311      	orrs	r1, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002056:	0852      	lsrs	r2, r2, #1
 8002058:	3a01      	subs	r2, #1
 800205a:	0652      	lsls	r2, r2, #25
 800205c:	4311      	orrs	r1, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002062:	06d2      	lsls	r2, r2, #27
 8002064:	430a      	orrs	r2, r1
 8002066:	4943      	ldr	r1, [pc, #268]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 8002068:	4313      	orrs	r3, r2
 800206a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206c:	4b41      	ldr	r3, [pc, #260]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a40      	ldr	r2, [pc, #256]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 8002072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002078:	4b3e      	ldr	r3, [pc, #248]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a3d      	ldr	r2, [pc, #244]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002082:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe ff06 	bl	8000e94 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe ff02 	bl	8000e94 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e066      	b.n	800216c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	4b35      	ldr	r3, [pc, #212]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x530>
 80020aa:	e05e      	b.n	800216a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b31      	ldr	r3, [pc, #196]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a30      	ldr	r2, [pc, #192]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 80020b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe feec 	bl	8000e94 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fee8 	bl	8000e94 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e04c      	b.n	800216c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d2:	4b28      	ldr	r3, [pc, #160]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020de:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4924      	ldr	r1, [pc, #144]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 80020e4:	4b25      	ldr	r3, [pc, #148]	@ (800217c <HAL_RCC_OscConfig+0x620>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	60cb      	str	r3, [r1, #12]
 80020ea:	e03e      	b.n	800216a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e039      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002174 <HAL_RCC_OscConfig+0x618>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	429a      	cmp	r2, r3
 800210a:	d12c      	bne.n	8002166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	3b01      	subs	r3, #1
 8002118:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d123      	bne.n	8002166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d11b      	bne.n	8002166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d113      	bne.n	8002166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	3b01      	subs	r3, #1
 800214c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d109      	bne.n	8002166 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	3b01      	subs	r3, #1
 8002160:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	019f800c 	.word	0x019f800c
 800217c:	feeefffc 	.word	0xfeeefffc

08002180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e11e      	b.n	80023d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b91      	ldr	r3, [pc, #580]	@ (80023e0 <HAL_RCC_ClockConfig+0x260>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b8e      	ldr	r3, [pc, #568]	@ (80023e0 <HAL_RCC_ClockConfig+0x260>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 020f 	bic.w	r2, r3, #15
 80021ae:	498c      	ldr	r1, [pc, #560]	@ (80023e0 <HAL_RCC_ClockConfig+0x260>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b8a      	ldr	r3, [pc, #552]	@ (80023e0 <HAL_RCC_ClockConfig+0x260>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e106      	b.n	80023d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d073      	beq.n	80022bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d129      	bne.n	8002230 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021dc:	4b81      	ldr	r3, [pc, #516]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0f4      	b.n	80023d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021ec:	f000 f99e 	bl	800252c <RCC_GetSysClockFreqFromPLLSource>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4a7c      	ldr	r2, [pc, #496]	@ (80023e8 <HAL_RCC_ClockConfig+0x268>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d93f      	bls.n	800227a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021fa:	4b7a      	ldr	r3, [pc, #488]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800220e:	2b00      	cmp	r3, #0
 8002210:	d033      	beq.n	800227a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	d12f      	bne.n	800227a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800221a:	4b72      	ldr	r3, [pc, #456]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002222:	4a70      	ldr	r2, [pc, #448]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 8002224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002228:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e024      	b.n	800227a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d107      	bne.n	8002248 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002238:	4b6a      	ldr	r3, [pc, #424]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0c6      	b.n	80023d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002248:	4b66      	ldr	r3, [pc, #408]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0be      	b.n	80023d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002258:	f000 f8ce 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 800225c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4a61      	ldr	r2, [pc, #388]	@ (80023e8 <HAL_RCC_ClockConfig+0x268>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d909      	bls.n	800227a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002266:	4b5f      	ldr	r3, [pc, #380]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800226e:	4a5d      	ldr	r2, [pc, #372]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 8002270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002274:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002276:	2380      	movs	r3, #128	@ 0x80
 8002278:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800227a:	4b5a      	ldr	r3, [pc, #360]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f023 0203 	bic.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4957      	ldr	r1, [pc, #348]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228c:	f7fe fe02 	bl	8000e94 <HAL_GetTick>
 8002290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	e00a      	b.n	80022aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002294:	f7fe fdfe 	bl	8000e94 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e095      	b.n	80023d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	4b4e      	ldr	r3, [pc, #312]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 020c 	and.w	r2, r3, #12
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d1eb      	bne.n	8002294 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b43      	ldr	r3, [pc, #268]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a42      	ldr	r2, [pc, #264]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 80022da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022ec:	4b3d      	ldr	r3, [pc, #244]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80022f4:	4a3b      	ldr	r2, [pc, #236]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 80022f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4936      	ldr	r1, [pc, #216]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
 800230e:	e008      	b.n	8002322 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b80      	cmp	r3, #128	@ 0x80
 8002314:	d105      	bne.n	8002322 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002316:	4b33      	ldr	r3, [pc, #204]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4a32      	ldr	r2, [pc, #200]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 800231c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002320:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002322:	4b2f      	ldr	r3, [pc, #188]	@ (80023e0 <HAL_RCC_ClockConfig+0x260>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d21d      	bcs.n	800236c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002330:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <HAL_RCC_ClockConfig+0x260>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 020f 	bic.w	r2, r3, #15
 8002338:	4929      	ldr	r1, [pc, #164]	@ (80023e0 <HAL_RCC_ClockConfig+0x260>)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002340:	f7fe fda8 	bl	8000e94 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7fe fda4 	bl	8000e94 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e03b      	b.n	80023d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b20      	ldr	r3, [pc, #128]	@ (80023e0 <HAL_RCC_ClockConfig+0x260>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d1ed      	bne.n	8002348 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4917      	ldr	r1, [pc, #92]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002396:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	490f      	ldr	r1, [pc, #60]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023aa:	f000 f825 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <HAL_RCC_ClockConfig+0x264>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490c      	ldr	r1, [pc, #48]	@ (80023ec <HAL_RCC_ClockConfig+0x26c>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <HAL_RCC_ClockConfig+0x270>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_RCC_ClockConfig+0x274>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fd14 	bl	8000dfc <HAL_InitTick>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	04c4b400 	.word	0x04c4b400
 80023ec:	08005178 	.word	0x08005178
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023fe:	4b2c      	ldr	r3, [pc, #176]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b04      	cmp	r3, #4
 8002408:	d102      	bne.n	8002410 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800240a:	4b2a      	ldr	r3, [pc, #168]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	e047      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002410:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d102      	bne.n	8002422 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800241c:	4b26      	ldr	r3, [pc, #152]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	e03e      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002422:	4b23      	ldr	r3, [pc, #140]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d136      	bne.n	800249c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002438:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3301      	adds	r3, #1
 8002444:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d10c      	bne.n	8002466 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800244c:	4a1a      	ldr	r2, [pc, #104]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	4a16      	ldr	r2, [pc, #88]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002456:	68d2      	ldr	r2, [r2, #12]
 8002458:	0a12      	lsrs	r2, r2, #8
 800245a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
      break;
 8002464:	e00c      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002466:	4a13      	ldr	r2, [pc, #76]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4a10      	ldr	r2, [pc, #64]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002470:	68d2      	ldr	r2, [r2, #12]
 8002472:	0a12      	lsrs	r2, r2, #8
 8002474:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
      break;
 800247e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002480:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0e5b      	lsrs	r3, r3, #25
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	3301      	adds	r3, #1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	e001      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024a0:	693b      	ldr	r3, [r7, #16]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	00f42400 	.word	0x00f42400
 80024b8:	007a1200 	.word	0x007a1200

080024bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c0:	4b03      	ldr	r3, [pc, #12]	@ (80024d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000000 	.word	0x20000000

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024d8:	f7ff fff0 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4904      	ldr	r1, [pc, #16]	@ (80024fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	08005188 	.word	0x08005188

08002500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002504:	f7ff ffda 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	0adb      	lsrs	r3, r3, #11
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	4904      	ldr	r1, [pc, #16]	@ (8002528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	08005188 	.word	0x08005188

0800252c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002532:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	3301      	adds	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d10c      	bne.n	800256a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002550:	4a17      	ldr	r2, [pc, #92]	@ (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800255a:	68d2      	ldr	r2, [r2, #12]
 800255c:	0a12      	lsrs	r2, r2, #8
 800255e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
    break;
 8002568:	e00c      	b.n	8002584 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800256a:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	4a0e      	ldr	r2, [pc, #56]	@ (80025ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002574:	68d2      	ldr	r2, [r2, #12]
 8002576:	0a12      	lsrs	r2, r2, #8
 8002578:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800257c:	fb02 f303 	mul.w	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
    break;
 8002582:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0e5b      	lsrs	r3, r3, #25
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	3301      	adds	r3, #1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800259e:	687b      	ldr	r3, [r7, #4]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40021000 	.word	0x40021000
 80025b0:	007a1200 	.word	0x007a1200
 80025b4:	00f42400 	.word	0x00f42400

080025b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c0:	2300      	movs	r3, #0
 80025c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c4:	2300      	movs	r3, #0
 80025c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8098 	beq.w	8002706 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025da:	4b43      	ldr	r3, [pc, #268]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10d      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b40      	ldr	r3, [pc, #256]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ea:	4a3f      	ldr	r2, [pc, #252]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f2:	4b3d      	ldr	r3, [pc, #244]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fe:	2301      	movs	r3, #1
 8002600:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002602:	4b3a      	ldr	r3, [pc, #232]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a39      	ldr	r2, [pc, #228]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800260c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800260e:	f7fe fc41 	bl	8000e94 <HAL_GetTick>
 8002612:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002614:	e009      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002616:	f7fe fc3d 	bl	8000e94 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d902      	bls.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	74fb      	strb	r3, [r7, #19]
        break;
 8002628:	e005      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800262a:	4b30      	ldr	r3, [pc, #192]	@ (80026ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ef      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d159      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800263c:	4b2a      	ldr	r3, [pc, #168]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002646:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01e      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	429a      	cmp	r2, r3
 8002656:	d019      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002658:	4b23      	ldr	r3, [pc, #140]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002662:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002664:	4b20      	ldr	r3, [pc, #128]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266a:	4a1f      	ldr	r2, [pc, #124]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002674:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267a:	4a1b      	ldr	r2, [pc, #108]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002684:	4a18      	ldr	r2, [pc, #96]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fe fbfd 	bl	8000e94 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269c:	e00b      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fbf9 	bl	8000e94 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d902      	bls.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	74fb      	strb	r3, [r7, #19]
            break;
 80026b4:	e006      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b6:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ec      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10b      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ca:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d8:	4903      	ldr	r1, [pc, #12]	@ (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026e0:	e008      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	74bb      	strb	r3, [r7, #18]
 80026e6:	e005      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f4:	7c7b      	ldrb	r3, [r7, #17]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4ba7      	ldr	r3, [pc, #668]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	4aa6      	ldr	r2, [pc, #664]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002704:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002712:	4ba1      	ldr	r3, [pc, #644]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002718:	f023 0203 	bic.w	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	499d      	ldr	r1, [pc, #628]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002734:	4b98      	ldr	r3, [pc, #608]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273a:	f023 020c 	bic.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4995      	ldr	r1, [pc, #596]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002756:	4b90      	ldr	r3, [pc, #576]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	498c      	ldr	r1, [pc, #560]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002778:	4b87      	ldr	r3, [pc, #540]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	4984      	ldr	r1, [pc, #528]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800279a:	4b7f      	ldr	r3, [pc, #508]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	497b      	ldr	r1, [pc, #492]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027bc:	4b76      	ldr	r3, [pc, #472]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	4973      	ldr	r1, [pc, #460]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027de:	4b6e      	ldr	r3, [pc, #440]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	496a      	ldr	r1, [pc, #424]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002800:	4b65      	ldr	r3, [pc, #404]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002806:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4962      	ldr	r1, [pc, #392]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002822:	4b5d      	ldr	r3, [pc, #372]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002828:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	4959      	ldr	r1, [pc, #356]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002844:	4b54      	ldr	r3, [pc, #336]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002846:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002852:	4951      	ldr	r1, [pc, #324]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002866:	4b4c      	ldr	r3, [pc, #304]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	4948      	ldr	r1, [pc, #288]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002888:	4b43      	ldr	r3, [pc, #268]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	4940      	ldr	r1, [pc, #256]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028b2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d015      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028c0:	4b35      	ldr	r3, [pc, #212]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ce:	4932      	ldr	r1, [pc, #200]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028f8:	4b27      	ldr	r3, [pc, #156]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	4924      	ldr	r1, [pc, #144]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002916:	d105      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002918:	4b1f      	ldr	r3, [pc, #124]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a1e      	ldr	r2, [pc, #120]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002922:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002936:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293e:	4916      	ldr	r1, [pc, #88]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800294e:	d105      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a10      	ldr	r2, [pc, #64]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800295a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d019      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002968:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	4908      	ldr	r1, [pc, #32]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002986:	d109      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a02      	ldr	r2, [pc, #8]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002992:	60d3      	str	r3, [r2, #12]
 8002994:	e002      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d015      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029a8:	4b29      	ldr	r3, [pc, #164]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	4926      	ldr	r1, [pc, #152]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029c8:	4b21      	ldr	r3, [pc, #132]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a20      	ldr	r2, [pc, #128]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d015      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ee:	4918      	ldr	r1, [pc, #96]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029fe:	d105      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a00:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a12      	ldr	r2, [pc, #72]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a18:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a26:	490a      	ldr	r1, [pc, #40]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a36:	d105      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a44:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000

08002a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e049      	b.n	8002afa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe f806 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f000 f94c 	bl	8002d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_TIM_ConfigClockSource+0x1c>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e0f6      	b.n	8002d0e <HAL_TIM_ConfigClockSource+0x20a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002b3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a6f      	ldr	r2, [pc, #444]	@ (8002d18 <HAL_TIM_ConfigClockSource+0x214>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	f000 80c1 	beq.w	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002b60:	4a6d      	ldr	r2, [pc, #436]	@ (8002d18 <HAL_TIM_ConfigClockSource+0x214>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	f200 80c6 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002b68:	4a6c      	ldr	r2, [pc, #432]	@ (8002d1c <HAL_TIM_ConfigClockSource+0x218>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	f000 80b9 	beq.w	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002b70:	4a6a      	ldr	r2, [pc, #424]	@ (8002d1c <HAL_TIM_ConfigClockSource+0x218>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	f200 80be 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002b78:	4a69      	ldr	r2, [pc, #420]	@ (8002d20 <HAL_TIM_ConfigClockSource+0x21c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	f000 80b1 	beq.w	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002b80:	4a67      	ldr	r2, [pc, #412]	@ (8002d20 <HAL_TIM_ConfigClockSource+0x21c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	f200 80b6 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002b88:	4a66      	ldr	r2, [pc, #408]	@ (8002d24 <HAL_TIM_ConfigClockSource+0x220>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	f000 80a9 	beq.w	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002b90:	4a64      	ldr	r2, [pc, #400]	@ (8002d24 <HAL_TIM_ConfigClockSource+0x220>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f200 80ae 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002b98:	4a63      	ldr	r2, [pc, #396]	@ (8002d28 <HAL_TIM_ConfigClockSource+0x224>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	f000 80a1 	beq.w	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002ba0:	4a61      	ldr	r2, [pc, #388]	@ (8002d28 <HAL_TIM_ConfigClockSource+0x224>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	f200 80a6 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002ba8:	4a60      	ldr	r2, [pc, #384]	@ (8002d2c <HAL_TIM_ConfigClockSource+0x228>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	f000 8099 	beq.w	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002bb0:	4a5e      	ldr	r2, [pc, #376]	@ (8002d2c <HAL_TIM_ConfigClockSource+0x228>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	f200 809e 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bb8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002bbc:	f000 8091 	beq.w	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002bc0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002bc4:	f200 8096 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bcc:	f000 8089 	beq.w	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002bd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bd4:	f200 808e 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bdc:	d03e      	beq.n	8002c5c <HAL_TIM_ConfigClockSource+0x158>
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be2:	f200 8087 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bea:	f000 8086 	beq.w	8002cfa <HAL_TIM_ConfigClockSource+0x1f6>
 8002bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf2:	d87f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bf4:	2b70      	cmp	r3, #112	@ 0x70
 8002bf6:	d01a      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x12a>
 8002bf8:	2b70      	cmp	r3, #112	@ 0x70
 8002bfa:	d87b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002bfc:	2b60      	cmp	r3, #96	@ 0x60
 8002bfe:	d050      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x19e>
 8002c00:	2b60      	cmp	r3, #96	@ 0x60
 8002c02:	d877      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c04:	2b50      	cmp	r3, #80	@ 0x50
 8002c06:	d03c      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0x17e>
 8002c08:	2b50      	cmp	r3, #80	@ 0x50
 8002c0a:	d873      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c0c:	2b40      	cmp	r3, #64	@ 0x40
 8002c0e:	d058      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x1be>
 8002c10:	2b40      	cmp	r3, #64	@ 0x40
 8002c12:	d86f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c14:	2b30      	cmp	r3, #48	@ 0x30
 8002c16:	d064      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002c18:	2b30      	cmp	r3, #48	@ 0x30
 8002c1a:	d86b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d060      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d867      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d05a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x1de>
 8002c2c:	e062      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c3e:	f000 f9a7 	bl	8002f90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	609a      	str	r2, [r3, #8]
      break;
 8002c5a:	e04f      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c6c:	f000 f990 	bl	8002f90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c7e:	609a      	str	r2, [r3, #8]
      break;
 8002c80:	e03c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 f902 	bl	8002e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2150      	movs	r1, #80	@ 0x50
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f95b 	bl	8002f56 <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e02c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 f921 	bl	8002ef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2160      	movs	r1, #96	@ 0x60
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f94b 	bl	8002f56 <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e01c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 f8e2 	bl	8002e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2140      	movs	r1, #64	@ 0x40
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f93b 	bl	8002f56 <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e00c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f000 f932 	bl	8002f56 <TIM_ITRx_SetConfig>
      break;
 8002cf2:	e003      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf8:	e000      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	00100070 	.word	0x00100070
 8002d1c:	00100060 	.word	0x00100060
 8002d20:	00100050 	.word	0x00100050
 8002d24:	00100040 	.word	0x00100040
 8002d28:	00100030 	.word	0x00100030
 8002d2c:	00100020 	.word	0x00100020

08002d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a4c      	ldr	r2, [pc, #304]	@ (8002e74 <TIM_Base_SetConfig+0x144>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d017      	beq.n	8002d78 <TIM_Base_SetConfig+0x48>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4e:	d013      	beq.n	8002d78 <TIM_Base_SetConfig+0x48>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a49      	ldr	r2, [pc, #292]	@ (8002e78 <TIM_Base_SetConfig+0x148>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00f      	beq.n	8002d78 <TIM_Base_SetConfig+0x48>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a48      	ldr	r2, [pc, #288]	@ (8002e7c <TIM_Base_SetConfig+0x14c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <TIM_Base_SetConfig+0x48>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a47      	ldr	r2, [pc, #284]	@ (8002e80 <TIM_Base_SetConfig+0x150>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <TIM_Base_SetConfig+0x48>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a46      	ldr	r2, [pc, #280]	@ (8002e84 <TIM_Base_SetConfig+0x154>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_Base_SetConfig+0x48>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a45      	ldr	r2, [pc, #276]	@ (8002e88 <TIM_Base_SetConfig+0x158>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d108      	bne.n	8002d8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a39      	ldr	r2, [pc, #228]	@ (8002e74 <TIM_Base_SetConfig+0x144>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d023      	beq.n	8002dda <TIM_Base_SetConfig+0xaa>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d98:	d01f      	beq.n	8002dda <TIM_Base_SetConfig+0xaa>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a36      	ldr	r2, [pc, #216]	@ (8002e78 <TIM_Base_SetConfig+0x148>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01b      	beq.n	8002dda <TIM_Base_SetConfig+0xaa>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a35      	ldr	r2, [pc, #212]	@ (8002e7c <TIM_Base_SetConfig+0x14c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d017      	beq.n	8002dda <TIM_Base_SetConfig+0xaa>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a34      	ldr	r2, [pc, #208]	@ (8002e80 <TIM_Base_SetConfig+0x150>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <TIM_Base_SetConfig+0xaa>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a33      	ldr	r2, [pc, #204]	@ (8002e84 <TIM_Base_SetConfig+0x154>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00f      	beq.n	8002dda <TIM_Base_SetConfig+0xaa>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a33      	ldr	r2, [pc, #204]	@ (8002e8c <TIM_Base_SetConfig+0x15c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <TIM_Base_SetConfig+0xaa>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a32      	ldr	r2, [pc, #200]	@ (8002e90 <TIM_Base_SetConfig+0x160>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <TIM_Base_SetConfig+0xaa>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a31      	ldr	r2, [pc, #196]	@ (8002e94 <TIM_Base_SetConfig+0x164>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0xaa>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002e88 <TIM_Base_SetConfig+0x158>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a18      	ldr	r2, [pc, #96]	@ (8002e74 <TIM_Base_SetConfig+0x144>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <TIM_Base_SetConfig+0x110>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e84 <TIM_Base_SetConfig+0x154>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00f      	beq.n	8002e40 <TIM_Base_SetConfig+0x110>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a1a      	ldr	r2, [pc, #104]	@ (8002e8c <TIM_Base_SetConfig+0x15c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <TIM_Base_SetConfig+0x110>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a19      	ldr	r2, [pc, #100]	@ (8002e90 <TIM_Base_SetConfig+0x160>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <TIM_Base_SetConfig+0x110>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a18      	ldr	r2, [pc, #96]	@ (8002e94 <TIM_Base_SetConfig+0x164>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_Base_SetConfig+0x110>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a13      	ldr	r2, [pc, #76]	@ (8002e88 <TIM_Base_SetConfig+0x158>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d103      	bne.n	8002e48 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f023 0201 	bic.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	611a      	str	r2, [r3, #16]
  }
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40012c00 	.word	0x40012c00
 8002e78:	40000400 	.word	0x40000400
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	40000c00 	.word	0x40000c00
 8002e84:	40013400 	.word	0x40013400
 8002e88:	40015000 	.word	0x40015000
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40014400 	.word	0x40014400
 8002e94:	40014800 	.word	0x40014800

08002e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f023 0201 	bic.w	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f023 030a 	bic.w	r3, r3, #10
 8002ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	621a      	str	r2, [r3, #32]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b087      	sub	sp, #28
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f023 0210 	bic.w	r2, r3, #16
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	031b      	lsls	r3, r3, #12
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f043 0307 	orr.w	r3, r3, #7
 8002f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	021a      	lsls	r2, r3, #8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e074      	b.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a34      	ldr	r2, [pc, #208]	@ (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d009      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a33      	ldr	r2, [pc, #204]	@ (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a31      	ldr	r2, [pc, #196]	@ (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d108      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800302c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800303e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a21      	ldr	r2, [pc, #132]	@ (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003068:	d01d      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1f      	ldr	r2, [pc, #124]	@ (80030ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1c      	ldr	r2, [pc, #112]	@ (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a15      	ldr	r2, [pc, #84]	@ (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a18      	ldr	r2, [pc, #96]	@ (80030f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a11      	ldr	r2, [pc, #68]	@ (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10c      	bne.n	80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40013400 	.word	0x40013400
 80030e8:	40015000 	.word	0x40015000
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40000c00 	.word	0x40000c00
 80030f8:	40014000 	.word	0x40014000

080030fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e042      	b.n	8003194 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fd fcfd 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2224      	movs	r2, #36	@ 0x24
 800312a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 ffdc 	bl	8004104 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fcdd 	bl	8003b0c <UART_SetConfig>
 8003152:	4603      	mov	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e01b      	b.n	8003194 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800316a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800317a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f001 f85b 	bl	8004248 <UART_CheckIdleState>
 8003192:	4603      	mov	r3, r0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d17b      	bne.n	80032ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_UART_Transmit+0x26>
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e074      	b.n	80032b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2221      	movs	r2, #33	@ 0x21
 80031d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031d6:	f7fd fe5d 	bl	8000e94 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	88fa      	ldrh	r2, [r7, #6]
 80031e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f4:	d108      	bne.n	8003208 <HAL_UART_Transmit+0x6c>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d104      	bne.n	8003208 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	e003      	b.n	8003210 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003210:	e030      	b.n	8003274 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	2180      	movs	r1, #128	@ 0x80
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f001 f8bd 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e03d      	b.n	80032b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10b      	bne.n	8003252 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003248:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	3302      	adds	r3, #2
 800324e:	61bb      	str	r3, [r7, #24]
 8003250:	e007      	b.n	8003262 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	781a      	ldrb	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	3301      	adds	r3, #1
 8003260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1c8      	bne.n	8003212 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2200      	movs	r2, #0
 8003288:	2140      	movs	r1, #64	@ 0x40
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f001 f886 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e006      	b.n	80032b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	@ 0x28
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	f040 80b5 	bne.w	800343e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_UART_Receive+0x28>
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0ad      	b.n	8003440 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2222      	movs	r2, #34	@ 0x22
 80032f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032fa:	f7fd fdcb 	bl	8000e94 <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	88fa      	ldrh	r2, [r7, #6]
 800330c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003318:	d10e      	bne.n	8003338 <HAL_UART_Receive+0x80>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_UART_Receive+0x76>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003328:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800332c:	e02d      	b.n	800338a <HAL_UART_Receive+0xd2>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	22ff      	movs	r2, #255	@ 0xff
 8003332:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003336:	e028      	b.n	800338a <HAL_UART_Receive+0xd2>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10d      	bne.n	800335c <HAL_UART_Receive+0xa4>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <HAL_UART_Receive+0x9a>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	22ff      	movs	r2, #255	@ 0xff
 800334c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003350:	e01b      	b.n	800338a <HAL_UART_Receive+0xd2>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	227f      	movs	r2, #127	@ 0x7f
 8003356:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800335a:	e016      	b.n	800338a <HAL_UART_Receive+0xd2>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003364:	d10d      	bne.n	8003382 <HAL_UART_Receive+0xca>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <HAL_UART_Receive+0xc0>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	227f      	movs	r2, #127	@ 0x7f
 8003372:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003376:	e008      	b.n	800338a <HAL_UART_Receive+0xd2>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	223f      	movs	r2, #63	@ 0x3f
 800337c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003380:	e003      	b.n	800338a <HAL_UART_Receive+0xd2>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003390:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339a:	d108      	bne.n	80033ae <HAL_UART_Receive+0xf6>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	e003      	b.n	80033b6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80033b6:	e036      	b.n	8003426 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2200      	movs	r2, #0
 80033c0:	2120      	movs	r1, #32
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 ffea 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e032      	b.n	8003440 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10c      	bne.n	80033fa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	8a7b      	ldrh	r3, [r7, #18]
 80033ea:	4013      	ands	r3, r2
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	3302      	adds	r3, #2
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	e00c      	b.n	8003414 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	b2da      	uxtb	r2, r3
 8003402:	8a7b      	ldrh	r3, [r7, #18]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4013      	ands	r3, r2
 8003408:	b2da      	uxtb	r2, r3
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3301      	adds	r3, #1
 8003412:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1c2      	bne.n	80033b8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0ba      	sub	sp, #232	@ 0xe8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800346e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003472:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003476:	4013      	ands	r3, r2
 8003478:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800347c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d11b      	bne.n	80034bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800349c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d009      	beq.n	80034bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8300 	beq.w	8003ab2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
      }
      return;
 80034ba:	e2fa      	b.n	8003ab2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8123 	beq.w	800370c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80034c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80034ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003700 <HAL_UART_IRQHandler+0x2b8>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80034d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80034d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003704 <HAL_UART_IRQHandler+0x2bc>)
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8116 	beq.w	800370c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d011      	beq.n	8003510 <HAL_UART_IRQHandler+0xc8>
 80034ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00b      	beq.n	8003510 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2201      	movs	r2, #1
 80034fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d011      	beq.n	8003540 <HAL_UART_IRQHandler+0xf8>
 800351c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00b      	beq.n	8003540 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2202      	movs	r2, #2
 800352e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	f043 0204 	orr.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d011      	beq.n	8003570 <HAL_UART_IRQHandler+0x128>
 800354c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2204      	movs	r2, #4
 800355e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003566:	f043 0202 	orr.w	r2, r3, #2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d017      	beq.n	80035ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800357c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d105      	bne.n	8003594 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003588:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800358c:	4b5c      	ldr	r3, [pc, #368]	@ (8003700 <HAL_UART_IRQHandler+0x2b8>)
 800358e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2208      	movs	r2, #8
 800359a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a2:	f043 0208 	orr.w	r2, r3, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d012      	beq.n	80035de <HAL_UART_IRQHandler+0x196>
 80035b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00c      	beq.n	80035de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8266 	beq.w	8003ab6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d013      	beq.n	800361e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003624:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003632:	2b40      	cmp	r3, #64	@ 0x40
 8003634:	d005      	beq.n	8003642 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800363a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800363e:	2b00      	cmp	r3, #0
 8003640:	d054      	beq.n	80036ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 ff17 	bl	8004476 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003652:	2b40      	cmp	r3, #64	@ 0x40
 8003654:	d146      	bne.n	80036e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3308      	adds	r3, #8
 800365c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800366c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003674:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003682:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800368e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800369a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1d9      	bne.n	8003656 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d017      	beq.n	80036dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036b2:	4a15      	ldr	r2, [pc, #84]	@ (8003708 <HAL_UART_IRQHandler+0x2c0>)
 80036b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fd fe49 	bl	8001354 <HAL_DMA_Abort_IT>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d019      	beq.n	80036fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80036d6:	4610      	mov	r0, r2
 80036d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036da:	e00f      	b.n	80036fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f9ff 	bl	8003ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e2:	e00b      	b.n	80036fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f9fb 	bl	8003ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ea:	e007      	b.n	80036fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f9f7 	bl	8003ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80036fa:	e1dc      	b.n	8003ab6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	bf00      	nop
    return;
 80036fe:	e1da      	b.n	8003ab6 <HAL_UART_IRQHandler+0x66e>
 8003700:	10000001 	.word	0x10000001
 8003704:	04000120 	.word	0x04000120
 8003708:	08004543 	.word	0x08004543

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 8170 	bne.w	80039f6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8169 	beq.w	80039f6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8162 	beq.w	80039f6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2210      	movs	r2, #16
 8003738:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003744:	2b40      	cmp	r3, #64	@ 0x40
 8003746:	f040 80d8 	bne.w	80038fa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003758:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80af 	beq.w	80038c0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003768:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800376c:	429a      	cmp	r2, r3
 800376e:	f080 80a7 	bcs.w	80038c0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003778:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 8087 	bne.w	800389e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80037ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1da      	bne.n	8003790 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3308      	adds	r3, #8
 80037e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3308      	adds	r3, #8
 80037fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003802:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003806:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e1      	bne.n	80037da <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3308      	adds	r3, #8
 800381c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800382c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3308      	adds	r3, #8
 8003836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800383a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800383c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003840:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e3      	bne.n	8003816 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800386a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800386c:	f023 0310 	bic.w	r3, r3, #16
 8003870:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800387e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003880:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003884:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800388c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e4      	bne.n	800385c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003898:	4618      	mov	r0, r3
 800389a:	f7fd fd02 	bl	80012a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f91b 	bl	8003af4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80038be:	e0fc      	b.n	8003aba <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80038c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ca:	429a      	cmp	r2, r3
 80038cc:	f040 80f5 	bne.w	8003aba <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b20      	cmp	r3, #32
 80038e0:	f040 80eb 	bne.w	8003aba <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8fe 	bl	8003af4 <HAL_UARTEx_RxEventCallback>
      return;
 80038f8:	e0df      	b.n	8003aba <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003906:	b29b      	uxth	r3, r3
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80d1 	beq.w	8003abe <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800391c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80cc 	beq.w	8003abe <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003936:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800393a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003948:	647b      	str	r3, [r7, #68]	@ 0x44
 800394a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800394e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e4      	bne.n	8003926 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	623b      	str	r3, [r7, #32]
   return(result);
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3308      	adds	r3, #8
 8003980:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003984:	633a      	str	r2, [r7, #48]	@ 0x30
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800398a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e1      	bne.n	800395c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f023 0310 	bic.w	r3, r3, #16
 80039c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	69b9      	ldr	r1, [r7, #24]
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	617b      	str	r3, [r7, #20]
   return(result);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e4      	bne.n	80039ac <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ec:	4619      	mov	r1, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f880 	bl	8003af4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039f4:	e063      	b.n	8003abe <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00e      	beq.n	8003a20 <HAL_UART_IRQHandler+0x5d8>
 8003a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fdcf 	bl	80045bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a1e:	e051      	b.n	8003ac4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d014      	beq.n	8003a56 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d03a      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
    }
    return;
 8003a54:	e035      	b.n	8003ac2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_UART_IRQHandler+0x62e>
 8003a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fd79 	bl	8004566 <UART_EndTransmit_IT>
    return;
 8003a74:	e026      	b.n	8003ac4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_UART_IRQHandler+0x64e>
 8003a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a86:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fda8 	bl	80045e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a94:	e016      	b.n	8003ac4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d010      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x67c>
 8003aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	da0c      	bge.n	8003ac4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fd90 	bl	80045d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ab0:	e008      	b.n	8003ac4 <HAL_UART_IRQHandler+0x67c>
      return;
 8003ab2:	bf00      	nop
 8003ab4:	e006      	b.n	8003ac4 <HAL_UART_IRQHandler+0x67c>
    return;
 8003ab6:	bf00      	nop
 8003ab8:	e004      	b.n	8003ac4 <HAL_UART_IRQHandler+0x67c>
      return;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <HAL_UART_IRQHandler+0x67c>
      return;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <HAL_UART_IRQHandler+0x67c>
    return;
 8003ac2:	bf00      	nop
  }
}
 8003ac4:	37e8      	adds	r7, #232	@ 0xe8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop

08003acc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b10:	b08c      	sub	sp, #48	@ 0x30
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4baa      	ldr	r3, [pc, #680]	@ (8003de4 <UART_SetConfig+0x2d8>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a9f      	ldr	r2, [pc, #636]	@ (8003de8 <UART_SetConfig+0x2dc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b74:	4313      	orrs	r3, r2
 8003b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003b82:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b96:	f023 010f 	bic.w	r1, r3, #15
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a90      	ldr	r2, [pc, #576]	@ (8003dec <UART_SetConfig+0x2e0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d125      	bne.n	8003bfc <UART_SetConfig+0xf0>
 8003bb0:	4b8f      	ldr	r3, [pc, #572]	@ (8003df0 <UART_SetConfig+0x2e4>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d81a      	bhi.n	8003bf4 <UART_SetConfig+0xe8>
 8003bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc4 <UART_SetConfig+0xb8>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003be5 	.word	0x08003be5
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003bed 	.word	0x08003bed
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bda:	e116      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be2:	e112      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003be4:	2304      	movs	r3, #4
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bea:	e10e      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003bec:	2308      	movs	r3, #8
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf2:	e10a      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfa:	e106      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a7c      	ldr	r2, [pc, #496]	@ (8003df4 <UART_SetConfig+0x2e8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d138      	bne.n	8003c78 <UART_SetConfig+0x16c>
 8003c06:	4b7a      	ldr	r3, [pc, #488]	@ (8003df0 <UART_SetConfig+0x2e4>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b0c      	cmp	r3, #12
 8003c12:	d82d      	bhi.n	8003c70 <UART_SetConfig+0x164>
 8003c14:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <UART_SetConfig+0x110>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003c71 	.word	0x08003c71
 8003c28:	08003c71 	.word	0x08003c71
 8003c2c:	08003c61 	.word	0x08003c61
 8003c30:	08003c71 	.word	0x08003c71
 8003c34:	08003c71 	.word	0x08003c71
 8003c38:	08003c71 	.word	0x08003c71
 8003c3c:	08003c59 	.word	0x08003c59
 8003c40:	08003c71 	.word	0x08003c71
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c69 	.word	0x08003c69
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c56:	e0d8      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5e:	e0d4      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003c60:	2304      	movs	r3, #4
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c66:	e0d0      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c6e:	e0cc      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003c70:	2310      	movs	r3, #16
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c76:	e0c8      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8003df8 <UART_SetConfig+0x2ec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d125      	bne.n	8003cce <UART_SetConfig+0x1c2>
 8003c82:	4b5b      	ldr	r3, [pc, #364]	@ (8003df0 <UART_SetConfig+0x2e4>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c8c:	2b30      	cmp	r3, #48	@ 0x30
 8003c8e:	d016      	beq.n	8003cbe <UART_SetConfig+0x1b2>
 8003c90:	2b30      	cmp	r3, #48	@ 0x30
 8003c92:	d818      	bhi.n	8003cc6 <UART_SetConfig+0x1ba>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d00a      	beq.n	8003cae <UART_SetConfig+0x1a2>
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d814      	bhi.n	8003cc6 <UART_SetConfig+0x1ba>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <UART_SetConfig+0x19a>
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d008      	beq.n	8003cb6 <UART_SetConfig+0x1aa>
 8003ca4:	e00f      	b.n	8003cc6 <UART_SetConfig+0x1ba>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cac:	e0ad      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cb4:	e0a9      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cbc:	e0a5      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cc4:	e0a1      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ccc:	e09d      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8003dfc <UART_SetConfig+0x2f0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d125      	bne.n	8003d24 <UART_SetConfig+0x218>
 8003cd8:	4b45      	ldr	r3, [pc, #276]	@ (8003df0 <UART_SetConfig+0x2e4>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ce2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ce4:	d016      	beq.n	8003d14 <UART_SetConfig+0x208>
 8003ce6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ce8:	d818      	bhi.n	8003d1c <UART_SetConfig+0x210>
 8003cea:	2b80      	cmp	r3, #128	@ 0x80
 8003cec:	d00a      	beq.n	8003d04 <UART_SetConfig+0x1f8>
 8003cee:	2b80      	cmp	r3, #128	@ 0x80
 8003cf0:	d814      	bhi.n	8003d1c <UART_SetConfig+0x210>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <UART_SetConfig+0x1f0>
 8003cf6:	2b40      	cmp	r3, #64	@ 0x40
 8003cf8:	d008      	beq.n	8003d0c <UART_SetConfig+0x200>
 8003cfa:	e00f      	b.n	8003d1c <UART_SetConfig+0x210>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d02:	e082      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d04:	2302      	movs	r3, #2
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d0a:	e07e      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d12:	e07a      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d14:	2308      	movs	r3, #8
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d1a:	e076      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d22:	e072      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a35      	ldr	r2, [pc, #212]	@ (8003e00 <UART_SetConfig+0x2f4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d12a      	bne.n	8003d84 <UART_SetConfig+0x278>
 8003d2e:	4b30      	ldr	r3, [pc, #192]	@ (8003df0 <UART_SetConfig+0x2e4>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d3c:	d01a      	beq.n	8003d74 <UART_SetConfig+0x268>
 8003d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d42:	d81b      	bhi.n	8003d7c <UART_SetConfig+0x270>
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d48:	d00c      	beq.n	8003d64 <UART_SetConfig+0x258>
 8003d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d4e:	d815      	bhi.n	8003d7c <UART_SetConfig+0x270>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <UART_SetConfig+0x250>
 8003d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d58:	d008      	beq.n	8003d6c <UART_SetConfig+0x260>
 8003d5a:	e00f      	b.n	8003d7c <UART_SetConfig+0x270>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d62:	e052      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d64:	2302      	movs	r3, #2
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d6a:	e04e      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d72:	e04a      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d74:	2308      	movs	r3, #8
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d7a:	e046      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d82:	e042      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a17      	ldr	r2, [pc, #92]	@ (8003de8 <UART_SetConfig+0x2dc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d13a      	bne.n	8003e04 <UART_SetConfig+0x2f8>
 8003d8e:	4b18      	ldr	r3, [pc, #96]	@ (8003df0 <UART_SetConfig+0x2e4>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d9c:	d01a      	beq.n	8003dd4 <UART_SetConfig+0x2c8>
 8003d9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003da2:	d81b      	bhi.n	8003ddc <UART_SetConfig+0x2d0>
 8003da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da8:	d00c      	beq.n	8003dc4 <UART_SetConfig+0x2b8>
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dae:	d815      	bhi.n	8003ddc <UART_SetConfig+0x2d0>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <UART_SetConfig+0x2b0>
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db8:	d008      	beq.n	8003dcc <UART_SetConfig+0x2c0>
 8003dba:	e00f      	b.n	8003ddc <UART_SetConfig+0x2d0>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dc2:	e022      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dca:	e01e      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd2:	e01a      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dda:	e016      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de2:	e012      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003de4:	cfff69f3 	.word	0xcfff69f3
 8003de8:	40008000 	.word	0x40008000
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40004400 	.word	0x40004400
 8003df8:	40004800 	.word	0x40004800
 8003dfc:	40004c00 	.word	0x40004c00
 8003e00:	40005000 	.word	0x40005000
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4aae      	ldr	r2, [pc, #696]	@ (80040c8 <UART_SetConfig+0x5bc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	f040 8097 	bne.w	8003f44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d823      	bhi.n	8003e66 <UART_SetConfig+0x35a>
 8003e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <UART_SetConfig+0x318>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e67 	.word	0x08003e67
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e57 	.word	0x08003e57
 8003e38:	08003e67 	.word	0x08003e67
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e67 	.word	0x08003e67
 8003e44:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7fe fb44 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8003e4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e4e:	e010      	b.n	8003e72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b9e      	ldr	r3, [pc, #632]	@ (80040cc <UART_SetConfig+0x5c0>)
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e54:	e00d      	b.n	8003e72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe facf 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003e5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e5c:	e009      	b.n	8003e72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e64:	e005      	b.n	8003e72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8130 	beq.w	80040da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	4a94      	ldr	r2, [pc, #592]	@ (80040d0 <UART_SetConfig+0x5c4>)
 8003e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e84:	461a      	mov	r2, r3
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d305      	bcc.n	8003eaa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d903      	bls.n	8003eb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003eb0:	e113      	b.n	80040da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	60fa      	str	r2, [r7, #12]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	4a84      	ldr	r2, [pc, #528]	@ (80040d0 <UART_SetConfig+0x5c4>)
 8003ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ed4:	f7fc f9f4 	bl	80002c0 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	020b      	lsls	r3, r1, #8
 8003eea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003eee:	0202      	lsls	r2, r0, #8
 8003ef0:	6979      	ldr	r1, [r7, #20]
 8003ef2:	6849      	ldr	r1, [r1, #4]
 8003ef4:	0849      	lsrs	r1, r1, #1
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	460c      	mov	r4, r1
 8003efa:	4605      	mov	r5, r0
 8003efc:	eb12 0804 	adds.w	r8, r2, r4
 8003f00:	eb43 0905 	adc.w	r9, r3, r5
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	469a      	mov	sl, r3
 8003f0c:	4693      	mov	fp, r2
 8003f0e:	4652      	mov	r2, sl
 8003f10:	465b      	mov	r3, fp
 8003f12:	4640      	mov	r0, r8
 8003f14:	4649      	mov	r1, r9
 8003f16:	f7fc f9d3 	bl	80002c0 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f28:	d308      	bcc.n	8003f3c <UART_SetConfig+0x430>
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f30:	d204      	bcs.n	8003f3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a3a      	ldr	r2, [r7, #32]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	e0ce      	b.n	80040da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f42:	e0ca      	b.n	80040da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4c:	d166      	bne.n	800401c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003f4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d827      	bhi.n	8003fa6 <UART_SetConfig+0x49a>
 8003f56:	a201      	add	r2, pc, #4	@ (adr r2, 8003f5c <UART_SetConfig+0x450>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f81 	.word	0x08003f81
 8003f60:	08003f89 	.word	0x08003f89
 8003f64:	08003f91 	.word	0x08003f91
 8003f68:	08003fa7 	.word	0x08003fa7
 8003f6c:	08003f97 	.word	0x08003f97
 8003f70:	08003fa7 	.word	0x08003fa7
 8003f74:	08003fa7 	.word	0x08003fa7
 8003f78:	08003fa7 	.word	0x08003fa7
 8003f7c:	08003f9f 	.word	0x08003f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f80:	f7fe faa8 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8003f84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f86:	e014      	b.n	8003fb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f88:	f7fe faba 	bl	8002500 <HAL_RCC_GetPCLK2Freq>
 8003f8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f8e:	e010      	b.n	8003fb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f90:	4b4e      	ldr	r3, [pc, #312]	@ (80040cc <UART_SetConfig+0x5c0>)
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f94:	e00d      	b.n	8003fb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f96:	f7fe fa2f 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003f9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f9c:	e009      	b.n	8003fb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fa4:	e005      	b.n	8003fb2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003fb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8090 	beq.w	80040da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	4a44      	ldr	r2, [pc, #272]	@ (80040d0 <UART_SetConfig+0x5c4>)
 8003fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fcc:	005a      	lsls	r2, r3, #1
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	441a      	add	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	d916      	bls.n	8004014 <UART_SetConfig+0x508>
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fec:	d212      	bcs.n	8004014 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f023 030f 	bic.w	r3, r3, #15
 8003ff6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	b29a      	uxth	r2, r3
 8004004:	8bfb      	ldrh	r3, [r7, #30]
 8004006:	4313      	orrs	r3, r2
 8004008:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	8bfa      	ldrh	r2, [r7, #30]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	e062      	b.n	80040da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800401a:	e05e      	b.n	80040da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800401c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004020:	2b08      	cmp	r3, #8
 8004022:	d828      	bhi.n	8004076 <UART_SetConfig+0x56a>
 8004024:	a201      	add	r2, pc, #4	@ (adr r2, 800402c <UART_SetConfig+0x520>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004051 	.word	0x08004051
 8004030:	08004059 	.word	0x08004059
 8004034:	08004061 	.word	0x08004061
 8004038:	08004077 	.word	0x08004077
 800403c:	08004067 	.word	0x08004067
 8004040:	08004077 	.word	0x08004077
 8004044:	08004077 	.word	0x08004077
 8004048:	08004077 	.word	0x08004077
 800404c:	0800406f 	.word	0x0800406f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe fa40 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8004054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004056:	e014      	b.n	8004082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004058:	f7fe fa52 	bl	8002500 <HAL_RCC_GetPCLK2Freq>
 800405c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800405e:	e010      	b.n	8004082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004060:	4b1a      	ldr	r3, [pc, #104]	@ (80040cc <UART_SetConfig+0x5c0>)
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004064:	e00d      	b.n	8004082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004066:	f7fe f9c7 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 800406a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800406c:	e009      	b.n	8004082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004074:	e005      	b.n	8004082 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004080:	bf00      	nop
    }

    if (pclk != 0U)
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	d028      	beq.n	80040da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	4a10      	ldr	r2, [pc, #64]	@ (80040d0 <UART_SetConfig+0x5c4>)
 800408e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004092:	461a      	mov	r2, r3
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	fbb3 f2f2 	udiv	r2, r3, r2
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	441a      	add	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b0f      	cmp	r3, #15
 80040b0:	d910      	bls.n	80040d4 <UART_SetConfig+0x5c8>
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b8:	d20c      	bcs.n	80040d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	e009      	b.n	80040da <UART_SetConfig+0x5ce>
 80040c6:	bf00      	nop
 80040c8:	40008000 	.word	0x40008000
 80040cc:	00f42400 	.word	0x00f42400
 80040d0:	08005190 	.word	0x08005190
      }
      else
      {
        ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2201      	movs	r2, #1
 80040de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2200      	movs	r2, #0
 80040ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2200      	movs	r2, #0
 80040f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80040f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3730      	adds	r7, #48	@ 0x30
 80040fe:	46bd      	mov	sp, r7
 8004100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01a      	beq.n	800421a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004202:	d10a      	bne.n	800421a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b098      	sub	sp, #96	@ 0x60
 800424c:	af02      	add	r7, sp, #8
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004258:	f7fc fe1c 	bl	8000e94 <HAL_GetTick>
 800425c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d12f      	bne.n	80042cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800426c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004274:	2200      	movs	r2, #0
 8004276:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f88e 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d022      	beq.n	80042cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800429a:	653b      	str	r3, [r7, #80]	@ 0x50
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e6      	bne.n	8004286 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e063      	b.n	8004394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d149      	bne.n	800436e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e2:	2200      	movs	r2, #0
 80042e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f857 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d03c      	beq.n	800436e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	623b      	str	r3, [r7, #32]
   return(result);
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004308:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004312:	633b      	str	r3, [r7, #48]	@ 0x30
 8004314:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e6      	bne.n	80042f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	60fb      	str	r3, [r7, #12]
   return(result);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004346:	61fa      	str	r2, [r7, #28]
 8004348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	617b      	str	r3, [r7, #20]
   return(result);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e012      	b.n	8004394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3758      	adds	r7, #88	@ 0x58
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ac:	e04f      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d04b      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fc fd6d 	bl	8000e94 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <UART_WaitOnFlagUntilTimeout+0x30>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e04e      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d037      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b80      	cmp	r3, #128	@ 0x80
 80043e2:	d034      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b40      	cmp	r3, #64	@ 0x40
 80043e8:	d031      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d110      	bne.n	800441a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2208      	movs	r2, #8
 80043fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f838 	bl	8004476 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2208      	movs	r2, #8
 800440a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e029      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004428:	d111      	bne.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f81e 	bl	8004476 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e00f      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4013      	ands	r3, r2
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	bf0c      	ite	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	2300      	movne	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	429a      	cmp	r2, r3
 800446a:	d0a0      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004476:	b480      	push	{r7}
 8004478:	b095      	sub	sp, #84	@ 0x54
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800448c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800449c:	643b      	str	r3, [r7, #64]	@ 0x40
 800449e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e6      	bne.n	800447e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e3      	bne.n	80044b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d118      	bne.n	8004522 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f023 0310 	bic.w	r3, r3, #16
 8004504:	647b      	str	r3, [r7, #68]	@ 0x44
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6979      	ldr	r1, [r7, #20]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	613b      	str	r3, [r7, #16]
   return(result);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e6      	bne.n	80044f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004536:	bf00      	nop
 8004538:	3754      	adds	r7, #84	@ 0x54
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff fac1 	bl	8003ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b088      	sub	sp, #32
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	60bb      	str	r3, [r7, #8]
   return(result);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6979      	ldr	r1, [r7, #20]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	613b      	str	r3, [r7, #16]
   return(result);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e6      	bne.n	800456e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff fa8c 	bl	8003acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045b4:	bf00      	nop
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_UARTEx_DisableFifoMode+0x16>
 800460a:	2302      	movs	r3, #2
 800460c:	e027      	b.n	800465e <HAL_UARTEx_DisableFifoMode+0x66>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2224      	movs	r2, #36	@ 0x24
 800461a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800463c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800467e:	2302      	movs	r3, #2
 8004680:	e02d      	b.n	80046de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2224      	movs	r2, #36	@ 0x24
 800468e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f850 	bl	8004764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e02d      	b.n	800475a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2224      	movs	r2, #36	@ 0x24
 800470a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f812 	bl	8004764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004770:	2b00      	cmp	r3, #0
 8004772:	d108      	bne.n	8004786 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004784:	e031      	b.n	80047ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004786:	2308      	movs	r3, #8
 8004788:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800478a:	2308      	movs	r3, #8
 800478c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	0e5b      	lsrs	r3, r3, #25
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	0f5b      	lsrs	r3, r3, #29
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047ae:	7bbb      	ldrb	r3, [r7, #14]
 80047b0:	7b3a      	ldrb	r2, [r7, #12]
 80047b2:	4911      	ldr	r1, [pc, #68]	@ (80047f8 <UARTEx_SetNbDataToProcess+0x94>)
 80047b4:	5c8a      	ldrb	r2, [r1, r2]
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80047ba:	7b3a      	ldrb	r2, [r7, #12]
 80047bc:	490f      	ldr	r1, [pc, #60]	@ (80047fc <UARTEx_SetNbDataToProcess+0x98>)
 80047be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	7b7a      	ldrb	r2, [r7, #13]
 80047d0:	4909      	ldr	r1, [pc, #36]	@ (80047f8 <UARTEx_SetNbDataToProcess+0x94>)
 80047d2:	5c8a      	ldrb	r2, [r1, r2]
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047d8:	7b7a      	ldrb	r2, [r7, #13]
 80047da:	4908      	ldr	r1, [pc, #32]	@ (80047fc <UARTEx_SetNbDataToProcess+0x98>)
 80047dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047de:	fb93 f3f2 	sdiv	r3, r3, r2
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	080051a8 	.word	0x080051a8
 80047fc:	080051b0 	.word	0x080051b0

08004800 <siprintf>:
 8004800:	b40e      	push	{r1, r2, r3}
 8004802:	b510      	push	{r4, lr}
 8004804:	b09d      	sub	sp, #116	@ 0x74
 8004806:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004808:	9002      	str	r0, [sp, #8]
 800480a:	9006      	str	r0, [sp, #24]
 800480c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004810:	480a      	ldr	r0, [pc, #40]	@ (800483c <siprintf+0x3c>)
 8004812:	9107      	str	r1, [sp, #28]
 8004814:	9104      	str	r1, [sp, #16]
 8004816:	490a      	ldr	r1, [pc, #40]	@ (8004840 <siprintf+0x40>)
 8004818:	f853 2b04 	ldr.w	r2, [r3], #4
 800481c:	9105      	str	r1, [sp, #20]
 800481e:	2400      	movs	r4, #0
 8004820:	a902      	add	r1, sp, #8
 8004822:	6800      	ldr	r0, [r0, #0]
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004828:	f000 f994 	bl	8004b54 <_svfiprintf_r>
 800482c:	9b02      	ldr	r3, [sp, #8]
 800482e:	701c      	strb	r4, [r3, #0]
 8004830:	b01d      	add	sp, #116	@ 0x74
 8004832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004836:	b003      	add	sp, #12
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	2000000c 	.word	0x2000000c
 8004840:	ffff0208 	.word	0xffff0208

08004844 <memset>:
 8004844:	4402      	add	r2, r0
 8004846:	4603      	mov	r3, r0
 8004848:	4293      	cmp	r3, r2
 800484a:	d100      	bne.n	800484e <memset+0xa>
 800484c:	4770      	bx	lr
 800484e:	f803 1b01 	strb.w	r1, [r3], #1
 8004852:	e7f9      	b.n	8004848 <memset+0x4>

08004854 <__errno>:
 8004854:	4b01      	ldr	r3, [pc, #4]	@ (800485c <__errno+0x8>)
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	2000000c 	.word	0x2000000c

08004860 <__libc_init_array>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	4d0d      	ldr	r5, [pc, #52]	@ (8004898 <__libc_init_array+0x38>)
 8004864:	4c0d      	ldr	r4, [pc, #52]	@ (800489c <__libc_init_array+0x3c>)
 8004866:	1b64      	subs	r4, r4, r5
 8004868:	10a4      	asrs	r4, r4, #2
 800486a:	2600      	movs	r6, #0
 800486c:	42a6      	cmp	r6, r4
 800486e:	d109      	bne.n	8004884 <__libc_init_array+0x24>
 8004870:	4d0b      	ldr	r5, [pc, #44]	@ (80048a0 <__libc_init_array+0x40>)
 8004872:	4c0c      	ldr	r4, [pc, #48]	@ (80048a4 <__libc_init_array+0x44>)
 8004874:	f000 fc64 	bl	8005140 <_init>
 8004878:	1b64      	subs	r4, r4, r5
 800487a:	10a4      	asrs	r4, r4, #2
 800487c:	2600      	movs	r6, #0
 800487e:	42a6      	cmp	r6, r4
 8004880:	d105      	bne.n	800488e <__libc_init_array+0x2e>
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	f855 3b04 	ldr.w	r3, [r5], #4
 8004888:	4798      	blx	r3
 800488a:	3601      	adds	r6, #1
 800488c:	e7ee      	b.n	800486c <__libc_init_array+0xc>
 800488e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004892:	4798      	blx	r3
 8004894:	3601      	adds	r6, #1
 8004896:	e7f2      	b.n	800487e <__libc_init_array+0x1e>
 8004898:	080051f4 	.word	0x080051f4
 800489c:	080051f4 	.word	0x080051f4
 80048a0:	080051f4 	.word	0x080051f4
 80048a4:	080051f8 	.word	0x080051f8

080048a8 <__retarget_lock_acquire_recursive>:
 80048a8:	4770      	bx	lr

080048aa <__retarget_lock_release_recursive>:
 80048aa:	4770      	bx	lr

080048ac <_free_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4605      	mov	r5, r0
 80048b0:	2900      	cmp	r1, #0
 80048b2:	d041      	beq.n	8004938 <_free_r+0x8c>
 80048b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048b8:	1f0c      	subs	r4, r1, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bfb8      	it	lt
 80048be:	18e4      	addlt	r4, r4, r3
 80048c0:	f000 f8e0 	bl	8004a84 <__malloc_lock>
 80048c4:	4a1d      	ldr	r2, [pc, #116]	@ (800493c <_free_r+0x90>)
 80048c6:	6813      	ldr	r3, [r2, #0]
 80048c8:	b933      	cbnz	r3, 80048d8 <_free_r+0x2c>
 80048ca:	6063      	str	r3, [r4, #4]
 80048cc:	6014      	str	r4, [r2, #0]
 80048ce:	4628      	mov	r0, r5
 80048d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048d4:	f000 b8dc 	b.w	8004a90 <__malloc_unlock>
 80048d8:	42a3      	cmp	r3, r4
 80048da:	d908      	bls.n	80048ee <_free_r+0x42>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	1821      	adds	r1, r4, r0
 80048e0:	428b      	cmp	r3, r1
 80048e2:	bf01      	itttt	eq
 80048e4:	6819      	ldreq	r1, [r3, #0]
 80048e6:	685b      	ldreq	r3, [r3, #4]
 80048e8:	1809      	addeq	r1, r1, r0
 80048ea:	6021      	streq	r1, [r4, #0]
 80048ec:	e7ed      	b.n	80048ca <_free_r+0x1e>
 80048ee:	461a      	mov	r2, r3
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	b10b      	cbz	r3, 80048f8 <_free_r+0x4c>
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d9fa      	bls.n	80048ee <_free_r+0x42>
 80048f8:	6811      	ldr	r1, [r2, #0]
 80048fa:	1850      	adds	r0, r2, r1
 80048fc:	42a0      	cmp	r0, r4
 80048fe:	d10b      	bne.n	8004918 <_free_r+0x6c>
 8004900:	6820      	ldr	r0, [r4, #0]
 8004902:	4401      	add	r1, r0
 8004904:	1850      	adds	r0, r2, r1
 8004906:	4283      	cmp	r3, r0
 8004908:	6011      	str	r1, [r2, #0]
 800490a:	d1e0      	bne.n	80048ce <_free_r+0x22>
 800490c:	6818      	ldr	r0, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	6053      	str	r3, [r2, #4]
 8004912:	4408      	add	r0, r1
 8004914:	6010      	str	r0, [r2, #0]
 8004916:	e7da      	b.n	80048ce <_free_r+0x22>
 8004918:	d902      	bls.n	8004920 <_free_r+0x74>
 800491a:	230c      	movs	r3, #12
 800491c:	602b      	str	r3, [r5, #0]
 800491e:	e7d6      	b.n	80048ce <_free_r+0x22>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	1821      	adds	r1, r4, r0
 8004924:	428b      	cmp	r3, r1
 8004926:	bf04      	itt	eq
 8004928:	6819      	ldreq	r1, [r3, #0]
 800492a:	685b      	ldreq	r3, [r3, #4]
 800492c:	6063      	str	r3, [r4, #4]
 800492e:	bf04      	itt	eq
 8004930:	1809      	addeq	r1, r1, r0
 8004932:	6021      	streq	r1, [r4, #0]
 8004934:	6054      	str	r4, [r2, #4]
 8004936:	e7ca      	b.n	80048ce <_free_r+0x22>
 8004938:	bd38      	pop	{r3, r4, r5, pc}
 800493a:	bf00      	nop
 800493c:	200003c0 	.word	0x200003c0

08004940 <sbrk_aligned>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	4e0f      	ldr	r6, [pc, #60]	@ (8004980 <sbrk_aligned+0x40>)
 8004944:	460c      	mov	r4, r1
 8004946:	6831      	ldr	r1, [r6, #0]
 8004948:	4605      	mov	r5, r0
 800494a:	b911      	cbnz	r1, 8004952 <sbrk_aligned+0x12>
 800494c:	f000 fba4 	bl	8005098 <_sbrk_r>
 8004950:	6030      	str	r0, [r6, #0]
 8004952:	4621      	mov	r1, r4
 8004954:	4628      	mov	r0, r5
 8004956:	f000 fb9f 	bl	8005098 <_sbrk_r>
 800495a:	1c43      	adds	r3, r0, #1
 800495c:	d103      	bne.n	8004966 <sbrk_aligned+0x26>
 800495e:	f04f 34ff 	mov.w	r4, #4294967295
 8004962:	4620      	mov	r0, r4
 8004964:	bd70      	pop	{r4, r5, r6, pc}
 8004966:	1cc4      	adds	r4, r0, #3
 8004968:	f024 0403 	bic.w	r4, r4, #3
 800496c:	42a0      	cmp	r0, r4
 800496e:	d0f8      	beq.n	8004962 <sbrk_aligned+0x22>
 8004970:	1a21      	subs	r1, r4, r0
 8004972:	4628      	mov	r0, r5
 8004974:	f000 fb90 	bl	8005098 <_sbrk_r>
 8004978:	3001      	adds	r0, #1
 800497a:	d1f2      	bne.n	8004962 <sbrk_aligned+0x22>
 800497c:	e7ef      	b.n	800495e <sbrk_aligned+0x1e>
 800497e:	bf00      	nop
 8004980:	200003bc 	.word	0x200003bc

08004984 <_malloc_r>:
 8004984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004988:	1ccd      	adds	r5, r1, #3
 800498a:	f025 0503 	bic.w	r5, r5, #3
 800498e:	3508      	adds	r5, #8
 8004990:	2d0c      	cmp	r5, #12
 8004992:	bf38      	it	cc
 8004994:	250c      	movcc	r5, #12
 8004996:	2d00      	cmp	r5, #0
 8004998:	4606      	mov	r6, r0
 800499a:	db01      	blt.n	80049a0 <_malloc_r+0x1c>
 800499c:	42a9      	cmp	r1, r5
 800499e:	d904      	bls.n	80049aa <_malloc_r+0x26>
 80049a0:	230c      	movs	r3, #12
 80049a2:	6033      	str	r3, [r6, #0]
 80049a4:	2000      	movs	r0, #0
 80049a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a80 <_malloc_r+0xfc>
 80049ae:	f000 f869 	bl	8004a84 <__malloc_lock>
 80049b2:	f8d8 3000 	ldr.w	r3, [r8]
 80049b6:	461c      	mov	r4, r3
 80049b8:	bb44      	cbnz	r4, 8004a0c <_malloc_r+0x88>
 80049ba:	4629      	mov	r1, r5
 80049bc:	4630      	mov	r0, r6
 80049be:	f7ff ffbf 	bl	8004940 <sbrk_aligned>
 80049c2:	1c43      	adds	r3, r0, #1
 80049c4:	4604      	mov	r4, r0
 80049c6:	d158      	bne.n	8004a7a <_malloc_r+0xf6>
 80049c8:	f8d8 4000 	ldr.w	r4, [r8]
 80049cc:	4627      	mov	r7, r4
 80049ce:	2f00      	cmp	r7, #0
 80049d0:	d143      	bne.n	8004a5a <_malloc_r+0xd6>
 80049d2:	2c00      	cmp	r4, #0
 80049d4:	d04b      	beq.n	8004a6e <_malloc_r+0xea>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	4639      	mov	r1, r7
 80049da:	4630      	mov	r0, r6
 80049dc:	eb04 0903 	add.w	r9, r4, r3
 80049e0:	f000 fb5a 	bl	8005098 <_sbrk_r>
 80049e4:	4581      	cmp	r9, r0
 80049e6:	d142      	bne.n	8004a6e <_malloc_r+0xea>
 80049e8:	6821      	ldr	r1, [r4, #0]
 80049ea:	1a6d      	subs	r5, r5, r1
 80049ec:	4629      	mov	r1, r5
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7ff ffa6 	bl	8004940 <sbrk_aligned>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d03a      	beq.n	8004a6e <_malloc_r+0xea>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	442b      	add	r3, r5
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	bb62      	cbnz	r2, 8004a60 <_malloc_r+0xdc>
 8004a06:	f8c8 7000 	str.w	r7, [r8]
 8004a0a:	e00f      	b.n	8004a2c <_malloc_r+0xa8>
 8004a0c:	6822      	ldr	r2, [r4, #0]
 8004a0e:	1b52      	subs	r2, r2, r5
 8004a10:	d420      	bmi.n	8004a54 <_malloc_r+0xd0>
 8004a12:	2a0b      	cmp	r2, #11
 8004a14:	d917      	bls.n	8004a46 <_malloc_r+0xc2>
 8004a16:	1961      	adds	r1, r4, r5
 8004a18:	42a3      	cmp	r3, r4
 8004a1a:	6025      	str	r5, [r4, #0]
 8004a1c:	bf18      	it	ne
 8004a1e:	6059      	strne	r1, [r3, #4]
 8004a20:	6863      	ldr	r3, [r4, #4]
 8004a22:	bf08      	it	eq
 8004a24:	f8c8 1000 	streq.w	r1, [r8]
 8004a28:	5162      	str	r2, [r4, r5]
 8004a2a:	604b      	str	r3, [r1, #4]
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	f000 f82f 	bl	8004a90 <__malloc_unlock>
 8004a32:	f104 000b 	add.w	r0, r4, #11
 8004a36:	1d23      	adds	r3, r4, #4
 8004a38:	f020 0007 	bic.w	r0, r0, #7
 8004a3c:	1ac2      	subs	r2, r0, r3
 8004a3e:	bf1c      	itt	ne
 8004a40:	1a1b      	subne	r3, r3, r0
 8004a42:	50a3      	strne	r3, [r4, r2]
 8004a44:	e7af      	b.n	80049a6 <_malloc_r+0x22>
 8004a46:	6862      	ldr	r2, [r4, #4]
 8004a48:	42a3      	cmp	r3, r4
 8004a4a:	bf0c      	ite	eq
 8004a4c:	f8c8 2000 	streq.w	r2, [r8]
 8004a50:	605a      	strne	r2, [r3, #4]
 8004a52:	e7eb      	b.n	8004a2c <_malloc_r+0xa8>
 8004a54:	4623      	mov	r3, r4
 8004a56:	6864      	ldr	r4, [r4, #4]
 8004a58:	e7ae      	b.n	80049b8 <_malloc_r+0x34>
 8004a5a:	463c      	mov	r4, r7
 8004a5c:	687f      	ldr	r7, [r7, #4]
 8004a5e:	e7b6      	b.n	80049ce <_malloc_r+0x4a>
 8004a60:	461a      	mov	r2, r3
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	d1fb      	bne.n	8004a60 <_malloc_r+0xdc>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6053      	str	r3, [r2, #4]
 8004a6c:	e7de      	b.n	8004a2c <_malloc_r+0xa8>
 8004a6e:	230c      	movs	r3, #12
 8004a70:	6033      	str	r3, [r6, #0]
 8004a72:	4630      	mov	r0, r6
 8004a74:	f000 f80c 	bl	8004a90 <__malloc_unlock>
 8004a78:	e794      	b.n	80049a4 <_malloc_r+0x20>
 8004a7a:	6005      	str	r5, [r0, #0]
 8004a7c:	e7d6      	b.n	8004a2c <_malloc_r+0xa8>
 8004a7e:	bf00      	nop
 8004a80:	200003c0 	.word	0x200003c0

08004a84 <__malloc_lock>:
 8004a84:	4801      	ldr	r0, [pc, #4]	@ (8004a8c <__malloc_lock+0x8>)
 8004a86:	f7ff bf0f 	b.w	80048a8 <__retarget_lock_acquire_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	200003b8 	.word	0x200003b8

08004a90 <__malloc_unlock>:
 8004a90:	4801      	ldr	r0, [pc, #4]	@ (8004a98 <__malloc_unlock+0x8>)
 8004a92:	f7ff bf0a 	b.w	80048aa <__retarget_lock_release_recursive>
 8004a96:	bf00      	nop
 8004a98:	200003b8 	.word	0x200003b8

08004a9c <__ssputs_r>:
 8004a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	688e      	ldr	r6, [r1, #8]
 8004aa2:	461f      	mov	r7, r3
 8004aa4:	42be      	cmp	r6, r7
 8004aa6:	680b      	ldr	r3, [r1, #0]
 8004aa8:	4682      	mov	sl, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	4690      	mov	r8, r2
 8004aae:	d82d      	bhi.n	8004b0c <__ssputs_r+0x70>
 8004ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ab4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ab8:	d026      	beq.n	8004b08 <__ssputs_r+0x6c>
 8004aba:	6965      	ldr	r5, [r4, #20]
 8004abc:	6909      	ldr	r1, [r1, #16]
 8004abe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ac2:	eba3 0901 	sub.w	r9, r3, r1
 8004ac6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aca:	1c7b      	adds	r3, r7, #1
 8004acc:	444b      	add	r3, r9
 8004ace:	106d      	asrs	r5, r5, #1
 8004ad0:	429d      	cmp	r5, r3
 8004ad2:	bf38      	it	cc
 8004ad4:	461d      	movcc	r5, r3
 8004ad6:	0553      	lsls	r3, r2, #21
 8004ad8:	d527      	bpl.n	8004b2a <__ssputs_r+0x8e>
 8004ada:	4629      	mov	r1, r5
 8004adc:	f7ff ff52 	bl	8004984 <_malloc_r>
 8004ae0:	4606      	mov	r6, r0
 8004ae2:	b360      	cbz	r0, 8004b3e <__ssputs_r+0xa2>
 8004ae4:	6921      	ldr	r1, [r4, #16]
 8004ae6:	464a      	mov	r2, r9
 8004ae8:	f000 fae6 	bl	80050b8 <memcpy>
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	6126      	str	r6, [r4, #16]
 8004afa:	6165      	str	r5, [r4, #20]
 8004afc:	444e      	add	r6, r9
 8004afe:	eba5 0509 	sub.w	r5, r5, r9
 8004b02:	6026      	str	r6, [r4, #0]
 8004b04:	60a5      	str	r5, [r4, #8]
 8004b06:	463e      	mov	r6, r7
 8004b08:	42be      	cmp	r6, r7
 8004b0a:	d900      	bls.n	8004b0e <__ssputs_r+0x72>
 8004b0c:	463e      	mov	r6, r7
 8004b0e:	6820      	ldr	r0, [r4, #0]
 8004b10:	4632      	mov	r2, r6
 8004b12:	4641      	mov	r1, r8
 8004b14:	f000 faa6 	bl	8005064 <memmove>
 8004b18:	68a3      	ldr	r3, [r4, #8]
 8004b1a:	1b9b      	subs	r3, r3, r6
 8004b1c:	60a3      	str	r3, [r4, #8]
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	4433      	add	r3, r6
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	2000      	movs	r0, #0
 8004b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2a:	462a      	mov	r2, r5
 8004b2c:	f000 fad2 	bl	80050d4 <_realloc_r>
 8004b30:	4606      	mov	r6, r0
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d1e0      	bne.n	8004af8 <__ssputs_r+0x5c>
 8004b36:	6921      	ldr	r1, [r4, #16]
 8004b38:	4650      	mov	r0, sl
 8004b3a:	f7ff feb7 	bl	80048ac <_free_r>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	f8ca 3000 	str.w	r3, [sl]
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	e7e9      	b.n	8004b26 <__ssputs_r+0x8a>
	...

08004b54 <_svfiprintf_r>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	4698      	mov	r8, r3
 8004b5a:	898b      	ldrh	r3, [r1, #12]
 8004b5c:	061b      	lsls	r3, r3, #24
 8004b5e:	b09d      	sub	sp, #116	@ 0x74
 8004b60:	4607      	mov	r7, r0
 8004b62:	460d      	mov	r5, r1
 8004b64:	4614      	mov	r4, r2
 8004b66:	d510      	bpl.n	8004b8a <_svfiprintf_r+0x36>
 8004b68:	690b      	ldr	r3, [r1, #16]
 8004b6a:	b973      	cbnz	r3, 8004b8a <_svfiprintf_r+0x36>
 8004b6c:	2140      	movs	r1, #64	@ 0x40
 8004b6e:	f7ff ff09 	bl	8004984 <_malloc_r>
 8004b72:	6028      	str	r0, [r5, #0]
 8004b74:	6128      	str	r0, [r5, #16]
 8004b76:	b930      	cbnz	r0, 8004b86 <_svfiprintf_r+0x32>
 8004b78:	230c      	movs	r3, #12
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	b01d      	add	sp, #116	@ 0x74
 8004b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b86:	2340      	movs	r3, #64	@ 0x40
 8004b88:	616b      	str	r3, [r5, #20]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b8e:	2320      	movs	r3, #32
 8004b90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b98:	2330      	movs	r3, #48	@ 0x30
 8004b9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d38 <_svfiprintf_r+0x1e4>
 8004b9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ba2:	f04f 0901 	mov.w	r9, #1
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	469a      	mov	sl, r3
 8004baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bae:	b10a      	cbz	r2, 8004bb4 <_svfiprintf_r+0x60>
 8004bb0:	2a25      	cmp	r2, #37	@ 0x25
 8004bb2:	d1f9      	bne.n	8004ba8 <_svfiprintf_r+0x54>
 8004bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb8:	d00b      	beq.n	8004bd2 <_svfiprintf_r+0x7e>
 8004bba:	465b      	mov	r3, fp
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	f7ff ff6b 	bl	8004a9c <__ssputs_r>
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	f000 80a7 	beq.w	8004d1a <_svfiprintf_r+0x1c6>
 8004bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bce:	445a      	add	r2, fp
 8004bd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 809f 	beq.w	8004d1a <_svfiprintf_r+0x1c6>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295
 8004be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be6:	f10a 0a01 	add.w	sl, sl, #1
 8004bea:	9304      	str	r3, [sp, #16]
 8004bec:	9307      	str	r3, [sp, #28]
 8004bee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bf4:	4654      	mov	r4, sl
 8004bf6:	2205      	movs	r2, #5
 8004bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bfc:	484e      	ldr	r0, [pc, #312]	@ (8004d38 <_svfiprintf_r+0x1e4>)
 8004bfe:	f7fb fb0f 	bl	8000220 <memchr>
 8004c02:	9a04      	ldr	r2, [sp, #16]
 8004c04:	b9d8      	cbnz	r0, 8004c3e <_svfiprintf_r+0xea>
 8004c06:	06d0      	lsls	r0, r2, #27
 8004c08:	bf44      	itt	mi
 8004c0a:	2320      	movmi	r3, #32
 8004c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c10:	0711      	lsls	r1, r2, #28
 8004c12:	bf44      	itt	mi
 8004c14:	232b      	movmi	r3, #43	@ 0x2b
 8004c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c20:	d015      	beq.n	8004c4e <_svfiprintf_r+0xfa>
 8004c22:	9a07      	ldr	r2, [sp, #28]
 8004c24:	4654      	mov	r4, sl
 8004c26:	2000      	movs	r0, #0
 8004c28:	f04f 0c0a 	mov.w	ip, #10
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c32:	3b30      	subs	r3, #48	@ 0x30
 8004c34:	2b09      	cmp	r3, #9
 8004c36:	d94b      	bls.n	8004cd0 <_svfiprintf_r+0x17c>
 8004c38:	b1b0      	cbz	r0, 8004c68 <_svfiprintf_r+0x114>
 8004c3a:	9207      	str	r2, [sp, #28]
 8004c3c:	e014      	b.n	8004c68 <_svfiprintf_r+0x114>
 8004c3e:	eba0 0308 	sub.w	r3, r0, r8
 8004c42:	fa09 f303 	lsl.w	r3, r9, r3
 8004c46:	4313      	orrs	r3, r2
 8004c48:	9304      	str	r3, [sp, #16]
 8004c4a:	46a2      	mov	sl, r4
 8004c4c:	e7d2      	b.n	8004bf4 <_svfiprintf_r+0xa0>
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	1d19      	adds	r1, r3, #4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	9103      	str	r1, [sp, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bfbb      	ittet	lt
 8004c5a:	425b      	neglt	r3, r3
 8004c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c60:	9307      	strge	r3, [sp, #28]
 8004c62:	9307      	strlt	r3, [sp, #28]
 8004c64:	bfb8      	it	lt
 8004c66:	9204      	strlt	r2, [sp, #16]
 8004c68:	7823      	ldrb	r3, [r4, #0]
 8004c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c6c:	d10a      	bne.n	8004c84 <_svfiprintf_r+0x130>
 8004c6e:	7863      	ldrb	r3, [r4, #1]
 8004c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c72:	d132      	bne.n	8004cda <_svfiprintf_r+0x186>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	1d1a      	adds	r2, r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	9203      	str	r2, [sp, #12]
 8004c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c80:	3402      	adds	r4, #2
 8004c82:	9305      	str	r3, [sp, #20]
 8004c84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d48 <_svfiprintf_r+0x1f4>
 8004c88:	7821      	ldrb	r1, [r4, #0]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	4650      	mov	r0, sl
 8004c8e:	f7fb fac7 	bl	8000220 <memchr>
 8004c92:	b138      	cbz	r0, 8004ca4 <_svfiprintf_r+0x150>
 8004c94:	9b04      	ldr	r3, [sp, #16]
 8004c96:	eba0 000a 	sub.w	r0, r0, sl
 8004c9a:	2240      	movs	r2, #64	@ 0x40
 8004c9c:	4082      	lsls	r2, r0
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	3401      	adds	r4, #1
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca8:	4824      	ldr	r0, [pc, #144]	@ (8004d3c <_svfiprintf_r+0x1e8>)
 8004caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cae:	2206      	movs	r2, #6
 8004cb0:	f7fb fab6 	bl	8000220 <memchr>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d036      	beq.n	8004d26 <_svfiprintf_r+0x1d2>
 8004cb8:	4b21      	ldr	r3, [pc, #132]	@ (8004d40 <_svfiprintf_r+0x1ec>)
 8004cba:	bb1b      	cbnz	r3, 8004d04 <_svfiprintf_r+0x1b0>
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	3307      	adds	r3, #7
 8004cc0:	f023 0307 	bic.w	r3, r3, #7
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	9303      	str	r3, [sp, #12]
 8004cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cca:	4433      	add	r3, r6
 8004ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cce:	e76a      	b.n	8004ba6 <_svfiprintf_r+0x52>
 8004cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	e7a8      	b.n	8004c2c <_svfiprintf_r+0xd8>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	3401      	adds	r4, #1
 8004cde:	9305      	str	r3, [sp, #20]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f04f 0c0a 	mov.w	ip, #10
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cec:	3a30      	subs	r2, #48	@ 0x30
 8004cee:	2a09      	cmp	r2, #9
 8004cf0:	d903      	bls.n	8004cfa <_svfiprintf_r+0x1a6>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0c6      	beq.n	8004c84 <_svfiprintf_r+0x130>
 8004cf6:	9105      	str	r1, [sp, #20]
 8004cf8:	e7c4      	b.n	8004c84 <_svfiprintf_r+0x130>
 8004cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cfe:	4604      	mov	r4, r0
 8004d00:	2301      	movs	r3, #1
 8004d02:	e7f0      	b.n	8004ce6 <_svfiprintf_r+0x192>
 8004d04:	ab03      	add	r3, sp, #12
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	462a      	mov	r2, r5
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d44 <_svfiprintf_r+0x1f0>)
 8004d0c:	a904      	add	r1, sp, #16
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f3af 8000 	nop.w
 8004d14:	1c42      	adds	r2, r0, #1
 8004d16:	4606      	mov	r6, r0
 8004d18:	d1d6      	bne.n	8004cc8 <_svfiprintf_r+0x174>
 8004d1a:	89ab      	ldrh	r3, [r5, #12]
 8004d1c:	065b      	lsls	r3, r3, #25
 8004d1e:	f53f af2d 	bmi.w	8004b7c <_svfiprintf_r+0x28>
 8004d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d24:	e72c      	b.n	8004b80 <_svfiprintf_r+0x2c>
 8004d26:	ab03      	add	r3, sp, #12
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	462a      	mov	r2, r5
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <_svfiprintf_r+0x1f0>)
 8004d2e:	a904      	add	r1, sp, #16
 8004d30:	4638      	mov	r0, r7
 8004d32:	f000 f879 	bl	8004e28 <_printf_i>
 8004d36:	e7ed      	b.n	8004d14 <_svfiprintf_r+0x1c0>
 8004d38:	080051b8 	.word	0x080051b8
 8004d3c:	080051c2 	.word	0x080051c2
 8004d40:	00000000 	.word	0x00000000
 8004d44:	08004a9d 	.word	0x08004a9d
 8004d48:	080051be 	.word	0x080051be

08004d4c <_printf_common>:
 8004d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	4616      	mov	r6, r2
 8004d52:	4698      	mov	r8, r3
 8004d54:	688a      	ldr	r2, [r1, #8]
 8004d56:	690b      	ldr	r3, [r1, #16]
 8004d58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	bfb8      	it	lt
 8004d60:	4613      	movlt	r3, r2
 8004d62:	6033      	str	r3, [r6, #0]
 8004d64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d68:	4607      	mov	r7, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	b10a      	cbz	r2, 8004d72 <_printf_common+0x26>
 8004d6e:	3301      	adds	r3, #1
 8004d70:	6033      	str	r3, [r6, #0]
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	0699      	lsls	r1, r3, #26
 8004d76:	bf42      	ittt	mi
 8004d78:	6833      	ldrmi	r3, [r6, #0]
 8004d7a:	3302      	addmi	r3, #2
 8004d7c:	6033      	strmi	r3, [r6, #0]
 8004d7e:	6825      	ldr	r5, [r4, #0]
 8004d80:	f015 0506 	ands.w	r5, r5, #6
 8004d84:	d106      	bne.n	8004d94 <_printf_common+0x48>
 8004d86:	f104 0a19 	add.w	sl, r4, #25
 8004d8a:	68e3      	ldr	r3, [r4, #12]
 8004d8c:	6832      	ldr	r2, [r6, #0]
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	42ab      	cmp	r3, r5
 8004d92:	dc26      	bgt.n	8004de2 <_printf_common+0x96>
 8004d94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d98:	6822      	ldr	r2, [r4, #0]
 8004d9a:	3b00      	subs	r3, #0
 8004d9c:	bf18      	it	ne
 8004d9e:	2301      	movne	r3, #1
 8004da0:	0692      	lsls	r2, r2, #26
 8004da2:	d42b      	bmi.n	8004dfc <_printf_common+0xb0>
 8004da4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004da8:	4641      	mov	r1, r8
 8004daa:	4638      	mov	r0, r7
 8004dac:	47c8      	blx	r9
 8004dae:	3001      	adds	r0, #1
 8004db0:	d01e      	beq.n	8004df0 <_printf_common+0xa4>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	f003 0306 	and.w	r3, r3, #6
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	bf02      	ittt	eq
 8004dbe:	68e5      	ldreq	r5, [r4, #12]
 8004dc0:	6833      	ldreq	r3, [r6, #0]
 8004dc2:	1aed      	subeq	r5, r5, r3
 8004dc4:	68a3      	ldr	r3, [r4, #8]
 8004dc6:	bf0c      	ite	eq
 8004dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dcc:	2500      	movne	r5, #0
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	bfc4      	itt	gt
 8004dd2:	1a9b      	subgt	r3, r3, r2
 8004dd4:	18ed      	addgt	r5, r5, r3
 8004dd6:	2600      	movs	r6, #0
 8004dd8:	341a      	adds	r4, #26
 8004dda:	42b5      	cmp	r5, r6
 8004ddc:	d11a      	bne.n	8004e14 <_printf_common+0xc8>
 8004dde:	2000      	movs	r0, #0
 8004de0:	e008      	b.n	8004df4 <_printf_common+0xa8>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4652      	mov	r2, sl
 8004de6:	4641      	mov	r1, r8
 8004de8:	4638      	mov	r0, r7
 8004dea:	47c8      	blx	r9
 8004dec:	3001      	adds	r0, #1
 8004dee:	d103      	bne.n	8004df8 <_printf_common+0xac>
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df8:	3501      	adds	r5, #1
 8004dfa:	e7c6      	b.n	8004d8a <_printf_common+0x3e>
 8004dfc:	18e1      	adds	r1, r4, r3
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	2030      	movs	r0, #48	@ 0x30
 8004e02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e06:	4422      	add	r2, r4
 8004e08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e10:	3302      	adds	r3, #2
 8004e12:	e7c7      	b.n	8004da4 <_printf_common+0x58>
 8004e14:	2301      	movs	r3, #1
 8004e16:	4622      	mov	r2, r4
 8004e18:	4641      	mov	r1, r8
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	47c8      	blx	r9
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d0e6      	beq.n	8004df0 <_printf_common+0xa4>
 8004e22:	3601      	adds	r6, #1
 8004e24:	e7d9      	b.n	8004dda <_printf_common+0x8e>
	...

08004e28 <_printf_i>:
 8004e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	7e0f      	ldrb	r7, [r1, #24]
 8004e2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e30:	2f78      	cmp	r7, #120	@ 0x78
 8004e32:	4691      	mov	r9, r2
 8004e34:	4680      	mov	r8, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	469a      	mov	sl, r3
 8004e3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e3e:	d807      	bhi.n	8004e50 <_printf_i+0x28>
 8004e40:	2f62      	cmp	r7, #98	@ 0x62
 8004e42:	d80a      	bhi.n	8004e5a <_printf_i+0x32>
 8004e44:	2f00      	cmp	r7, #0
 8004e46:	f000 80d1 	beq.w	8004fec <_printf_i+0x1c4>
 8004e4a:	2f58      	cmp	r7, #88	@ 0x58
 8004e4c:	f000 80b8 	beq.w	8004fc0 <_printf_i+0x198>
 8004e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e58:	e03a      	b.n	8004ed0 <_printf_i+0xa8>
 8004e5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e5e:	2b15      	cmp	r3, #21
 8004e60:	d8f6      	bhi.n	8004e50 <_printf_i+0x28>
 8004e62:	a101      	add	r1, pc, #4	@ (adr r1, 8004e68 <_printf_i+0x40>)
 8004e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e68:	08004ec1 	.word	0x08004ec1
 8004e6c:	08004ed5 	.word	0x08004ed5
 8004e70:	08004e51 	.word	0x08004e51
 8004e74:	08004e51 	.word	0x08004e51
 8004e78:	08004e51 	.word	0x08004e51
 8004e7c:	08004e51 	.word	0x08004e51
 8004e80:	08004ed5 	.word	0x08004ed5
 8004e84:	08004e51 	.word	0x08004e51
 8004e88:	08004e51 	.word	0x08004e51
 8004e8c:	08004e51 	.word	0x08004e51
 8004e90:	08004e51 	.word	0x08004e51
 8004e94:	08004fd3 	.word	0x08004fd3
 8004e98:	08004eff 	.word	0x08004eff
 8004e9c:	08004f8d 	.word	0x08004f8d
 8004ea0:	08004e51 	.word	0x08004e51
 8004ea4:	08004e51 	.word	0x08004e51
 8004ea8:	08004ff5 	.word	0x08004ff5
 8004eac:	08004e51 	.word	0x08004e51
 8004eb0:	08004eff 	.word	0x08004eff
 8004eb4:	08004e51 	.word	0x08004e51
 8004eb8:	08004e51 	.word	0x08004e51
 8004ebc:	08004f95 	.word	0x08004f95
 8004ec0:	6833      	ldr	r3, [r6, #0]
 8004ec2:	1d1a      	adds	r2, r3, #4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6032      	str	r2, [r6, #0]
 8004ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e09c      	b.n	800500e <_printf_i+0x1e6>
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	6820      	ldr	r0, [r4, #0]
 8004ed8:	1d19      	adds	r1, r3, #4
 8004eda:	6031      	str	r1, [r6, #0]
 8004edc:	0606      	lsls	r6, r0, #24
 8004ede:	d501      	bpl.n	8004ee4 <_printf_i+0xbc>
 8004ee0:	681d      	ldr	r5, [r3, #0]
 8004ee2:	e003      	b.n	8004eec <_printf_i+0xc4>
 8004ee4:	0645      	lsls	r5, r0, #25
 8004ee6:	d5fb      	bpl.n	8004ee0 <_printf_i+0xb8>
 8004ee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	da03      	bge.n	8004ef8 <_printf_i+0xd0>
 8004ef0:	232d      	movs	r3, #45	@ 0x2d
 8004ef2:	426d      	negs	r5, r5
 8004ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef8:	4858      	ldr	r0, [pc, #352]	@ (800505c <_printf_i+0x234>)
 8004efa:	230a      	movs	r3, #10
 8004efc:	e011      	b.n	8004f22 <_printf_i+0xfa>
 8004efe:	6821      	ldr	r1, [r4, #0]
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	0608      	lsls	r0, r1, #24
 8004f04:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f08:	d402      	bmi.n	8004f10 <_printf_i+0xe8>
 8004f0a:	0649      	lsls	r1, r1, #25
 8004f0c:	bf48      	it	mi
 8004f0e:	b2ad      	uxthmi	r5, r5
 8004f10:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f12:	4852      	ldr	r0, [pc, #328]	@ (800505c <_printf_i+0x234>)
 8004f14:	6033      	str	r3, [r6, #0]
 8004f16:	bf14      	ite	ne
 8004f18:	230a      	movne	r3, #10
 8004f1a:	2308      	moveq	r3, #8
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f22:	6866      	ldr	r6, [r4, #4]
 8004f24:	60a6      	str	r6, [r4, #8]
 8004f26:	2e00      	cmp	r6, #0
 8004f28:	db05      	blt.n	8004f36 <_printf_i+0x10e>
 8004f2a:	6821      	ldr	r1, [r4, #0]
 8004f2c:	432e      	orrs	r6, r5
 8004f2e:	f021 0104 	bic.w	r1, r1, #4
 8004f32:	6021      	str	r1, [r4, #0]
 8004f34:	d04b      	beq.n	8004fce <_printf_i+0x1a6>
 8004f36:	4616      	mov	r6, r2
 8004f38:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f3c:	fb03 5711 	mls	r7, r3, r1, r5
 8004f40:	5dc7      	ldrb	r7, [r0, r7]
 8004f42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f46:	462f      	mov	r7, r5
 8004f48:	42bb      	cmp	r3, r7
 8004f4a:	460d      	mov	r5, r1
 8004f4c:	d9f4      	bls.n	8004f38 <_printf_i+0x110>
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d10b      	bne.n	8004f6a <_printf_i+0x142>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	07df      	lsls	r7, r3, #31
 8004f56:	d508      	bpl.n	8004f6a <_printf_i+0x142>
 8004f58:	6923      	ldr	r3, [r4, #16]
 8004f5a:	6861      	ldr	r1, [r4, #4]
 8004f5c:	4299      	cmp	r1, r3
 8004f5e:	bfde      	ittt	le
 8004f60:	2330      	movle	r3, #48	@ 0x30
 8004f62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f6a:	1b92      	subs	r2, r2, r6
 8004f6c:	6122      	str	r2, [r4, #16]
 8004f6e:	f8cd a000 	str.w	sl, [sp]
 8004f72:	464b      	mov	r3, r9
 8004f74:	aa03      	add	r2, sp, #12
 8004f76:	4621      	mov	r1, r4
 8004f78:	4640      	mov	r0, r8
 8004f7a:	f7ff fee7 	bl	8004d4c <_printf_common>
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d14a      	bne.n	8005018 <_printf_i+0x1f0>
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	b004      	add	sp, #16
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	f043 0320 	orr.w	r3, r3, #32
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	4832      	ldr	r0, [pc, #200]	@ (8005060 <_printf_i+0x238>)
 8004f96:	2778      	movs	r7, #120	@ 0x78
 8004f98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	6831      	ldr	r1, [r6, #0]
 8004fa0:	061f      	lsls	r7, r3, #24
 8004fa2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fa6:	d402      	bmi.n	8004fae <_printf_i+0x186>
 8004fa8:	065f      	lsls	r7, r3, #25
 8004faa:	bf48      	it	mi
 8004fac:	b2ad      	uxthmi	r5, r5
 8004fae:	6031      	str	r1, [r6, #0]
 8004fb0:	07d9      	lsls	r1, r3, #31
 8004fb2:	bf44      	itt	mi
 8004fb4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fb8:	6023      	strmi	r3, [r4, #0]
 8004fba:	b11d      	cbz	r5, 8004fc4 <_printf_i+0x19c>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	e7ad      	b.n	8004f1c <_printf_i+0xf4>
 8004fc0:	4826      	ldr	r0, [pc, #152]	@ (800505c <_printf_i+0x234>)
 8004fc2:	e7e9      	b.n	8004f98 <_printf_i+0x170>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	f023 0320 	bic.w	r3, r3, #32
 8004fca:	6023      	str	r3, [r4, #0]
 8004fcc:	e7f6      	b.n	8004fbc <_printf_i+0x194>
 8004fce:	4616      	mov	r6, r2
 8004fd0:	e7bd      	b.n	8004f4e <_printf_i+0x126>
 8004fd2:	6833      	ldr	r3, [r6, #0]
 8004fd4:	6825      	ldr	r5, [r4, #0]
 8004fd6:	6961      	ldr	r1, [r4, #20]
 8004fd8:	1d18      	adds	r0, r3, #4
 8004fda:	6030      	str	r0, [r6, #0]
 8004fdc:	062e      	lsls	r6, r5, #24
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	d501      	bpl.n	8004fe6 <_printf_i+0x1be>
 8004fe2:	6019      	str	r1, [r3, #0]
 8004fe4:	e002      	b.n	8004fec <_printf_i+0x1c4>
 8004fe6:	0668      	lsls	r0, r5, #25
 8004fe8:	d5fb      	bpl.n	8004fe2 <_printf_i+0x1ba>
 8004fea:	8019      	strh	r1, [r3, #0]
 8004fec:	2300      	movs	r3, #0
 8004fee:	6123      	str	r3, [r4, #16]
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	e7bc      	b.n	8004f6e <_printf_i+0x146>
 8004ff4:	6833      	ldr	r3, [r6, #0]
 8004ff6:	1d1a      	adds	r2, r3, #4
 8004ff8:	6032      	str	r2, [r6, #0]
 8004ffa:	681e      	ldr	r6, [r3, #0]
 8004ffc:	6862      	ldr	r2, [r4, #4]
 8004ffe:	2100      	movs	r1, #0
 8005000:	4630      	mov	r0, r6
 8005002:	f7fb f90d 	bl	8000220 <memchr>
 8005006:	b108      	cbz	r0, 800500c <_printf_i+0x1e4>
 8005008:	1b80      	subs	r0, r0, r6
 800500a:	6060      	str	r0, [r4, #4]
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	2300      	movs	r3, #0
 8005012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005016:	e7aa      	b.n	8004f6e <_printf_i+0x146>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	4632      	mov	r2, r6
 800501c:	4649      	mov	r1, r9
 800501e:	4640      	mov	r0, r8
 8005020:	47d0      	blx	sl
 8005022:	3001      	adds	r0, #1
 8005024:	d0ad      	beq.n	8004f82 <_printf_i+0x15a>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	079b      	lsls	r3, r3, #30
 800502a:	d413      	bmi.n	8005054 <_printf_i+0x22c>
 800502c:	68e0      	ldr	r0, [r4, #12]
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	4298      	cmp	r0, r3
 8005032:	bfb8      	it	lt
 8005034:	4618      	movlt	r0, r3
 8005036:	e7a6      	b.n	8004f86 <_printf_i+0x15e>
 8005038:	2301      	movs	r3, #1
 800503a:	4632      	mov	r2, r6
 800503c:	4649      	mov	r1, r9
 800503e:	4640      	mov	r0, r8
 8005040:	47d0      	blx	sl
 8005042:	3001      	adds	r0, #1
 8005044:	d09d      	beq.n	8004f82 <_printf_i+0x15a>
 8005046:	3501      	adds	r5, #1
 8005048:	68e3      	ldr	r3, [r4, #12]
 800504a:	9903      	ldr	r1, [sp, #12]
 800504c:	1a5b      	subs	r3, r3, r1
 800504e:	42ab      	cmp	r3, r5
 8005050:	dcf2      	bgt.n	8005038 <_printf_i+0x210>
 8005052:	e7eb      	b.n	800502c <_printf_i+0x204>
 8005054:	2500      	movs	r5, #0
 8005056:	f104 0619 	add.w	r6, r4, #25
 800505a:	e7f5      	b.n	8005048 <_printf_i+0x220>
 800505c:	080051c9 	.word	0x080051c9
 8005060:	080051da 	.word	0x080051da

08005064 <memmove>:
 8005064:	4288      	cmp	r0, r1
 8005066:	b510      	push	{r4, lr}
 8005068:	eb01 0402 	add.w	r4, r1, r2
 800506c:	d902      	bls.n	8005074 <memmove+0x10>
 800506e:	4284      	cmp	r4, r0
 8005070:	4623      	mov	r3, r4
 8005072:	d807      	bhi.n	8005084 <memmove+0x20>
 8005074:	1e43      	subs	r3, r0, #1
 8005076:	42a1      	cmp	r1, r4
 8005078:	d008      	beq.n	800508c <memmove+0x28>
 800507a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800507e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005082:	e7f8      	b.n	8005076 <memmove+0x12>
 8005084:	4402      	add	r2, r0
 8005086:	4601      	mov	r1, r0
 8005088:	428a      	cmp	r2, r1
 800508a:	d100      	bne.n	800508e <memmove+0x2a>
 800508c:	bd10      	pop	{r4, pc}
 800508e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005096:	e7f7      	b.n	8005088 <memmove+0x24>

08005098 <_sbrk_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4d06      	ldr	r5, [pc, #24]	@ (80050b4 <_sbrk_r+0x1c>)
 800509c:	2300      	movs	r3, #0
 800509e:	4604      	mov	r4, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	f7fb fe20 	bl	8000ce8 <_sbrk>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_sbrk_r+0x1a>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_sbrk_r+0x1a>
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	200003b4 	.word	0x200003b4

080050b8 <memcpy>:
 80050b8:	440a      	add	r2, r1
 80050ba:	4291      	cmp	r1, r2
 80050bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80050c0:	d100      	bne.n	80050c4 <memcpy+0xc>
 80050c2:	4770      	bx	lr
 80050c4:	b510      	push	{r4, lr}
 80050c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ce:	4291      	cmp	r1, r2
 80050d0:	d1f9      	bne.n	80050c6 <memcpy+0xe>
 80050d2:	bd10      	pop	{r4, pc}

080050d4 <_realloc_r>:
 80050d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d8:	4607      	mov	r7, r0
 80050da:	4614      	mov	r4, r2
 80050dc:	460d      	mov	r5, r1
 80050de:	b921      	cbnz	r1, 80050ea <_realloc_r+0x16>
 80050e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050e4:	4611      	mov	r1, r2
 80050e6:	f7ff bc4d 	b.w	8004984 <_malloc_r>
 80050ea:	b92a      	cbnz	r2, 80050f8 <_realloc_r+0x24>
 80050ec:	f7ff fbde 	bl	80048ac <_free_r>
 80050f0:	4625      	mov	r5, r4
 80050f2:	4628      	mov	r0, r5
 80050f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f8:	f000 f81a 	bl	8005130 <_malloc_usable_size_r>
 80050fc:	4284      	cmp	r4, r0
 80050fe:	4606      	mov	r6, r0
 8005100:	d802      	bhi.n	8005108 <_realloc_r+0x34>
 8005102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005106:	d8f4      	bhi.n	80050f2 <_realloc_r+0x1e>
 8005108:	4621      	mov	r1, r4
 800510a:	4638      	mov	r0, r7
 800510c:	f7ff fc3a 	bl	8004984 <_malloc_r>
 8005110:	4680      	mov	r8, r0
 8005112:	b908      	cbnz	r0, 8005118 <_realloc_r+0x44>
 8005114:	4645      	mov	r5, r8
 8005116:	e7ec      	b.n	80050f2 <_realloc_r+0x1e>
 8005118:	42b4      	cmp	r4, r6
 800511a:	4622      	mov	r2, r4
 800511c:	4629      	mov	r1, r5
 800511e:	bf28      	it	cs
 8005120:	4632      	movcs	r2, r6
 8005122:	f7ff ffc9 	bl	80050b8 <memcpy>
 8005126:	4629      	mov	r1, r5
 8005128:	4638      	mov	r0, r7
 800512a:	f7ff fbbf 	bl	80048ac <_free_r>
 800512e:	e7f1      	b.n	8005114 <_realloc_r+0x40>

08005130 <_malloc_usable_size_r>:
 8005130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005134:	1f18      	subs	r0, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	bfbc      	itt	lt
 800513a:	580b      	ldrlt	r3, [r1, r0]
 800513c:	18c0      	addlt	r0, r0, r3
 800513e:	4770      	bx	lr

08005140 <_init>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr

0800514c <_fini>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr
