
Laser_Reciever_prot_OOK_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008308  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  080084e8  080084e8  000094e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088bc  080088bc  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080088bc  080088bc  000098bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088c4  080088c4  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088c4  080088c4  000098c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088c8  080088c8  000098c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080088cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d8  08008aa0  0000a1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08008aa0  0000a4cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f1b  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002643  00000000  00000000  0001d11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d44  00000000  00000000  00020868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002734c  00000000  00000000  000215ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001387c  00000000  00000000  000488f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd976  00000000  00000000  0005c174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159aea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005980  00000000  00000000  00159b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0015f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080084d0 	.word	0x080084d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	080084d0 	.word	0x080084d0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	0000      	movs	r0, r0
	...

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f000 fc96 	bl	800185e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f935 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f000 fa35 	bl	80013a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f3a:	f000 f9e7 	bl	800130c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f3e:	f000 f96f 	bl	8001220 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f42:	4b85      	ldr	r3, [pc, #532]	@ (8001158 <main+0x230>)
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	4a84      	ldr	r2, [pc, #528]	@ (8001158 <main+0x230>)
 8000f48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f4c:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000f4e:	4b83      	ldr	r3, [pc, #524]	@ (800115c <main+0x234>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f54:	4b81      	ldr	r3, [pc, #516]	@ (800115c <main+0x234>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a80      	ldr	r2, [pc, #512]	@ (800115c <main+0x234>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]

  TIM2->CCR3 = 500;
 8000f60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f64:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f68:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	487c      	ldr	r0, [pc, #496]	@ (8001160 <main+0x238>)
 8000f6e:	f002 f939 	bl	80031e4 <HAL_TIM_PWM_Start>
  start = DWT->CYCCNT;
 8000f72:	4b7a      	ldr	r3, [pc, #488]	@ (800115c <main+0x234>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4a7b      	ldr	r2, [pc, #492]	@ (8001164 <main+0x23c>)
 8000f78:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, (uint8_t*)"\n\rAwaiting the message\n\r", 24, 5);
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	2218      	movs	r2, #24
 8000f7e:	497a      	ldr	r1, [pc, #488]	@ (8001168 <main+0x240>)
 8000f80:	487a      	ldr	r0, [pc, #488]	@ (800116c <main+0x244>)
 8000f82:	f003 f9f1 	bl	8004368 <HAL_UART_Transmit>
	  while(cur_light != 1){
 8000f86:	e007      	b.n	8000f98 <main+0x70>
		  cur_light = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000f88:	2180      	movs	r1, #128	@ 0x80
 8000f8a:	4879      	ldr	r0, [pc, #484]	@ (8001170 <main+0x248>)
 8000f8c:	f001 f82a 	bl	8001fe4 <HAL_GPIO_ReadPin>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b77      	ldr	r3, [pc, #476]	@ (8001174 <main+0x24c>)
 8000f96:	701a      	strb	r2, [r3, #0]
	  while(cur_light != 1){
 8000f98:	4b76      	ldr	r3, [pc, #472]	@ (8001174 <main+0x24c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d1f3      	bne.n	8000f88 <main+0x60>
		  //HAL_Delay(0.1);
	  }
	  int i = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
	  while(zero_count < 8){
 8000fa4:	e094      	b.n	80010d0 <main+0x1a8>
		  start = DWT->CYCCNT;
 8000fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800115c <main+0x234>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	4a6e      	ldr	r2, [pc, #440]	@ (8001164 <main+0x23c>)
 8000fac:	6013      	str	r3, [r2, #0]
		  stop = DWT->CYCCNT;
 8000fae:	4b6b      	ldr	r3, [pc, #428]	@ (800115c <main+0x234>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4a71      	ldr	r2, [pc, #452]	@ (8001178 <main+0x250>)
 8000fb4:	6013      	str	r3, [r2, #0]
		  elapsed = stop - start;
 8000fb6:	4b70      	ldr	r3, [pc, #448]	@ (8001178 <main+0x250>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b6a      	ldr	r3, [pc, #424]	@ (8001164 <main+0x23c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800117c <main+0x254>)
 8000fc2:	6013      	str	r3, [r2, #0]
	  	  elapsedtime = (1.0 / (double)SystemCoreClock) * (double)elapsed;
 8000fc4:	4b6e      	ldr	r3, [pc, #440]	@ (8001180 <main+0x258>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fac3 	bl	8000554 <__aeabi_ui2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	496b      	ldr	r1, [pc, #428]	@ (8001184 <main+0x25c>)
 8000fd8:	f7ff fc60 	bl	800089c <__aeabi_ddiv>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4614      	mov	r4, r2
 8000fe2:	461d      	mov	r5, r3
 8000fe4:	4b65      	ldr	r3, [pc, #404]	@ (800117c <main+0x254>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fab3 	bl	8000554 <__aeabi_ui2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	f7ff fb27 	bl	8000648 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4962      	ldr	r1, [pc, #392]	@ (8001188 <main+0x260>)
 8001000:	e9c1 2300 	strd	r2, r3, [r1]
		  cur_sum = 0;
 8001004:	4b61      	ldr	r3, [pc, #388]	@ (800118c <main+0x264>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
		  while(elapsedtime < 0.01095){
 800100a:	e03c      	b.n	8001086 <main+0x15e>
			  cur_light = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 800100c:	2180      	movs	r1, #128	@ 0x80
 800100e:	4858      	ldr	r0, [pc, #352]	@ (8001170 <main+0x248>)
 8001010:	f000 ffe8 	bl	8001fe4 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	4b56      	ldr	r3, [pc, #344]	@ (8001174 <main+0x24c>)
 800101a:	701a      	strb	r2, [r3, #0]
			  if (cur_light){
 800101c:	4b55      	ldr	r3, [pc, #340]	@ (8001174 <main+0x24c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <main+0x108>
				  cur_sum++;
 8001024:	4b59      	ldr	r3, [pc, #356]	@ (800118c <main+0x264>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b57      	ldr	r3, [pc, #348]	@ (800118c <main+0x264>)
 800102e:	701a      	strb	r2, [r3, #0]
			  }else{
				  //HAL_UART_Transmit(&huart2, (uint8_t*)"0", 1, 5);
				  //sprintf(tx_buffer, " %f\n\r", elapsedtime);
				  //HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, 32, 5);
			  }
			  stop = DWT->CYCCNT;
 8001030:	4b4a      	ldr	r3, [pc, #296]	@ (800115c <main+0x234>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4a50      	ldr	r2, [pc, #320]	@ (8001178 <main+0x250>)
 8001036:	6013      	str	r3, [r2, #0]
			  elapsed = stop - start;
 8001038:	4b4f      	ldr	r3, [pc, #316]	@ (8001178 <main+0x250>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b49      	ldr	r3, [pc, #292]	@ (8001164 <main+0x23c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	4a4e      	ldr	r2, [pc, #312]	@ (800117c <main+0x254>)
 8001044:	6013      	str	r3, [r2, #0]
	  	  	  elapsedtime = (1.0 / (double)SystemCoreClock) * (double)elapsed;
 8001046:	4b4e      	ldr	r3, [pc, #312]	@ (8001180 <main+0x258>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa82 	bl	8000554 <__aeabi_ui2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	f04f 0000 	mov.w	r0, #0
 8001058:	494a      	ldr	r1, [pc, #296]	@ (8001184 <main+0x25c>)
 800105a:	f7ff fc1f 	bl	800089c <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4614      	mov	r4, r2
 8001064:	461d      	mov	r5, r3
 8001066:	4b45      	ldr	r3, [pc, #276]	@ (800117c <main+0x254>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa72 	bl	8000554 <__aeabi_ui2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	f7ff fae6 	bl	8000648 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4941      	ldr	r1, [pc, #260]	@ (8001188 <main+0x260>)
 8001082:	e9c1 2300 	strd	r2, r3, [r1]
		  while(elapsedtime < 0.01095){
 8001086:	4b40      	ldr	r3, [pc, #256]	@ (8001188 <main+0x260>)
 8001088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800108c:	a330      	add	r3, pc, #192	@ (adr r3, 8001150 <main+0x228>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fd4b 	bl	8000b2c <__aeabi_dcmplt>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1b7      	bne.n	800100c <main+0xe4>
		  }
		  if(cur_sum > 120){
 800109c:	4b3b      	ldr	r3, [pc, #236]	@ (800118c <main+0x264>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b78      	cmp	r3, #120	@ 0x78
 80010a2:	d909      	bls.n	80010b8 <main+0x190>
			  rec_buff[i++] = 1;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	4a39      	ldr	r2, [pc, #228]	@ (8001190 <main+0x268>)
 80010ac:	2101      	movs	r1, #1
 80010ae:	54d1      	strb	r1, [r2, r3]
			  zero_count = 0;
 80010b0:	4b38      	ldr	r3, [pc, #224]	@ (8001194 <main+0x26c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e00b      	b.n	80010d0 <main+0x1a8>
		  }else{
			  rec_buff[i++] = 0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	4a34      	ldr	r2, [pc, #208]	@ (8001190 <main+0x268>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	54d1      	strb	r1, [r2, r3]
			  zero_count++;
 80010c4:	4b33      	ldr	r3, [pc, #204]	@ (8001194 <main+0x26c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b31      	ldr	r3, [pc, #196]	@ (8001194 <main+0x26c>)
 80010ce:	701a      	strb	r2, [r3, #0]
	  while(zero_count < 8){
 80010d0:	4b30      	ldr	r3, [pc, #192]	@ (8001194 <main+0x26c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b07      	cmp	r3, #7
 80010d6:	f67f af66 	bls.w	8000fa6 <main+0x7e>
		  }
		  //rec_buff[i] = cur_sum;
		  //i++;
	  }
	  zero_count = 0;
 80010da:	4b2e      	ldr	r3, [pc, #184]	@ (8001194 <main+0x26c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
	  int j = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	603b      	str	r3, [r7, #0]
	  while(zero_count < 8){
 80010e4:	e026      	b.n	8001134 <main+0x20c>
		  sprintf(tx_buffer, "%d", rec_buff[j]);
 80010e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001190 <main+0x268>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4929      	ldr	r1, [pc, #164]	@ (8001198 <main+0x270>)
 80010f2:	482a      	ldr	r0, [pc, #168]	@ (800119c <main+0x274>)
 80010f4:	f005 f8ba 	bl	800626c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, 32, 1);
 80010f8:	2301      	movs	r3, #1
 80010fa:	2220      	movs	r2, #32
 80010fc:	4927      	ldr	r1, [pc, #156]	@ (800119c <main+0x274>)
 80010fe:	481b      	ldr	r0, [pc, #108]	@ (800116c <main+0x244>)
 8001100:	f003 f932 	bl	8004368 <HAL_UART_Transmit>
		  if(rec_buff[j] == 0){
 8001104:	4a22      	ldr	r2, [pc, #136]	@ (8001190 <main+0x268>)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d106      	bne.n	800111e <main+0x1f6>
			  zero_count++;
 8001110:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <main+0x26c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <main+0x26c>)
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e002      	b.n	8001124 <main+0x1fc>
		  }else{
			  zero_count = 0;
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <main+0x26c>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
		  }
		  rec_buff[j] = 0;
 8001124:	4a1a      	ldr	r2, [pc, #104]	@ (8001190 <main+0x268>)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	4413      	add	r3, r2
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
		  j++;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	603b      	str	r3, [r7, #0]
	  while(zero_count < 8){
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <main+0x26c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b07      	cmp	r3, #7
 800113a:	d9d4      	bls.n	80010e6 <main+0x1be>
	  }
	  cur_light = 0;
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <main+0x24c>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
	  zero_count = 0;
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <main+0x26c>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
  {
 8001148:	e717      	b.n	8000f7a <main+0x52>
 800114a:	bf00      	nop
 800114c:	f3af 8000 	nop.w
 8001150:	1f212d77 	.word	0x1f212d77
 8001154:	3f866cf4 	.word	0x3f866cf4
 8001158:	e000edf0 	.word	0xe000edf0
 800115c:	e0001000 	.word	0xe0001000
 8001160:	200001f4 	.word	0x200001f4
 8001164:	20000364 	.word	0x20000364
 8001168:	080084e8 	.word	0x080084e8
 800116c:	20000240 	.word	0x20000240
 8001170:	48000800 	.word	0x48000800
 8001174:	200002d4 	.word	0x200002d4
 8001178:	20000368 	.word	0x20000368
 800117c:	2000036c 	.word	0x2000036c
 8001180:	20000000 	.word	0x20000000
 8001184:	3ff00000 	.word	0x3ff00000
 8001188:	20000370 	.word	0x20000370
 800118c:	200002d6 	.word	0x200002d6
 8001190:	200002d8 	.word	0x200002d8
 8001194:	200002d5 	.word	0x200002d5
 8001198:	08008504 	.word	0x08008504
 800119c:	20000344 	.word	0x20000344

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	@ 0x50
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	2238      	movs	r2, #56	@ 0x38
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 f8c1 	bl	8006336 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011c6:	f000 ff25 	bl	8002014 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d4:	2340      	movs	r3, #64	@ 0x40
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 ffcb 	bl	800217c <HAL_RCC_OscConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011ec:	f000 f91e 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f0:	230f      	movs	r3, #15
 80011f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011f4:	2301      	movs	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f001 fac9 	bl	80027a0 <HAL_RCC_ClockConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001214:	f000 f90a 	bl	800142c <Error_Handler>
  }
}
 8001218:	bf00      	nop
 800121a:	3750      	adds	r7, #80	@ 0x50
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	@ 0x38
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]
 8001250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001252:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001254:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001258:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800125a:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <MX_TIM2_Init+0xe8>)
 800125c:	220f      	movs	r2, #15
 800125e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001266:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001268:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127a:	4823      	ldr	r0, [pc, #140]	@ (8001308 <MX_TIM2_Init+0xe8>)
 800127c:	f001 fefa 	bl	8003074 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001286:	f000 f8d1 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001294:	4619      	mov	r1, r3
 8001296:	481c      	ldr	r0, [pc, #112]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001298:	f002 f9ca 	bl	8003630 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012a2:	f000 f8c3 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012a6:	4818      	ldr	r0, [pc, #96]	@ (8001308 <MX_TIM2_Init+0xe8>)
 80012a8:	f001 ff3b 	bl	8003122 <HAL_TIM_PWM_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012b2:	f000 f8bb 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	4810      	ldr	r0, [pc, #64]	@ (8001308 <MX_TIM2_Init+0xe8>)
 80012c6:	f002 ff69 	bl	800419c <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012d0:	f000 f8ac 	bl	800142c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d4:	2360      	movs	r3, #96	@ 0x60
 80012d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	2208      	movs	r2, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	@ (8001308 <MX_TIM2_Init+0xe8>)
 80012ec:	f002 f88c 	bl	8003408 <HAL_TIM_PWM_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012f6:	f000 f899 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <MX_TIM2_Init+0xe8>)
 80012fc:	f000 f8de 	bl	80014bc <HAL_TIM_MspPostInit>

}
 8001300:	bf00      	nop
 8001302:	3738      	adds	r7, #56	@ 0x38
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001f4 	.word	0x200001f4

0800130c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001310:	4b22      	ldr	r3, [pc, #136]	@ (800139c <MX_USART2_UART_Init+0x90>)
 8001312:	4a23      	ldr	r2, [pc, #140]	@ (80013a0 <MX_USART2_UART_Init+0x94>)
 8001314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001316:	4b21      	ldr	r3, [pc, #132]	@ (800139c <MX_USART2_UART_Init+0x90>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <MX_USART2_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <MX_USART2_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <MX_USART2_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_USART2_UART_Init+0x90>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <MX_USART2_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b17      	ldr	r3, [pc, #92]	@ (800139c <MX_USART2_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001342:	4b16      	ldr	r3, [pc, #88]	@ (800139c <MX_USART2_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_USART2_UART_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134e:	4b13      	ldr	r3, [pc, #76]	@ (800139c <MX_USART2_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001354:	4811      	ldr	r0, [pc, #68]	@ (800139c <MX_USART2_UART_Init+0x90>)
 8001356:	f002 ffb7 	bl	80042c8 <HAL_UART_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001360:	f000 f864 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001364:	2100      	movs	r1, #0
 8001366:	480d      	ldr	r0, [pc, #52]	@ (800139c <MX_USART2_UART_Init+0x90>)
 8001368:	f004 f99d 	bl	80056a6 <HAL_UARTEx_SetTxFifoThreshold>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001372:	f000 f85b 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001376:	2100      	movs	r1, #0
 8001378:	4808      	ldr	r0, [pc, #32]	@ (800139c <MX_USART2_UART_Init+0x90>)
 800137a:	f004 f9d2 	bl	8005722 <HAL_UARTEx_SetRxFifoThreshold>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001384:	f000 f852 	bl	800142c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	@ (800139c <MX_USART2_UART_Init+0x90>)
 800138a:	f004 f953 	bl	8005634 <HAL_UARTEx_DisableFifoMode>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001394:	f000 f84a 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000240 	.word	0x20000240
 80013a0:	40004400 	.word	0x40004400

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_GPIO_Init+0x80>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	4a19      	ldr	r2, [pc, #100]	@ (8001424 <MX_GPIO_Init+0x80>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <MX_GPIO_Init+0x80>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <MX_GPIO_Init+0x80>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	4a13      	ldr	r2, [pc, #76]	@ (8001424 <MX_GPIO_Init+0x80>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <MX_GPIO_Init+0x80>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_GPIO_Init+0x80>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <MX_GPIO_Init+0x80>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <MX_GPIO_Init+0x80>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001402:	2380      	movs	r3, #128	@ 0x80
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	4619      	mov	r1, r3
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_GPIO_Init+0x84>)
 8001416:	f000 fc63 	bl	8001ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	48000800 	.word	0x48000800

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <Error_Handler+0x8>

08001438 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <HAL_MspInit+0x44>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	4a0e      	ldr	r2, [pc, #56]	@ (800147c <HAL_MspInit+0x44>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6613      	str	r3, [r2, #96]	@ 0x60
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <HAL_MspInit+0x44>)
 800144c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_MspInit+0x44>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145a:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_MspInit+0x44>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001460:	6593      	str	r3, [r2, #88]	@ 0x58
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_MspInit+0x44>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800146e:	f000 fe75 	bl	800215c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001490:	d10b      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_TIM_Base_MspInit+0x38>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_TIM_Base_MspInit+0x38>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6593      	str	r3, [r2, #88]	@ 0x58
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_TIM_Base_MspInit+0x38>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014dc:	d11c      	bne.n	8001518 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <HAL_TIM_MspPostInit+0x64>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001520 <HAL_TIM_MspPostInit+0x64>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <HAL_TIM_MspPostInit+0x64>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001508:	2301      	movs	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	4804      	ldr	r0, [pc, #16]	@ (8001524 <HAL_TIM_MspPostInit+0x68>)
 8001514:	f000 fbe4 	bl	8001ce0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400

08001528 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09e      	sub	sp, #120	@ 0x78
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	2254      	movs	r2, #84	@ 0x54
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f004 fef4 	bl	8006336 <memset>
  if(huart->Instance==USART2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <HAL_UART_MspInit+0xb8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d13e      	bne.n	80015d6 <HAL_UART_MspInit+0xae>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001558:	2302      	movs	r3, #2
 800155a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f001 fb37 	bl	8002bd8 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001570:	f7ff ff5c 	bl	800142c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_UART_MspInit+0xbc>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001578:	4a1a      	ldr	r2, [pc, #104]	@ (80015e4 <HAL_UART_MspInit+0xbc>)
 800157a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <HAL_UART_MspInit+0xbc>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_UART_MspInit+0xbc>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <HAL_UART_MspInit+0xbc>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_UART_MspInit+0xbc>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015a4:	230c      	movs	r3, #12
 80015a6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b4:	2307      	movs	r3, #7
 80015b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c2:	f000 fb8d 	bl	8001ce0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2026      	movs	r0, #38	@ 0x26
 80015cc:	f000 fa93 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d0:	2026      	movs	r0, #38	@ 0x26
 80015d2:	f000 faaa 	bl	8001b2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80015d6:	bf00      	nop
 80015d8:	3778      	adds	r7, #120	@ 0x78
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40004400 	.word	0x40004400
 80015e4:	40021000 	.word	0x40021000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <NMI_Handler+0x4>

080015f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <MemManage_Handler+0x4>

08001600 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <UsageFault_Handler+0x4>

08001610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f000 f961 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <USART2_IRQHandler+0x10>)
 800164e:	f002 ff19 	bl	8004484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000240 	.word	0x20000240

0800165c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_kill>:

int _kill(int pid, int sig)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001676:	f004 feb1 	bl	80063dc <__errno>
 800167a:	4603      	mov	r3, r0
 800167c:	2216      	movs	r2, #22
 800167e:	601a      	str	r2, [r3, #0]
  return -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_exit>:

void _exit (int status)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffe7 	bl	800166c <_kill>
  while (1) {}    /* Make sure we hang here */
 800169e:	bf00      	nop
 80016a0:	e7fd      	b.n	800169e <_exit+0x12>

080016a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	e00a      	b.n	80016ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b4:	f3af 8000 	nop.w
 80016b8:	4601      	mov	r1, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	60ba      	str	r2, [r7, #8]
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	dbf0      	blt.n	80016b4 <_read+0x12>
  }

  return len;
 80016d2:	687b      	ldr	r3, [r7, #4]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e009      	b.n	8001702 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	60ba      	str	r2, [r7, #8]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3301      	adds	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	dbf1      	blt.n	80016ee <_write+0x12>
  }
  return len;
 800170a:	687b      	ldr	r3, [r7, #4]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_close>:

int _close(int file)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800173c:	605a      	str	r2, [r3, #4]
  return 0;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_isatty>:

int _isatty(int file)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	@ (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f004 fe16 	bl	80063dc <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20020000 	.word	0x20020000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	20000378 	.word	0x20000378
 80017e4:	200004d0 	.word	0x200004d0

080017e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <SystemInit+0x20>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <SystemInit+0x20>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800180c:	480d      	ldr	r0, [pc, #52]	@ (8001844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800180e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001810:	f7ff ffea 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	@ (8001848 <LoopForever+0x6>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	@ (800184c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <LoopForever+0xe>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	@ (8001858 <LoopForever+0x16>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f004 fdd5 	bl	80063e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800183e:	f7ff fb73 	bl	8000f28 <main>

08001842 <LoopForever>:

LoopForever:
    b LoopForever
 8001842:	e7fe      	b.n	8001842 <LoopForever>
  ldr   r0, =_estack
 8001844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800184c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001850:	080088cc 	.word	0x080088cc
  ldr r2, =_sbss
 8001854:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001858:	200004cc 	.word	0x200004cc

0800185c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC1_2_IRQHandler>

0800185e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 f939 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186e:	200f      	movs	r0, #15
 8001870:	f000 f80e 	bl	8001890 <HAL_InitTick>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	71fb      	strb	r3, [r7, #7]
 800187e:	e001      	b.n	8001884 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001880:	f7ff fdda 	bl	8001438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001884:	79fb      	ldrb	r3, [r7, #7]

}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800189c:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <HAL_InitTick+0x68>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d022      	beq.n	80018ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018a4:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <HAL_InitTick+0x6c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_InitTick+0x68>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f944 	bl	8001b46 <HAL_SYSTICK_Config>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10f      	bne.n	80018e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	d809      	bhi.n	80018de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ca:	2200      	movs	r2, #0
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	f04f 30ff 	mov.w	r0, #4294967295
 80018d2:	f000 f910 	bl	8001af6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <HAL_InitTick+0x70>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e007      	b.n	80018ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	e004      	b.n	80018ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	e001      	b.n	80018ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_IncTick+0x1c>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_IncTick+0x20>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4413      	add	r3, r2
 8001912:	4a03      	ldr	r2, [pc, #12]	@ (8001920 <HAL_IncTick+0x1c>)
 8001914:	6013      	str	r3, [r2, #0]
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	2000037c 	.word	0x2000037c
 8001924:	20000008 	.word	0x20000008

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	2000037c 	.word	0x2000037c

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4907      	ldr	r1, [pc, #28]	@ (80019dc <__NVIC_EnableIRQ+0x38>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	@ (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	@ (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff29 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff40 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff90 	bl	8001a34 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5f 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff33 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa4 	bl	8001a9c <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d005      	beq.n	8001b82 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e037      	b.n	8001bf2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 020e 	bic.w	r2, r2, #14
 8001b90:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ba0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f003 021f 	and.w	r2, r3, #31
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001be6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bf0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d00d      	beq.n	8001c44 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	e047      	b.n	8001cd4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 020e 	bic.w	r2, r2, #14
 8001c52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c90:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00c      	beq.n	8001cb4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ca8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001cb2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
    }
  }
  return status;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cee:	e15a      	b.n	8001fa6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 814c 	beq.w	8001fa0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d005      	beq.n	8001d20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d130      	bne.n	8001d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d56:	2201      	movs	r2, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 0201 	and.w	r2, r3, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d017      	beq.n	8001dbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d123      	bne.n	8001e12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	08da      	lsrs	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	6939      	ldr	r1, [r7, #16]
 8001e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0203 	and.w	r2, r3, #3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a6 	beq.w	8001fa0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e54:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc4 <HAL_GPIO_Init+0x2e4>)
 8001e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e58:	4a5a      	ldr	r2, [pc, #360]	@ (8001fc4 <HAL_GPIO_Init+0x2e4>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e60:	4b58      	ldr	r3, [pc, #352]	@ (8001fc4 <HAL_GPIO_Init+0x2e4>)
 8001e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6c:	4a56      	ldr	r2, [pc, #344]	@ (8001fc8 <HAL_GPIO_Init+0x2e8>)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	220f      	movs	r2, #15
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e96:	d01f      	beq.n	8001ed8 <HAL_GPIO_Init+0x1f8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a4c      	ldr	r2, [pc, #304]	@ (8001fcc <HAL_GPIO_Init+0x2ec>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d019      	beq.n	8001ed4 <HAL_GPIO_Init+0x1f4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a4b      	ldr	r2, [pc, #300]	@ (8001fd0 <HAL_GPIO_Init+0x2f0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <HAL_GPIO_Init+0x1f0>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a4a      	ldr	r2, [pc, #296]	@ (8001fd4 <HAL_GPIO_Init+0x2f4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00d      	beq.n	8001ecc <HAL_GPIO_Init+0x1ec>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a49      	ldr	r2, [pc, #292]	@ (8001fd8 <HAL_GPIO_Init+0x2f8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d007      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a48      	ldr	r2, [pc, #288]	@ (8001fdc <HAL_GPIO_Init+0x2fc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_GPIO_Init+0x1e4>
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	e00a      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	e008      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ec8:	2304      	movs	r3, #4
 8001eca:	e006      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e004      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e002      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_GPIO_Init+0x1fa>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	f002 0203 	and.w	r2, r2, #3
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	4093      	lsls	r3, r2
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eea:	4937      	ldr	r1, [pc, #220]	@ (8001fc8 <HAL_GPIO_Init+0x2e8>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef8:	4b39      	ldr	r3, [pc, #228]	@ (8001fe0 <HAL_GPIO_Init+0x300>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1c:	4a30      	ldr	r2, [pc, #192]	@ (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f22:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f46:	4a26      	ldr	r2, [pc, #152]	@ (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f70:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f9a:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_GPIO_Init+0x300>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f ae9d 	bne.w	8001cf0 <HAL_GPIO_Init+0x10>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000c00 	.word	0x48000c00
 8001fd8:	48001000 	.word	0x48001000
 8001fdc:	48001400 	.word	0x48001400
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	887b      	ldrh	r3, [r7, #2]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	e001      	b.n	8002006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d141      	bne.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002022:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800202a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800202e:	d131      	bne.n	8002094 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002030:	4b47      	ldr	r3, [pc, #284]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002036:	4a46      	ldr	r2, [pc, #280]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800203c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002040:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002048:	4a41      	ldr	r2, [pc, #260]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800204e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002050:	4b40      	ldr	r3, [pc, #256]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2232      	movs	r2, #50	@ 0x32
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	4a3f      	ldr	r2, [pc, #252]	@ (8002158 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800205c:	fba2 2303 	umull	r2, r3, r2, r3
 8002060:	0c9b      	lsrs	r3, r3, #18
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002066:	e002      	b.n	800206e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3b01      	subs	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800206e:	4b38      	ldr	r3, [pc, #224]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207a:	d102      	bne.n	8002082 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f2      	bne.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002082:	4b33      	ldr	r3, [pc, #204]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800208e:	d158      	bne.n	8002142 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e057      	b.n	8002144 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002094:	4b2e      	ldr	r3, [pc, #184]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800209a:	4a2d      	ldr	r2, [pc, #180]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020a4:	e04d      	b.n	8002142 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ac:	d141      	bne.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ae:	4b28      	ldr	r3, [pc, #160]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ba:	d131      	bne.n	8002120 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020bc:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020c2:	4a23      	ldr	r2, [pc, #140]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020cc:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2232      	movs	r2, #50	@ 0x32
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002158 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	0c9b      	lsrs	r3, r3, #18
 80020ee:	3301      	adds	r3, #1
 80020f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f2:	e002      	b.n	80020fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002106:	d102      	bne.n	800210e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f2      	bne.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800211a:	d112      	bne.n	8002142 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e011      	b.n	8002144 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002126:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002130:	e007      	b.n	8002142 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800213a:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002140:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40007000 	.word	0x40007000
 8002154:	20000000 	.word	0x20000000
 8002158:	431bde83 	.word	0x431bde83

0800215c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002160:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002166:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800216a:	6093      	str	r3, [r2, #8]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40007000 	.word	0x40007000

0800217c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e2fe      	b.n	800278c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d075      	beq.n	8002286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219a:	4b97      	ldr	r3, [pc, #604]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	4b94      	ldr	r3, [pc, #592]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b0c      	cmp	r3, #12
 80021b2:	d102      	bne.n	80021ba <HAL_RCC_OscConfig+0x3e>
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d002      	beq.n	80021c0 <HAL_RCC_OscConfig+0x44>
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d10b      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	4b8d      	ldr	r3, [pc, #564]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05b      	beq.n	8002284 <HAL_RCC_OscConfig+0x108>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d157      	bne.n	8002284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e2d9      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x74>
 80021e2:	4b85      	ldr	r3, [pc, #532]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a84      	ldr	r2, [pc, #528]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b7f      	ldr	r3, [pc, #508]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7e      	ldr	r2, [pc, #504]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b7c      	ldr	r3, [pc, #496]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7b      	ldr	r2, [pc, #492]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 8002214:	4b78      	ldr	r3, [pc, #480]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a77      	ldr	r2, [pc, #476]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b75      	ldr	r3, [pc, #468]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a74      	ldr	r2, [pc, #464]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7ff fb78 	bl	8001928 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fb74 	bl	8001928 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	@ 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e29e      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224e:	4b6a      	ldr	r3, [pc, #424]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xc0>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff fb64 	bl	8001928 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fb60 	bl	8001928 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	@ 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e28a      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002276:	4b60      	ldr	r3, [pc, #384]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0xe8>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d075      	beq.n	800237e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002292:	4b59      	ldr	r3, [pc, #356]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800229c:	4b56      	ldr	r3, [pc, #344]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d102      	bne.n	80022b2 <HAL_RCC_OscConfig+0x136>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d002      	beq.n	80022b8 <HAL_RCC_OscConfig+0x13c>
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d11f      	bne.n	80022f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b8:	4b4f      	ldr	r3, [pc, #316]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_OscConfig+0x154>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e25d      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b49      	ldr	r3, [pc, #292]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	061b      	lsls	r3, r3, #24
 80022de:	4946      	ldr	r1, [pc, #280]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022e4:	4b45      	ldr	r3, [pc, #276]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fad1 	bl	8001890 <HAL_InitTick>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d043      	beq.n	800237c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e249      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d023      	beq.n	8002348 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002300:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3c      	ldr	r2, [pc, #240]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff fb0c 	bl	8001928 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002314:	f7ff fb08 	bl	8001928 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e232      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002326:	4b34      	ldr	r3, [pc, #208]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b31      	ldr	r3, [pc, #196]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	061b      	lsls	r3, r3, #24
 8002340:	492d      	ldr	r1, [pc, #180]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
 8002346:	e01a      	b.n	800237e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002348:	4b2b      	ldr	r3, [pc, #172]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a2a      	ldr	r2, [pc, #168]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 800234e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7ff fae8 	bl	8001928 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7ff fae4 	bl	8001928 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e20e      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800236e:	4b22      	ldr	r3, [pc, #136]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x1e0>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d041      	beq.n	800240e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01c      	beq.n	80023cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002392:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 8002394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002398:	4a17      	ldr	r2, [pc, #92]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7ff fac1 	bl	8001928 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023aa:	f7ff fabd 	bl	8001928 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e1e7      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023bc:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80023be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0ef      	beq.n	80023aa <HAL_RCC_OscConfig+0x22e>
 80023ca:	e020      	b.n	800240e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023cc:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d2:	4a09      	ldr	r2, [pc, #36]	@ (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7ff faa4 	bl	8001928 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023e2:	e00d      	b.n	8002400 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e4:	f7ff faa0 	bl	8001928 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d906      	bls.n	8002400 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1ca      	b.n	800278c <HAL_RCC_OscConfig+0x610>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002400:	4b8c      	ldr	r3, [pc, #560]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ea      	bne.n	80023e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80a6 	beq.w	8002568 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002420:	4b84      	ldr	r3, [pc, #528]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_OscConfig+0x2b4>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x2b6>
 8002430:	2300      	movs	r3, #0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00d      	beq.n	8002452 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4b7f      	ldr	r3, [pc, #508]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243a:	4a7e      	ldr	r2, [pc, #504]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002440:	6593      	str	r3, [r2, #88]	@ 0x58
 8002442:	4b7c      	ldr	r3, [pc, #496]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800244e:	2301      	movs	r3, #1
 8002450:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002452:	4b79      	ldr	r3, [pc, #484]	@ (8002638 <HAL_RCC_OscConfig+0x4bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800245e:	4b76      	ldr	r3, [pc, #472]	@ (8002638 <HAL_RCC_OscConfig+0x4bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a75      	ldr	r2, [pc, #468]	@ (8002638 <HAL_RCC_OscConfig+0x4bc>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7ff fa5d 	bl	8001928 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7ff fa59 	bl	8001928 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e183      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002484:	4b6c      	ldr	r3, [pc, #432]	@ (8002638 <HAL_RCC_OscConfig+0x4bc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d108      	bne.n	80024aa <HAL_RCC_OscConfig+0x32e>
 8002498:	4b66      	ldr	r3, [pc, #408]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249e:	4a65      	ldr	r2, [pc, #404]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a8:	e024      	b.n	80024f4 <HAL_RCC_OscConfig+0x378>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	d110      	bne.n	80024d4 <HAL_RCC_OscConfig+0x358>
 80024b2:	4b60      	ldr	r3, [pc, #384]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024d2:	e00f      	b.n	80024f4 <HAL_RCC_OscConfig+0x378>
 80024d4:	4b57      	ldr	r3, [pc, #348]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024da:	4a56      	ldr	r2, [pc, #344]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024e4:	4b53      	ldr	r3, [pc, #332]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ea:	4a52      	ldr	r2, [pc, #328]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d016      	beq.n	800252a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7ff fa14 	bl	8001928 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002502:	e00a      	b.n	800251a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7ff fa10 	bl	8001928 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e138      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800251a:	4b46      	ldr	r3, [pc, #280]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ed      	beq.n	8002504 <HAL_RCC_OscConfig+0x388>
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7ff f9fd 	bl	8001928 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7ff f9f9 	bl	8001928 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e121      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002548:	4b3a      	ldr	r3, [pc, #232]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ed      	bne.n	8002532 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002556:	7ffb      	ldrb	r3, [r7, #31]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255c:	4b35      	ldr	r3, [pc, #212]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002560:	4a34      	ldr	r2, [pc, #208]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 8002562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002566:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d03c      	beq.n	80025ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800257c:	4b2d      	ldr	r3, [pc, #180]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 800257e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002582:	4a2c      	ldr	r2, [pc, #176]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7ff f9cc 	bl	8001928 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002594:	f7ff f9c8 	bl	8001928 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0f2      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025a6:	4b23      	ldr	r3, [pc, #140]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80025a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ef      	beq.n	8002594 <HAL_RCC_OscConfig+0x418>
 80025b4:	e01b      	b.n	80025ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80025b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7ff f9af 	bl	8001928 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ce:	f7ff f9ab 	bl	8001928 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0d5      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025e0:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80025e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ef      	bne.n	80025ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80c9 	beq.w	800278a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b0c      	cmp	r3, #12
 8002602:	f000 8083 	beq.w	800270c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d15e      	bne.n	80026cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a08      	ldr	r2, [pc, #32]	@ (8002634 <HAL_RCC_OscConfig+0x4b8>)
 8002614:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7ff f985 	bl	8001928 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002620:	e00c      	b.n	800263c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7ff f981 	bl	8001928 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d905      	bls.n	800263c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0ab      	b.n	800278c <HAL_RCC_OscConfig+0x610>
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263c:	4b55      	ldr	r3, [pc, #340]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ec      	bne.n	8002622 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002648:	4b52      	ldr	r3, [pc, #328]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	4b52      	ldr	r3, [pc, #328]	@ (8002798 <HAL_RCC_OscConfig+0x61c>)
 800264e:	4013      	ands	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6a11      	ldr	r1, [r2, #32]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002658:	3a01      	subs	r2, #1
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	4311      	orrs	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002662:	0212      	lsls	r2, r2, #8
 8002664:	4311      	orrs	r1, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800266a:	0852      	lsrs	r2, r2, #1
 800266c:	3a01      	subs	r2, #1
 800266e:	0552      	lsls	r2, r2, #21
 8002670:	4311      	orrs	r1, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002676:	0852      	lsrs	r2, r2, #1
 8002678:	3a01      	subs	r2, #1
 800267a:	0652      	lsls	r2, r2, #25
 800267c:	4311      	orrs	r1, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002682:	06d2      	lsls	r2, r2, #27
 8002684:	430a      	orrs	r2, r1
 8002686:	4943      	ldr	r1, [pc, #268]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 8002688:	4313      	orrs	r3, r2
 800268a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800268c:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a40      	ldr	r2, [pc, #256]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002696:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002698:	4b3e      	ldr	r3, [pc, #248]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a3d      	ldr	r2, [pc, #244]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7ff f940 	bl	8001928 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7ff f93c 	bl	8001928 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e066      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	4b35      	ldr	r3, [pc, #212]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x530>
 80026ca:	e05e      	b.n	800278a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a30      	ldr	r2, [pc, #192]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 80026d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff f926 	bl	8001928 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff f922 	bl	8001928 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e04c      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f2:	4b28      	ldr	r3, [pc, #160]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026fe:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	4924      	ldr	r1, [pc, #144]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 8002704:	4b25      	ldr	r3, [pc, #148]	@ (800279c <HAL_RCC_OscConfig+0x620>)
 8002706:	4013      	ands	r3, r2
 8002708:	60cb      	str	r3, [r1, #12]
 800270a:	e03e      	b.n	800278a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e039      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002718:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <HAL_RCC_OscConfig+0x618>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 0203 	and.w	r2, r3, #3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	429a      	cmp	r2, r3
 800272a:	d12c      	bne.n	8002786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	3b01      	subs	r3, #1
 8002738:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d123      	bne.n	8002786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d11b      	bne.n	8002786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d113      	bne.n	8002786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	3b01      	subs	r3, #1
 800276c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d109      	bne.n	8002786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	3b01      	subs	r3, #1
 8002780:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	019f800c 	.word	0x019f800c
 800279c:	feeefffc 	.word	0xfeeefffc

080027a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e11e      	b.n	80029f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b8:	4b91      	ldr	r3, [pc, #580]	@ (8002a00 <HAL_RCC_ClockConfig+0x260>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d910      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b8e      	ldr	r3, [pc, #568]	@ (8002a00 <HAL_RCC_ClockConfig+0x260>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 020f 	bic.w	r2, r3, #15
 80027ce:	498c      	ldr	r1, [pc, #560]	@ (8002a00 <HAL_RCC_ClockConfig+0x260>)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b8a      	ldr	r3, [pc, #552]	@ (8002a00 <HAL_RCC_ClockConfig+0x260>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e106      	b.n	80029f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d073      	beq.n	80028dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d129      	bne.n	8002850 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fc:	4b81      	ldr	r3, [pc, #516]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0f4      	b.n	80029f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800280c:	f000 f99e 	bl	8002b4c <RCC_GetSysClockFreqFromPLLSource>
 8002810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4a7c      	ldr	r2, [pc, #496]	@ (8002a08 <HAL_RCC_ClockConfig+0x268>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d93f      	bls.n	800289a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800281a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800282e:	2b00      	cmp	r3, #0
 8002830:	d033      	beq.n	800289a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002836:	2b00      	cmp	r3, #0
 8002838:	d12f      	bne.n	800289a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800283a:	4b72      	ldr	r3, [pc, #456]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002842:	4a70      	ldr	r2, [pc, #448]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 8002844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002848:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800284a:	2380      	movs	r3, #128	@ 0x80
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	e024      	b.n	800289a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d107      	bne.n	8002868 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002858:	4b6a      	ldr	r3, [pc, #424]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0c6      	b.n	80029f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002868:	4b66      	ldr	r3, [pc, #408]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0be      	b.n	80029f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002878:	f000 f8ce 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 800287c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4a61      	ldr	r2, [pc, #388]	@ (8002a08 <HAL_RCC_ClockConfig+0x268>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d909      	bls.n	800289a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002886:	4b5f      	ldr	r3, [pc, #380]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800288e:	4a5d      	ldr	r2, [pc, #372]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 8002890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002894:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4957      	ldr	r1, [pc, #348]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ac:	f7ff f83c 	bl	8001928 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7ff f838 	bl	8001928 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e095      	b.n	80029f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d023      	beq.n	8002930 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f4:	4b43      	ldr	r3, [pc, #268]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a42      	ldr	r2, [pc, #264]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 80028fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800290c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002914:	4a3b      	ldr	r2, [pc, #236]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 8002916:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800291a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291c:	4b39      	ldr	r3, [pc, #228]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4936      	ldr	r1, [pc, #216]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
 800292e:	e008      	b.n	8002942 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2b80      	cmp	r3, #128	@ 0x80
 8002934:	d105      	bne.n	8002942 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002936:	4b33      	ldr	r3, [pc, #204]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4a32      	ldr	r2, [pc, #200]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 800293c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002940:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002942:	4b2f      	ldr	r3, [pc, #188]	@ (8002a00 <HAL_RCC_ClockConfig+0x260>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d21d      	bcs.n	800298c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002950:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <HAL_RCC_ClockConfig+0x260>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 020f 	bic.w	r2, r3, #15
 8002958:	4929      	ldr	r1, [pc, #164]	@ (8002a00 <HAL_RCC_ClockConfig+0x260>)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002960:	f7fe ffe2 	bl	8001928 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7fe ffde 	bl	8001928 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e03b      	b.n	80029f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b20      	ldr	r3, [pc, #128]	@ (8002a00 <HAL_RCC_ClockConfig+0x260>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d1ed      	bne.n	8002968 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b1a      	ldr	r3, [pc, #104]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4917      	ldr	r1, [pc, #92]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b6:	4b13      	ldr	r3, [pc, #76]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	490f      	ldr	r1, [pc, #60]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ca:	f000 f825 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <HAL_RCC_ClockConfig+0x264>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	490c      	ldr	r1, [pc, #48]	@ (8002a0c <HAL_RCC_ClockConfig+0x26c>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <HAL_RCC_ClockConfig+0x270>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_RCC_ClockConfig+0x274>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe ff4e 	bl	8001890 <HAL_InitTick>
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	04c4b400 	.word	0x04c4b400
 8002a0c:	08008508 	.word	0x08008508
 8002a10:	20000000 	.word	0x20000000
 8002a14:	20000004 	.word	0x20000004

08002a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d102      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	e047      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a30:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d102      	bne.n	8002a42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a3c:	4b26      	ldr	r3, [pc, #152]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	e03e      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a42:	4b23      	ldr	r3, [pc, #140]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d136      	bne.n	8002abc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3301      	adds	r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d10c      	bne.n	8002a86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	4a16      	ldr	r2, [pc, #88]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a76:	68d2      	ldr	r2, [r2, #12]
 8002a78:	0a12      	lsrs	r2, r2, #8
 8002a7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	617b      	str	r3, [r7, #20]
      break;
 8002a84:	e00c      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a86:	4a13      	ldr	r2, [pc, #76]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8e:	4a10      	ldr	r2, [pc, #64]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a90:	68d2      	ldr	r2, [r2, #12]
 8002a92:	0a12      	lsrs	r2, r2, #8
 8002a94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
      break;
 8002a9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	0e5b      	lsrs	r3, r3, #25
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	e001      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ac0:	693b      	ldr	r3, [r7, #16]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	00f42400 	.word	0x00f42400
 8002ad8:	007a1200 	.word	0x007a1200

08002adc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae0:	4b03      	ldr	r3, [pc, #12]	@ (8002af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000000 	.word	0x20000000

08002af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002af8:	f7ff fff0 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4904      	ldr	r1, [pc, #16]	@ (8002b1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	08008518 	.word	0x08008518

08002b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b24:	f7ff ffda 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	0adb      	lsrs	r3, r3, #11
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	4904      	ldr	r1, [pc, #16]	@ (8002b48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b36:	5ccb      	ldrb	r3, [r1, r3]
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08008518 	.word	0x08008518

08002b4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b52:	4b1e      	ldr	r3, [pc, #120]	@ (8002bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3301      	adds	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d10c      	bne.n	8002b8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b70:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b7a:	68d2      	ldr	r2, [r2, #12]
 8002b7c:	0a12      	lsrs	r2, r2, #8
 8002b7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	617b      	str	r3, [r7, #20]
    break;
 8002b88:	e00c      	b.n	8002ba4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b8a:	4a12      	ldr	r2, [pc, #72]	@ (8002bd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	4a0e      	ldr	r2, [pc, #56]	@ (8002bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b94:	68d2      	ldr	r2, [r2, #12]
 8002b96:	0a12      	lsrs	r2, r2, #8
 8002b98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
    break;
 8002ba2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ba4:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0e5b      	lsrs	r3, r3, #25
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bbe:	687b      	ldr	r3, [r7, #4]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	007a1200 	.word	0x007a1200
 8002bd4:	00f42400 	.word	0x00f42400

08002bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002be0:	2300      	movs	r3, #0
 8002be2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002be4:	2300      	movs	r3, #0
 8002be6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8098 	beq.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfa:	4b43      	ldr	r3, [pc, #268]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10d      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4b40      	ldr	r3, [pc, #256]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c12:	4b3d      	ldr	r3, [pc, #244]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c22:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a39      	ldr	r2, [pc, #228]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c2e:	f7fe fe7b 	bl	8001928 <HAL_GetTick>
 8002c32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c34:	e009      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7fe fe77 	bl	8001928 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d902      	bls.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	74fb      	strb	r3, [r7, #19]
        break;
 8002c48:	e005      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c4a:	4b30      	ldr	r3, [pc, #192]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ef      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d159      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01e      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d019      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c78:	4b23      	ldr	r3, [pc, #140]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c84:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c94:	4b1c      	ldr	r3, [pc, #112]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ca4:	4a18      	ldr	r2, [pc, #96]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fe37 	bl	8001928 <HAL_GetTick>
 8002cba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbc:	e00b      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fe33 	bl	8001928 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d902      	bls.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	74fb      	strb	r3, [r7, #19]
            break;
 8002cd4:	e006      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ec      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cea:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf8:	4903      	ldr	r1, [pc, #12]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d00:	e008      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	74bb      	strb	r3, [r7, #18]
 8002d06:	e005      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d14:	7c7b      	ldrb	r3, [r7, #17]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4ba7      	ldr	r3, [pc, #668]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	4aa6      	ldr	r2, [pc, #664]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d32:	4ba1      	ldr	r3, [pc, #644]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d38:	f023 0203 	bic.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	499d      	ldr	r1, [pc, #628]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d54:	4b98      	ldr	r3, [pc, #608]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5a:	f023 020c 	bic.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4995      	ldr	r1, [pc, #596]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d76:	4b90      	ldr	r3, [pc, #576]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	498c      	ldr	r1, [pc, #560]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d98:	4b87      	ldr	r3, [pc, #540]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	4984      	ldr	r1, [pc, #528]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dba:	4b7f      	ldr	r3, [pc, #508]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	497b      	ldr	r1, [pc, #492]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ddc:	4b76      	ldr	r3, [pc, #472]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	4973      	ldr	r1, [pc, #460]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dfe:	4b6e      	ldr	r3, [pc, #440]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	496a      	ldr	r1, [pc, #424]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e20:	4b65      	ldr	r3, [pc, #404]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4962      	ldr	r1, [pc, #392]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e42:	4b5d      	ldr	r3, [pc, #372]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	4959      	ldr	r1, [pc, #356]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e64:	4b54      	ldr	r3, [pc, #336]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	4951      	ldr	r1, [pc, #324]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e86:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	4948      	ldr	r1, [pc, #288]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d015      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ea8:	4b43      	ldr	r3, [pc, #268]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4940      	ldr	r1, [pc, #256]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a3a      	ldr	r2, [pc, #232]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ee0:	4b35      	ldr	r3, [pc, #212]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eee:	4932      	ldr	r1, [pc, #200]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002efe:	d105      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f00:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f0a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f18:	4b27      	ldr	r3, [pc, #156]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f26:	4924      	ldr	r1, [pc, #144]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f36:	d105      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f38:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d015      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f50:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5e:	4916      	ldr	r1, [pc, #88]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f70:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a10      	ldr	r2, [pc, #64]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d019      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	4908      	ldr	r1, [pc, #32]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fa6:	d109      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a02      	ldr	r2, [pc, #8]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fb2:	60d3      	str	r3, [r2, #12]
 8002fb4:	e002      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fc8:	4b29      	ldr	r3, [pc, #164]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	4926      	ldr	r1, [pc, #152]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fe8:	4b21      	ldr	r3, [pc, #132]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a20      	ldr	r2, [pc, #128]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003000:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300e:	4918      	ldr	r1, [pc, #96]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800301e:	d105      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003020:	4b13      	ldr	r3, [pc, #76]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a12      	ldr	r2, [pc, #72]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d015      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003038:	4b0d      	ldr	r3, [pc, #52]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800303a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800303e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003046:	490a      	ldr	r1, [pc, #40]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003052:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003056:	d105      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a04      	ldr	r2, [pc, #16]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800305e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003062:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003064:	7cbb      	ldrb	r3, [r7, #18]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000

08003074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e049      	b.n	800311a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fe f9f0 	bl	8001480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f000 fbd2 	bl	800385c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e049      	b.n	80031c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f841 	bl	80031d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f000 fb7b 	bl	800385c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_TIM_PWM_Start+0x24>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e03c      	b.n	8003282 <HAL_TIM_PWM_Start+0x9e>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d109      	bne.n	8003222 <HAL_TIM_PWM_Start+0x3e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b01      	cmp	r3, #1
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	2300      	moveq	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	e02f      	b.n	8003282 <HAL_TIM_PWM_Start+0x9e>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d109      	bne.n	800323c <HAL_TIM_PWM_Start+0x58>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e022      	b.n	8003282 <HAL_TIM_PWM_Start+0x9e>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b0c      	cmp	r3, #12
 8003240:	d109      	bne.n	8003256 <HAL_TIM_PWM_Start+0x72>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e015      	b.n	8003282 <HAL_TIM_PWM_Start+0x9e>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b10      	cmp	r3, #16
 800325a:	d109      	bne.n	8003270 <HAL_TIM_PWM_Start+0x8c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e008      	b.n	8003282 <HAL_TIM_PWM_Start+0x9e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0a6      	b.n	80033d8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_TIM_PWM_Start+0xb6>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003298:	e023      	b.n	80032e2 <HAL_TIM_PWM_Start+0xfe>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start+0xc6>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a8:	e01b      	b.n	80032e2 <HAL_TIM_PWM_Start+0xfe>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start+0xd6>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032b8:	e013      	b.n	80032e2 <HAL_TIM_PWM_Start+0xfe>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b0c      	cmp	r3, #12
 80032be:	d104      	bne.n	80032ca <HAL_TIM_PWM_Start+0xe6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032c8:	e00b      	b.n	80032e2 <HAL_TIM_PWM_Start+0xfe>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d104      	bne.n	80032da <HAL_TIM_PWM_Start+0xf6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032d8:	e003      	b.n	80032e2 <HAL_TIM_PWM_Start+0xfe>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2201      	movs	r2, #1
 80032e8:	6839      	ldr	r1, [r7, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 ff30 	bl	8004150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3a      	ldr	r2, [pc, #232]	@ (80033e0 <HAL_TIM_PWM_Start+0x1fc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_TIM_PWM_Start+0x148>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a39      	ldr	r2, [pc, #228]	@ (80033e4 <HAL_TIM_PWM_Start+0x200>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <HAL_TIM_PWM_Start+0x148>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a37      	ldr	r2, [pc, #220]	@ (80033e8 <HAL_TIM_PWM_Start+0x204>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_TIM_PWM_Start+0x148>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a36      	ldr	r2, [pc, #216]	@ (80033ec <HAL_TIM_PWM_Start+0x208>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_TIM_PWM_Start+0x148>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a34      	ldr	r2, [pc, #208]	@ (80033f0 <HAL_TIM_PWM_Start+0x20c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_TIM_PWM_Start+0x148>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a33      	ldr	r2, [pc, #204]	@ (80033f4 <HAL_TIM_PWM_Start+0x210>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <HAL_TIM_PWM_Start+0x14c>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <HAL_TIM_PWM_Start+0x14e>
 8003330:	2300      	movs	r3, #0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003344:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a25      	ldr	r2, [pc, #148]	@ (80033e0 <HAL_TIM_PWM_Start+0x1fc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d022      	beq.n	8003396 <HAL_TIM_PWM_Start+0x1b2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003358:	d01d      	beq.n	8003396 <HAL_TIM_PWM_Start+0x1b2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a26      	ldr	r2, [pc, #152]	@ (80033f8 <HAL_TIM_PWM_Start+0x214>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d018      	beq.n	8003396 <HAL_TIM_PWM_Start+0x1b2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a24      	ldr	r2, [pc, #144]	@ (80033fc <HAL_TIM_PWM_Start+0x218>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_TIM_PWM_Start+0x1b2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a23      	ldr	r2, [pc, #140]	@ (8003400 <HAL_TIM_PWM_Start+0x21c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00e      	beq.n	8003396 <HAL_TIM_PWM_Start+0x1b2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a19      	ldr	r2, [pc, #100]	@ (80033e4 <HAL_TIM_PWM_Start+0x200>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d009      	beq.n	8003396 <HAL_TIM_PWM_Start+0x1b2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a18      	ldr	r2, [pc, #96]	@ (80033e8 <HAL_TIM_PWM_Start+0x204>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_TIM_PWM_Start+0x1b2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a18      	ldr	r2, [pc, #96]	@ (80033f4 <HAL_TIM_PWM_Start+0x210>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d115      	bne.n	80033c2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b19      	ldr	r3, [pc, #100]	@ (8003404 <HAL_TIM_PWM_Start+0x220>)
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b06      	cmp	r3, #6
 80033a6:	d015      	beq.n	80033d4 <HAL_TIM_PWM_Start+0x1f0>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ae:	d011      	beq.n	80033d4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c0:	e008      	b.n	80033d4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e000      	b.n	80033d6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	40013400 	.word	0x40013400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800
 80033f4:	40015000 	.word	0x40015000
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800
 8003400:	40000c00 	.word	0x40000c00
 8003404:	00010007 	.word	0x00010007

08003408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003422:	2302      	movs	r3, #2
 8003424:	e0ff      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b14      	cmp	r3, #20
 8003432:	f200 80f0 	bhi.w	8003616 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003436:	a201      	add	r2, pc, #4	@ (adr r2, 800343c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	08003491 	.word	0x08003491
 8003440:	08003617 	.word	0x08003617
 8003444:	08003617 	.word	0x08003617
 8003448:	08003617 	.word	0x08003617
 800344c:	080034d1 	.word	0x080034d1
 8003450:	08003617 	.word	0x08003617
 8003454:	08003617 	.word	0x08003617
 8003458:	08003617 	.word	0x08003617
 800345c:	08003513 	.word	0x08003513
 8003460:	08003617 	.word	0x08003617
 8003464:	08003617 	.word	0x08003617
 8003468:	08003617 	.word	0x08003617
 800346c:	08003553 	.word	0x08003553
 8003470:	08003617 	.word	0x08003617
 8003474:	08003617 	.word	0x08003617
 8003478:	08003617 	.word	0x08003617
 800347c:	08003595 	.word	0x08003595
 8003480:	08003617 	.word	0x08003617
 8003484:	08003617 	.word	0x08003617
 8003488:	08003617 	.word	0x08003617
 800348c:	080035d5 	.word	0x080035d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fa94 	bl	80039c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0204 	bic.w	r2, r2, #4
 80034ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6999      	ldr	r1, [r3, #24]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	619a      	str	r2, [r3, #24]
      break;
 80034ce:	e0a5      	b.n	800361c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fb0e 	bl	8003af8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6999      	ldr	r1, [r3, #24]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	021a      	lsls	r2, r3, #8
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	619a      	str	r2, [r3, #24]
      break;
 8003510:	e084      	b.n	800361c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fb81 	bl	8003c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0208 	orr.w	r2, r2, #8
 800352c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0204 	bic.w	r2, r2, #4
 800353c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69d9      	ldr	r1, [r3, #28]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	61da      	str	r2, [r3, #28]
      break;
 8003550:	e064      	b.n	800361c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fbf3 	bl	8003d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800356c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800357c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69d9      	ldr	r1, [r3, #28]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	021a      	lsls	r2, r3, #8
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	61da      	str	r2, [r3, #28]
      break;
 8003592:	e043      	b.n	800361c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fc66 	bl	8003e6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0208 	orr.w	r2, r2, #8
 80035ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0204 	bic.w	r2, r2, #4
 80035be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80035d2:	e023      	b.n	800361c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fcb0 	bl	8003f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	021a      	lsls	r2, r3, #8
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003614:	e002      	b.n	800361c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
      break;
 800361a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003624:	7dfb      	ldrb	r3, [r7, #23]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop

08003630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_TIM_ConfigClockSource+0x1c>
 8003648:	2302      	movs	r3, #2
 800364a:	e0f6      	b.n	800383a <HAL_TIM_ConfigClockSource+0x20a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800366a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800366e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6f      	ldr	r2, [pc, #444]	@ (8003844 <HAL_TIM_ConfigClockSource+0x214>)
 8003686:	4293      	cmp	r3, r2
 8003688:	f000 80c1 	beq.w	800380e <HAL_TIM_ConfigClockSource+0x1de>
 800368c:	4a6d      	ldr	r2, [pc, #436]	@ (8003844 <HAL_TIM_ConfigClockSource+0x214>)
 800368e:	4293      	cmp	r3, r2
 8003690:	f200 80c6 	bhi.w	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 8003694:	4a6c      	ldr	r2, [pc, #432]	@ (8003848 <HAL_TIM_ConfigClockSource+0x218>)
 8003696:	4293      	cmp	r3, r2
 8003698:	f000 80b9 	beq.w	800380e <HAL_TIM_ConfigClockSource+0x1de>
 800369c:	4a6a      	ldr	r2, [pc, #424]	@ (8003848 <HAL_TIM_ConfigClockSource+0x218>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	f200 80be 	bhi.w	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 80036a4:	4a69      	ldr	r2, [pc, #420]	@ (800384c <HAL_TIM_ConfigClockSource+0x21c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f000 80b1 	beq.w	800380e <HAL_TIM_ConfigClockSource+0x1de>
 80036ac:	4a67      	ldr	r2, [pc, #412]	@ (800384c <HAL_TIM_ConfigClockSource+0x21c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	f200 80b6 	bhi.w	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 80036b4:	4a66      	ldr	r2, [pc, #408]	@ (8003850 <HAL_TIM_ConfigClockSource+0x220>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	f000 80a9 	beq.w	800380e <HAL_TIM_ConfigClockSource+0x1de>
 80036bc:	4a64      	ldr	r2, [pc, #400]	@ (8003850 <HAL_TIM_ConfigClockSource+0x220>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	f200 80ae 	bhi.w	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 80036c4:	4a63      	ldr	r2, [pc, #396]	@ (8003854 <HAL_TIM_ConfigClockSource+0x224>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	f000 80a1 	beq.w	800380e <HAL_TIM_ConfigClockSource+0x1de>
 80036cc:	4a61      	ldr	r2, [pc, #388]	@ (8003854 <HAL_TIM_ConfigClockSource+0x224>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	f200 80a6 	bhi.w	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 80036d4:	4a60      	ldr	r2, [pc, #384]	@ (8003858 <HAL_TIM_ConfigClockSource+0x228>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	f000 8099 	beq.w	800380e <HAL_TIM_ConfigClockSource+0x1de>
 80036dc:	4a5e      	ldr	r2, [pc, #376]	@ (8003858 <HAL_TIM_ConfigClockSource+0x228>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	f200 809e 	bhi.w	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 80036e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80036e8:	f000 8091 	beq.w	800380e <HAL_TIM_ConfigClockSource+0x1de>
 80036ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80036f0:	f200 8096 	bhi.w	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 80036f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036f8:	f000 8089 	beq.w	800380e <HAL_TIM_ConfigClockSource+0x1de>
 80036fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003700:	f200 808e 	bhi.w	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 8003704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003708:	d03e      	beq.n	8003788 <HAL_TIM_ConfigClockSource+0x158>
 800370a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800370e:	f200 8087 	bhi.w	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 8003712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003716:	f000 8086 	beq.w	8003826 <HAL_TIM_ConfigClockSource+0x1f6>
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371e:	d87f      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 8003720:	2b70      	cmp	r3, #112	@ 0x70
 8003722:	d01a      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x12a>
 8003724:	2b70      	cmp	r3, #112	@ 0x70
 8003726:	d87b      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 8003728:	2b60      	cmp	r3, #96	@ 0x60
 800372a:	d050      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x19e>
 800372c:	2b60      	cmp	r3, #96	@ 0x60
 800372e:	d877      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 8003730:	2b50      	cmp	r3, #80	@ 0x50
 8003732:	d03c      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x17e>
 8003734:	2b50      	cmp	r3, #80	@ 0x50
 8003736:	d873      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 8003738:	2b40      	cmp	r3, #64	@ 0x40
 800373a:	d058      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x1be>
 800373c:	2b40      	cmp	r3, #64	@ 0x40
 800373e:	d86f      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 8003740:	2b30      	cmp	r3, #48	@ 0x30
 8003742:	d064      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x1de>
 8003744:	2b30      	cmp	r3, #48	@ 0x30
 8003746:	d86b      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 8003748:	2b20      	cmp	r3, #32
 800374a:	d060      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x1de>
 800374c:	2b20      	cmp	r3, #32
 800374e:	d867      	bhi.n	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d05c      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x1de>
 8003754:	2b10      	cmp	r3, #16
 8003756:	d05a      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x1de>
 8003758:	e062      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	f000 fcd1 	bl	8004110 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800377c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	609a      	str	r2, [r3, #8]
      break;
 8003786:	e04f      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003798:	f000 fcba 	bl	8004110 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037aa:	609a      	str	r2, [r3, #8]
      break;
 80037ac:	e03c      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fc2c 	bl	8004018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2150      	movs	r1, #80	@ 0x50
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fc85 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e02c      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037da:	461a      	mov	r2, r3
 80037dc:	f000 fc4b 	bl	8004076 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2160      	movs	r1, #96	@ 0x60
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fc75 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 80037ec:	e01c      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	461a      	mov	r2, r3
 80037fc:	f000 fc0c 	bl	8004018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2140      	movs	r1, #64	@ 0x40
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fc65 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 800380c:	e00c      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f000 fc5c 	bl	80040d6 <TIM_ITRx_SetConfig>
      break;
 800381e:	e003      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      break;
 8003824:	e000      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	00100070 	.word	0x00100070
 8003848:	00100060 	.word	0x00100060
 800384c:	00100050 	.word	0x00100050
 8003850:	00100040 	.word	0x00100040
 8003854:	00100030 	.word	0x00100030
 8003858:	00100020 	.word	0x00100020

0800385c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a4c      	ldr	r2, [pc, #304]	@ (80039a0 <TIM_Base_SetConfig+0x144>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d017      	beq.n	80038a4 <TIM_Base_SetConfig+0x48>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387a:	d013      	beq.n	80038a4 <TIM_Base_SetConfig+0x48>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a49      	ldr	r2, [pc, #292]	@ (80039a4 <TIM_Base_SetConfig+0x148>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00f      	beq.n	80038a4 <TIM_Base_SetConfig+0x48>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a48      	ldr	r2, [pc, #288]	@ (80039a8 <TIM_Base_SetConfig+0x14c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00b      	beq.n	80038a4 <TIM_Base_SetConfig+0x48>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a47      	ldr	r2, [pc, #284]	@ (80039ac <TIM_Base_SetConfig+0x150>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <TIM_Base_SetConfig+0x48>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a46      	ldr	r2, [pc, #280]	@ (80039b0 <TIM_Base_SetConfig+0x154>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_Base_SetConfig+0x48>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a45      	ldr	r2, [pc, #276]	@ (80039b4 <TIM_Base_SetConfig+0x158>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a39      	ldr	r2, [pc, #228]	@ (80039a0 <TIM_Base_SetConfig+0x144>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d023      	beq.n	8003906 <TIM_Base_SetConfig+0xaa>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c4:	d01f      	beq.n	8003906 <TIM_Base_SetConfig+0xaa>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a36      	ldr	r2, [pc, #216]	@ (80039a4 <TIM_Base_SetConfig+0x148>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01b      	beq.n	8003906 <TIM_Base_SetConfig+0xaa>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a35      	ldr	r2, [pc, #212]	@ (80039a8 <TIM_Base_SetConfig+0x14c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d017      	beq.n	8003906 <TIM_Base_SetConfig+0xaa>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a34      	ldr	r2, [pc, #208]	@ (80039ac <TIM_Base_SetConfig+0x150>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <TIM_Base_SetConfig+0xaa>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a33      	ldr	r2, [pc, #204]	@ (80039b0 <TIM_Base_SetConfig+0x154>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00f      	beq.n	8003906 <TIM_Base_SetConfig+0xaa>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a33      	ldr	r2, [pc, #204]	@ (80039b8 <TIM_Base_SetConfig+0x15c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00b      	beq.n	8003906 <TIM_Base_SetConfig+0xaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a32      	ldr	r2, [pc, #200]	@ (80039bc <TIM_Base_SetConfig+0x160>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <TIM_Base_SetConfig+0xaa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a31      	ldr	r2, [pc, #196]	@ (80039c0 <TIM_Base_SetConfig+0x164>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_Base_SetConfig+0xaa>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2c      	ldr	r2, [pc, #176]	@ (80039b4 <TIM_Base_SetConfig+0x158>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800390c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a18      	ldr	r2, [pc, #96]	@ (80039a0 <TIM_Base_SetConfig+0x144>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <TIM_Base_SetConfig+0x110>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a1a      	ldr	r2, [pc, #104]	@ (80039b0 <TIM_Base_SetConfig+0x154>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00f      	beq.n	800396c <TIM_Base_SetConfig+0x110>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a1a      	ldr	r2, [pc, #104]	@ (80039b8 <TIM_Base_SetConfig+0x15c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00b      	beq.n	800396c <TIM_Base_SetConfig+0x110>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a19      	ldr	r2, [pc, #100]	@ (80039bc <TIM_Base_SetConfig+0x160>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_Base_SetConfig+0x110>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a18      	ldr	r2, [pc, #96]	@ (80039c0 <TIM_Base_SetConfig+0x164>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0x110>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <TIM_Base_SetConfig+0x158>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d105      	bne.n	8003992 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f023 0201 	bic.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	611a      	str	r2, [r3, #16]
  }
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800
 80039ac:	40000c00 	.word	0x40000c00
 80039b0:	40013400 	.word	0x40013400
 80039b4:	40015000 	.word	0x40015000
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800

080039c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f023 0201 	bic.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f023 0302 	bic.w	r3, r3, #2
 8003a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a30      	ldr	r2, [pc, #192]	@ (8003ae0 <TIM_OC1_SetConfig+0x11c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <TIM_OC1_SetConfig+0x88>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae4 <TIM_OC1_SetConfig+0x120>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00f      	beq.n	8003a4c <TIM_OC1_SetConfig+0x88>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8003ae8 <TIM_OC1_SetConfig+0x124>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_OC1_SetConfig+0x88>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a2d      	ldr	r2, [pc, #180]	@ (8003aec <TIM_OC1_SetConfig+0x128>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_OC1_SetConfig+0x88>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003af0 <TIM_OC1_SetConfig+0x12c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC1_SetConfig+0x88>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a2b      	ldr	r2, [pc, #172]	@ (8003af4 <TIM_OC1_SetConfig+0x130>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10c      	bne.n	8003a66 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0308 	bic.w	r3, r3, #8
 8003a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <TIM_OC1_SetConfig+0x11c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <TIM_OC1_SetConfig+0xd2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae4 <TIM_OC1_SetConfig+0x120>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00f      	beq.n	8003a96 <TIM_OC1_SetConfig+0xd2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae8 <TIM_OC1_SetConfig+0x124>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_OC1_SetConfig+0xd2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1a      	ldr	r2, [pc, #104]	@ (8003aec <TIM_OC1_SetConfig+0x128>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_OC1_SetConfig+0xd2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <TIM_OC1_SetConfig+0x12c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_OC1_SetConfig+0xd2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <TIM_OC1_SetConfig+0x130>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d111      	bne.n	8003aba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	621a      	str	r2, [r3, #32]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40013400 	.word	0x40013400
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800
 8003af4:	40015000 	.word	0x40015000

08003af8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f023 0210 	bic.w	r2, r3, #16
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 0320 	bic.w	r3, r3, #32
 8003b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a2c      	ldr	r2, [pc, #176]	@ (8003c08 <TIM_OC2_SetConfig+0x110>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d007      	beq.n	8003b6c <TIM_OC2_SetConfig+0x74>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c0c <TIM_OC2_SetConfig+0x114>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_OC2_SetConfig+0x74>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a2a      	ldr	r2, [pc, #168]	@ (8003c10 <TIM_OC2_SetConfig+0x118>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d10d      	bne.n	8003b88 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <TIM_OC2_SetConfig+0x110>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <TIM_OC2_SetConfig+0xc0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a1e      	ldr	r2, [pc, #120]	@ (8003c0c <TIM_OC2_SetConfig+0x114>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00f      	beq.n	8003bb8 <TIM_OC2_SetConfig+0xc0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c14 <TIM_OC2_SetConfig+0x11c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <TIM_OC2_SetConfig+0xc0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c18 <TIM_OC2_SetConfig+0x120>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d007      	beq.n	8003bb8 <TIM_OC2_SetConfig+0xc0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a1c      	ldr	r2, [pc, #112]	@ (8003c1c <TIM_OC2_SetConfig+0x124>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_OC2_SetConfig+0xc0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a17      	ldr	r2, [pc, #92]	@ (8003c10 <TIM_OC2_SetConfig+0x118>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d113      	bne.n	8003be0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40013400 	.word	0x40013400
 8003c10:	40015000 	.word	0x40015000
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40014400 	.word	0x40014400
 8003c1c:	40014800 	.word	0x40014800

08003c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d2c <TIM_OC3_SetConfig+0x10c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d007      	beq.n	8003c92 <TIM_OC3_SetConfig+0x72>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2a      	ldr	r2, [pc, #168]	@ (8003d30 <TIM_OC3_SetConfig+0x110>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d003      	beq.n	8003c92 <TIM_OC3_SetConfig+0x72>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a29      	ldr	r2, [pc, #164]	@ (8003d34 <TIM_OC3_SetConfig+0x114>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10d      	bne.n	8003cae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d2c <TIM_OC3_SetConfig+0x10c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <TIM_OC3_SetConfig+0xbe>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <TIM_OC3_SetConfig+0x110>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00f      	beq.n	8003cde <TIM_OC3_SetConfig+0xbe>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d38 <TIM_OC3_SetConfig+0x118>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <TIM_OC3_SetConfig+0xbe>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d3c <TIM_OC3_SetConfig+0x11c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <TIM_OC3_SetConfig+0xbe>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d40 <TIM_OC3_SetConfig+0x120>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_OC3_SetConfig+0xbe>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a16      	ldr	r2, [pc, #88]	@ (8003d34 <TIM_OC3_SetConfig+0x114>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d113      	bne.n	8003d06 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	621a      	str	r2, [r3, #32]
}
 8003d20:	bf00      	nop
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40013400 	.word	0x40013400
 8003d34:	40015000 	.word	0x40015000
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	40014400 	.word	0x40014400
 8003d40:	40014800 	.word	0x40014800

08003d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a2c      	ldr	r2, [pc, #176]	@ (8003e54 <TIM_OC4_SetConfig+0x110>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d007      	beq.n	8003db8 <TIM_OC4_SetConfig+0x74>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a2b      	ldr	r2, [pc, #172]	@ (8003e58 <TIM_OC4_SetConfig+0x114>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_OC4_SetConfig+0x74>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a2a      	ldr	r2, [pc, #168]	@ (8003e5c <TIM_OC4_SetConfig+0x118>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10d      	bne.n	8003dd4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	031b      	lsls	r3, r3, #12
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e54 <TIM_OC4_SetConfig+0x110>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <TIM_OC4_SetConfig+0xc0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a1e      	ldr	r2, [pc, #120]	@ (8003e58 <TIM_OC4_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00f      	beq.n	8003e04 <TIM_OC4_SetConfig+0xc0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e60 <TIM_OC4_SetConfig+0x11c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <TIM_OC4_SetConfig+0xc0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a1d      	ldr	r2, [pc, #116]	@ (8003e64 <TIM_OC4_SetConfig+0x120>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <TIM_OC4_SetConfig+0xc0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e68 <TIM_OC4_SetConfig+0x124>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_OC4_SetConfig+0xc0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	@ (8003e5c <TIM_OC4_SetConfig+0x118>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d113      	bne.n	8003e2c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e12:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	019b      	lsls	r3, r3, #6
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40013400 	.word	0x40013400
 8003e5c:	40015000 	.word	0x40015000
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400
 8003e68:	40014800 	.word	0x40014800

08003e6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003eb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a19      	ldr	r2, [pc, #100]	@ (8003f28 <TIM_OC5_SetConfig+0xbc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <TIM_OC5_SetConfig+0x82>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a18      	ldr	r2, [pc, #96]	@ (8003f2c <TIM_OC5_SetConfig+0xc0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00f      	beq.n	8003eee <TIM_OC5_SetConfig+0x82>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	@ (8003f30 <TIM_OC5_SetConfig+0xc4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00b      	beq.n	8003eee <TIM_OC5_SetConfig+0x82>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a16      	ldr	r2, [pc, #88]	@ (8003f34 <TIM_OC5_SetConfig+0xc8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <TIM_OC5_SetConfig+0x82>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	@ (8003f38 <TIM_OC5_SetConfig+0xcc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_OC5_SetConfig+0x82>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <TIM_OC5_SetConfig+0xd0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d109      	bne.n	8003f02 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	621a      	str	r2, [r3, #32]
}
 8003f1c:	bf00      	nop
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40013400 	.word	0x40013400
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40014400 	.word	0x40014400
 8003f38:	40014800 	.word	0x40014800
 8003f3c:	40015000 	.word	0x40015000

08003f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	051b      	lsls	r3, r3, #20
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a1a      	ldr	r2, [pc, #104]	@ (8004000 <TIM_OC6_SetConfig+0xc0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x84>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a19      	ldr	r2, [pc, #100]	@ (8004004 <TIM_OC6_SetConfig+0xc4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00f      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x84>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a18      	ldr	r2, [pc, #96]	@ (8004008 <TIM_OC6_SetConfig+0xc8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x84>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a17      	ldr	r2, [pc, #92]	@ (800400c <TIM_OC6_SetConfig+0xcc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x84>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <TIM_OC6_SetConfig+0xd0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC6_SetConfig+0x84>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <TIM_OC6_SetConfig+0xd4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d109      	bne.n	8003fd8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	029b      	lsls	r3, r3, #10
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40013400 	.word	0x40013400
 8004008:	40014000 	.word	0x40014000
 800400c:	40014400 	.word	0x40014400
 8004010:	40014800 	.word	0x40014800
 8004014:	40015000 	.word	0x40015000

08004018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0201 	bic.w	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f023 030a 	bic.w	r3, r3, #10
 8004054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	621a      	str	r2, [r3, #32]
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004076:	b480      	push	{r7}
 8004078:	b087      	sub	sp, #28
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f023 0210 	bic.w	r2, r3, #16
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	031b      	lsls	r3, r3, #12
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80040ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f043 0307 	orr.w	r3, r3, #7
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800412a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	021a      	lsls	r2, r3, #8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	431a      	orrs	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4313      	orrs	r3, r2
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	2201      	movs	r2, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1a      	ldr	r2, [r3, #32]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	43db      	mvns	r3, r3
 8004172:	401a      	ands	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1a      	ldr	r2, [r3, #32]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e074      	b.n	800429e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a34      	ldr	r2, [pc, #208]	@ (80042ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a33      	ldr	r2, [pc, #204]	@ (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a31      	ldr	r2, [pc, #196]	@ (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d108      	bne.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800420a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a21      	ldr	r2, [pc, #132]	@ (80042ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d022      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004234:	d01d      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1f      	ldr	r2, [pc, #124]	@ (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d018      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1d      	ldr	r2, [pc, #116]	@ (80042bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1c      	ldr	r2, [pc, #112]	@ (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00e      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a15      	ldr	r2, [pc, #84]	@ (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a18      	ldr	r2, [pc, #96]	@ (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d004      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a11      	ldr	r2, [pc, #68]	@ (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d10c      	bne.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	4313      	orrs	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40013400 	.word	0x40013400
 80042b4:	40015000 	.word	0x40015000
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40000800 	.word	0x40000800
 80042c0:	40000c00 	.word	0x40000c00
 80042c4:	40014000 	.word	0x40014000

080042c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e042      	b.n	8004360 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fd f91b 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2224      	movs	r2, #36	@ 0x24
 80042f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0201 	bic.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 ff14 	bl	8005140 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fc15 	bl	8004b48 <UART_SetConfig>
 800431e:	4603      	mov	r3, r0
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e01b      	b.n	8004360 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 ff93 	bl	8005284 <UART_CheckIdleState>
 800435e:	4603      	mov	r3, r0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	@ 0x28
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437e:	2b20      	cmp	r3, #32
 8004380:	d17b      	bne.n	800447a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_UART_Transmit+0x26>
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e074      	b.n	800447c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2221      	movs	r2, #33	@ 0x21
 800439e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043a2:	f7fd fac1 	bl	8001928 <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c0:	d108      	bne.n	80043d4 <HAL_UART_Transmit+0x6c>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	e003      	b.n	80043dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043dc:	e030      	b.n	8004440 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	2180      	movs	r1, #128	@ 0x80
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fff5 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e03d      	b.n	800447c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004414:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	3302      	adds	r3, #2
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e007      	b.n	800442e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	3301      	adds	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1c8      	bne.n	80043de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2200      	movs	r2, #0
 8004454:	2140      	movs	r1, #64	@ 0x40
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 ffbe 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e006      	b.n	800447c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	e000      	b.n	800447c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b0ba      	sub	sp, #232	@ 0xe8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80044ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80044b2:	4013      	ands	r3, r2
 80044b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80044b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d11b      	bne.n	80044f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80044c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d015      	beq.n	80044f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80044d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8300 	beq.w	8004aee <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
      }
      return;
 80044f6:	e2fa      	b.n	8004aee <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8123 	beq.w	8004748 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004502:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004506:	4b8d      	ldr	r3, [pc, #564]	@ (800473c <HAL_UART_IRQHandler+0x2b8>)
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800450e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004512:	4b8b      	ldr	r3, [pc, #556]	@ (8004740 <HAL_UART_IRQHandler+0x2bc>)
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8116 	beq.w	8004748 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800451c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d011      	beq.n	800454c <HAL_UART_IRQHandler+0xc8>
 8004528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800452c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800454c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d011      	beq.n	800457c <HAL_UART_IRQHandler+0xf8>
 8004558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2202      	movs	r2, #2
 800456a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004572:	f043 0204 	orr.w	r2, r3, #4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800457c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d011      	beq.n	80045ac <HAL_UART_IRQHandler+0x128>
 8004588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00b      	beq.n	80045ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2204      	movs	r2, #4
 800459a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a2:	f043 0202 	orr.w	r2, r3, #2
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d017      	beq.n	80045e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80045c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80045c8:	4b5c      	ldr	r3, [pc, #368]	@ (800473c <HAL_UART_IRQHandler+0x2b8>)
 80045ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2208      	movs	r2, #8
 80045d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045de:	f043 0208 	orr.w	r2, r3, #8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d012      	beq.n	800461a <HAL_UART_IRQHandler+0x196>
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00c      	beq.n	800461a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004608:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8266 	beq.w	8004af2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d013      	beq.n	800465a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800463e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004660:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466e:	2b40      	cmp	r3, #64	@ 0x40
 8004670:	d005      	beq.n	800467e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004676:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800467a:	2b00      	cmp	r3, #0
 800467c:	d054      	beq.n	8004728 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 ff17 	bl	80054b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468e:	2b40      	cmp	r3, #64	@ 0x40
 8004690:	d146      	bne.n	8004720 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3308      	adds	r3, #8
 8004698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1d9      	bne.n	8004692 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d017      	beq.n	8004718 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ee:	4a15      	ldr	r2, [pc, #84]	@ (8004744 <HAL_UART_IRQHandler+0x2c0>)
 80046f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fd fa89 	bl	8001c10 <HAL_DMA_Abort_IT>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d019      	beq.n	8004738 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004712:	4610      	mov	r0, r2
 8004714:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004716:	e00f      	b.n	8004738 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f9ff 	bl	8004b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471e:	e00b      	b.n	8004738 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f9fb 	bl	8004b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004726:	e007      	b.n	8004738 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f9f7 	bl	8004b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004736:	e1dc      	b.n	8004af2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	bf00      	nop
    return;
 800473a:	e1da      	b.n	8004af2 <HAL_UART_IRQHandler+0x66e>
 800473c:	10000001 	.word	0x10000001
 8004740:	04000120 	.word	0x04000120
 8004744:	0800557f 	.word	0x0800557f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474c:	2b01      	cmp	r3, #1
 800474e:	f040 8170 	bne.w	8004a32 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8169 	beq.w	8004a32 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8162 	beq.w	8004a32 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2210      	movs	r2, #16
 8004774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004780:	2b40      	cmp	r3, #64	@ 0x40
 8004782:	f040 80d8 	bne.w	8004936 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80af 	beq.w	80048fc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80047a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047a8:	429a      	cmp	r2, r3
 80047aa:	f080 80a7 	bcs.w	80048fc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 8087 	bne.w	80048da <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004802:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800480e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1da      	bne.n	80047cc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3308      	adds	r3, #8
 800481c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004826:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3308      	adds	r3, #8
 8004836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800483a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800483e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004842:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800484c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e1      	bne.n	8004816 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3308      	adds	r3, #8
 8004858:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004868:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3308      	adds	r3, #8
 8004872:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004876:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004878:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800487c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004884:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e3      	bne.n	8004852 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a8:	f023 0310 	bic.w	r3, r3, #16
 80048ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e4      	bne.n	8004898 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fd f942 	bl	8001b5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f91b 	bl	8004b30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80048fa:	e0fc      	b.n	8004af6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004906:	429a      	cmp	r2, r3
 8004908:	f040 80f5 	bne.w	8004af6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	f040 80eb 	bne.w	8004af6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8fe 	bl	8004b30 <HAL_UARTEx_RxEventCallback>
      return;
 8004934:	e0df      	b.n	8004af6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004942:	b29b      	uxth	r3, r3
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80d1 	beq.w	8004afa <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80cc 	beq.w	8004afa <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004976:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004984:	647b      	str	r3, [r7, #68]	@ 0x44
 8004986:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800498a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e4      	bne.n	8004962 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	623b      	str	r3, [r7, #32]
   return(result);
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3308      	adds	r3, #8
 80049bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80049c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e1      	bne.n	8004998 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f023 0310 	bic.w	r3, r3, #16
 80049fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	69b9      	ldr	r1, [r7, #24]
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	617b      	str	r3, [r7, #20]
   return(result);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e4      	bne.n	80049e8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f880 	bl	8004b30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a30:	e063      	b.n	8004afa <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00e      	beq.n	8004a5c <HAL_UART_IRQHandler+0x5d8>
 8004a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fdcf 	bl	80055f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a5a:	e051      	b.n	8004b00 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d014      	beq.n	8004a92 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d03a      	beq.n	8004afe <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
    }
    return;
 8004a90:	e035      	b.n	8004afe <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x62e>
 8004a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fd79 	bl	80055a2 <UART_EndTransmit_IT>
    return;
 8004ab0:	e026      	b.n	8004b00 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x64e>
 8004abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fda8 	bl	8005620 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ad0:	e016      	b.n	8004b00 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d010      	beq.n	8004b00 <HAL_UART_IRQHandler+0x67c>
 8004ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	da0c      	bge.n	8004b00 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fd90 	bl	800560c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004aec:	e008      	b.n	8004b00 <HAL_UART_IRQHandler+0x67c>
      return;
 8004aee:	bf00      	nop
 8004af0:	e006      	b.n	8004b00 <HAL_UART_IRQHandler+0x67c>
    return;
 8004af2:	bf00      	nop
 8004af4:	e004      	b.n	8004b00 <HAL_UART_IRQHandler+0x67c>
      return;
 8004af6:	bf00      	nop
 8004af8:	e002      	b.n	8004b00 <HAL_UART_IRQHandler+0x67c>
      return;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <HAL_UART_IRQHandler+0x67c>
    return;
 8004afe:	bf00      	nop
  }
}
 8004b00:	37e8      	adds	r7, #232	@ 0xe8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop

08004b08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b4c:	b08c      	sub	sp, #48	@ 0x30
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4baa      	ldr	r3, [pc, #680]	@ (8004e20 <UART_SetConfig+0x2d8>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b80:	430b      	orrs	r3, r1
 8004b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a9f      	ldr	r2, [pc, #636]	@ (8004e24 <UART_SetConfig+0x2dc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004bbe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	f023 010f 	bic.w	r1, r3, #15
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a90      	ldr	r2, [pc, #576]	@ (8004e28 <UART_SetConfig+0x2e0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d125      	bne.n	8004c38 <UART_SetConfig+0xf0>
 8004bec:	4b8f      	ldr	r3, [pc, #572]	@ (8004e2c <UART_SetConfig+0x2e4>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d81a      	bhi.n	8004c30 <UART_SetConfig+0xe8>
 8004bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004c00 <UART_SetConfig+0xb8>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	08004c19 	.word	0x08004c19
 8004c0c:	08004c29 	.word	0x08004c29
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c16:	e116      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1e:	e112      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c20:	2304      	movs	r3, #4
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c26:	e10e      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c2e:	e10a      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c30:	2310      	movs	r3, #16
 8004c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c36:	e106      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a7c      	ldr	r2, [pc, #496]	@ (8004e30 <UART_SetConfig+0x2e8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d138      	bne.n	8004cb4 <UART_SetConfig+0x16c>
 8004c42:	4b7a      	ldr	r3, [pc, #488]	@ (8004e2c <UART_SetConfig+0x2e4>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c48:	f003 030c 	and.w	r3, r3, #12
 8004c4c:	2b0c      	cmp	r3, #12
 8004c4e:	d82d      	bhi.n	8004cac <UART_SetConfig+0x164>
 8004c50:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <UART_SetConfig+0x110>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c8d 	.word	0x08004c8d
 8004c5c:	08004cad 	.word	0x08004cad
 8004c60:	08004cad 	.word	0x08004cad
 8004c64:	08004cad 	.word	0x08004cad
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004cad 	.word	0x08004cad
 8004c70:	08004cad 	.word	0x08004cad
 8004c74:	08004cad 	.word	0x08004cad
 8004c78:	08004c95 	.word	0x08004c95
 8004c7c:	08004cad 	.word	0x08004cad
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004ca5 	.word	0x08004ca5
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c92:	e0d8      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c94:	2302      	movs	r3, #2
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c9a:	e0d4      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ca2:	e0d0      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004caa:	e0cc      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004cac:	2310      	movs	r3, #16
 8004cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cb2:	e0c8      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a5e      	ldr	r2, [pc, #376]	@ (8004e34 <UART_SetConfig+0x2ec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d125      	bne.n	8004d0a <UART_SetConfig+0x1c2>
 8004cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8004e2c <UART_SetConfig+0x2e4>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004cc8:	2b30      	cmp	r3, #48	@ 0x30
 8004cca:	d016      	beq.n	8004cfa <UART_SetConfig+0x1b2>
 8004ccc:	2b30      	cmp	r3, #48	@ 0x30
 8004cce:	d818      	bhi.n	8004d02 <UART_SetConfig+0x1ba>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d00a      	beq.n	8004cea <UART_SetConfig+0x1a2>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d814      	bhi.n	8004d02 <UART_SetConfig+0x1ba>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <UART_SetConfig+0x19a>
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d008      	beq.n	8004cf2 <UART_SetConfig+0x1aa>
 8004ce0:	e00f      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce8:	e0ad      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004cea:	2302      	movs	r3, #2
 8004cec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cf0:	e0a9      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004cf2:	2304      	movs	r3, #4
 8004cf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cf8:	e0a5      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d00:	e0a1      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d02:	2310      	movs	r3, #16
 8004d04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d08:	e09d      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8004e38 <UART_SetConfig+0x2f0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d125      	bne.n	8004d60 <UART_SetConfig+0x218>
 8004d14:	4b45      	ldr	r3, [pc, #276]	@ (8004e2c <UART_SetConfig+0x2e4>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d20:	d016      	beq.n	8004d50 <UART_SetConfig+0x208>
 8004d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d24:	d818      	bhi.n	8004d58 <UART_SetConfig+0x210>
 8004d26:	2b80      	cmp	r3, #128	@ 0x80
 8004d28:	d00a      	beq.n	8004d40 <UART_SetConfig+0x1f8>
 8004d2a:	2b80      	cmp	r3, #128	@ 0x80
 8004d2c:	d814      	bhi.n	8004d58 <UART_SetConfig+0x210>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <UART_SetConfig+0x1f0>
 8004d32:	2b40      	cmp	r3, #64	@ 0x40
 8004d34:	d008      	beq.n	8004d48 <UART_SetConfig+0x200>
 8004d36:	e00f      	b.n	8004d58 <UART_SetConfig+0x210>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d3e:	e082      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d46:	e07e      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d4e:	e07a      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d56:	e076      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d5e:	e072      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a35      	ldr	r2, [pc, #212]	@ (8004e3c <UART_SetConfig+0x2f4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d12a      	bne.n	8004dc0 <UART_SetConfig+0x278>
 8004d6a:	4b30      	ldr	r3, [pc, #192]	@ (8004e2c <UART_SetConfig+0x2e4>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d78:	d01a      	beq.n	8004db0 <UART_SetConfig+0x268>
 8004d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d7e:	d81b      	bhi.n	8004db8 <UART_SetConfig+0x270>
 8004d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d84:	d00c      	beq.n	8004da0 <UART_SetConfig+0x258>
 8004d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d8a:	d815      	bhi.n	8004db8 <UART_SetConfig+0x270>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <UART_SetConfig+0x250>
 8004d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d94:	d008      	beq.n	8004da8 <UART_SetConfig+0x260>
 8004d96:	e00f      	b.n	8004db8 <UART_SetConfig+0x270>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d9e:	e052      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004da0:	2302      	movs	r3, #2
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004da6:	e04e      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dae:	e04a      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004db6:	e046      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dbe:	e042      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	@ (8004e24 <UART_SetConfig+0x2dc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d13a      	bne.n	8004e40 <UART_SetConfig+0x2f8>
 8004dca:	4b18      	ldr	r3, [pc, #96]	@ (8004e2c <UART_SetConfig+0x2e4>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004dd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dd8:	d01a      	beq.n	8004e10 <UART_SetConfig+0x2c8>
 8004dda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dde:	d81b      	bhi.n	8004e18 <UART_SetConfig+0x2d0>
 8004de0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004de4:	d00c      	beq.n	8004e00 <UART_SetConfig+0x2b8>
 8004de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dea:	d815      	bhi.n	8004e18 <UART_SetConfig+0x2d0>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <UART_SetConfig+0x2b0>
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df4:	d008      	beq.n	8004e08 <UART_SetConfig+0x2c0>
 8004df6:	e00f      	b.n	8004e18 <UART_SetConfig+0x2d0>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dfe:	e022      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004e00:	2302      	movs	r3, #2
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e06:	e01e      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e0e:	e01a      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e16:	e016      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e1e:	e012      	b.n	8004e46 <UART_SetConfig+0x2fe>
 8004e20:	cfff69f3 	.word	0xcfff69f3
 8004e24:	40008000 	.word	0x40008000
 8004e28:	40013800 	.word	0x40013800
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40004400 	.word	0x40004400
 8004e34:	40004800 	.word	0x40004800
 8004e38:	40004c00 	.word	0x40004c00
 8004e3c:	40005000 	.word	0x40005000
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4aae      	ldr	r2, [pc, #696]	@ (8005104 <UART_SetConfig+0x5bc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	f040 8097 	bne.w	8004f80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d823      	bhi.n	8004ea2 <UART_SetConfig+0x35a>
 8004e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e60 <UART_SetConfig+0x318>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004ea3 	.word	0x08004ea3
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004ea3 	.word	0x08004ea3
 8004e70:	08004e93 	.word	0x08004e93
 8004e74:	08004ea3 	.word	0x08004ea3
 8004e78:	08004ea3 	.word	0x08004ea3
 8004e7c:	08004ea3 	.word	0x08004ea3
 8004e80:	08004e9b 	.word	0x08004e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fd fe36 	bl	8002af4 <HAL_RCC_GetPCLK1Freq>
 8004e88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e8a:	e010      	b.n	8004eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e8c:	4b9e      	ldr	r3, [pc, #632]	@ (8005108 <UART_SetConfig+0x5c0>)
 8004e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e90:	e00d      	b.n	8004eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e92:	f7fd fdc1 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8004e96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e98:	e009      	b.n	8004eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ea0:	e005      	b.n	8004eae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004eac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8130 	beq.w	8005116 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	4a94      	ldr	r2, [pc, #592]	@ (800510c <UART_SetConfig+0x5c4>)
 8004ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4413      	add	r3, r2
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d305      	bcc.n	8004ee6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d903      	bls.n	8004eee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004eec:	e113      	b.n	8005116 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	60fa      	str	r2, [r7, #12]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	4a84      	ldr	r2, [pc, #528]	@ (800510c <UART_SetConfig+0x5c4>)
 8004efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2200      	movs	r2, #0
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f10:	f7fb fe72 	bl	8000bf8 <__aeabi_uldivmod>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	020b      	lsls	r3, r1, #8
 8004f26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f2a:	0202      	lsls	r2, r0, #8
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	6849      	ldr	r1, [r1, #4]
 8004f30:	0849      	lsrs	r1, r1, #1
 8004f32:	2000      	movs	r0, #0
 8004f34:	460c      	mov	r4, r1
 8004f36:	4605      	mov	r5, r0
 8004f38:	eb12 0804 	adds.w	r8, r2, r4
 8004f3c:	eb43 0905 	adc.w	r9, r3, r5
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	469a      	mov	sl, r3
 8004f48:	4693      	mov	fp, r2
 8004f4a:	4652      	mov	r2, sl
 8004f4c:	465b      	mov	r3, fp
 8004f4e:	4640      	mov	r0, r8
 8004f50:	4649      	mov	r1, r9
 8004f52:	f7fb fe51 	bl	8000bf8 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f64:	d308      	bcc.n	8004f78 <UART_SetConfig+0x430>
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f6c:	d204      	bcs.n	8004f78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a3a      	ldr	r2, [r7, #32]
 8004f74:	60da      	str	r2, [r3, #12]
 8004f76:	e0ce      	b.n	8005116 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f7e:	e0ca      	b.n	8005116 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f88:	d166      	bne.n	8005058 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d827      	bhi.n	8004fe2 <UART_SetConfig+0x49a>
 8004f92:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <UART_SetConfig+0x450>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	08004fe3 	.word	0x08004fe3
 8004fa8:	08004fd3 	.word	0x08004fd3
 8004fac:	08004fe3 	.word	0x08004fe3
 8004fb0:	08004fe3 	.word	0x08004fe3
 8004fb4:	08004fe3 	.word	0x08004fe3
 8004fb8:	08004fdb 	.word	0x08004fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fd fd9a 	bl	8002af4 <HAL_RCC_GetPCLK1Freq>
 8004fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fc2:	e014      	b.n	8004fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc4:	f7fd fdac 	bl	8002b20 <HAL_RCC_GetPCLK2Freq>
 8004fc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fca:	e010      	b.n	8004fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8005108 <UART_SetConfig+0x5c0>)
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fd0:	e00d      	b.n	8004fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd2:	f7fd fd21 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8004fd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fd8:	e009      	b.n	8004fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fe0:	e005      	b.n	8004fee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8090 	beq.w	8005116 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	4a44      	ldr	r2, [pc, #272]	@ (800510c <UART_SetConfig+0x5c4>)
 8004ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005000:	461a      	mov	r2, r3
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	fbb3 f3f2 	udiv	r3, r3, r2
 8005008:	005a      	lsls	r2, r3, #1
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	441a      	add	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	fbb2 f3f3 	udiv	r3, r2, r3
 800501a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	2b0f      	cmp	r3, #15
 8005020:	d916      	bls.n	8005050 <UART_SetConfig+0x508>
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005028:	d212      	bcs.n	8005050 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	b29b      	uxth	r3, r3
 800502e:	f023 030f 	bic.w	r3, r3, #15
 8005032:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	b29b      	uxth	r3, r3
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	b29a      	uxth	r2, r3
 8005040:	8bfb      	ldrh	r3, [r7, #30]
 8005042:	4313      	orrs	r3, r2
 8005044:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	8bfa      	ldrh	r2, [r7, #30]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	e062      	b.n	8005116 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005056:	e05e      	b.n	8005116 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005058:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800505c:	2b08      	cmp	r3, #8
 800505e:	d828      	bhi.n	80050b2 <UART_SetConfig+0x56a>
 8005060:	a201      	add	r2, pc, #4	@ (adr r2, 8005068 <UART_SetConfig+0x520>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	0800508d 	.word	0x0800508d
 800506c:	08005095 	.word	0x08005095
 8005070:	0800509d 	.word	0x0800509d
 8005074:	080050b3 	.word	0x080050b3
 8005078:	080050a3 	.word	0x080050a3
 800507c:	080050b3 	.word	0x080050b3
 8005080:	080050b3 	.word	0x080050b3
 8005084:	080050b3 	.word	0x080050b3
 8005088:	080050ab 	.word	0x080050ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fd fd32 	bl	8002af4 <HAL_RCC_GetPCLK1Freq>
 8005090:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005092:	e014      	b.n	80050be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005094:	f7fd fd44 	bl	8002b20 <HAL_RCC_GetPCLK2Freq>
 8005098:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800509a:	e010      	b.n	80050be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800509c:	4b1a      	ldr	r3, [pc, #104]	@ (8005108 <UART_SetConfig+0x5c0>)
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050a0:	e00d      	b.n	80050be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a2:	f7fd fcb9 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80050a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050a8:	e009      	b.n	80050be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050b0:	e005      	b.n	80050be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050bc:	bf00      	nop
    }

    if (pclk != 0U)
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d028      	beq.n	8005116 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	4a10      	ldr	r2, [pc, #64]	@ (800510c <UART_SetConfig+0x5c4>)
 80050ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	441a      	add	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	2b0f      	cmp	r3, #15
 80050ec:	d910      	bls.n	8005110 <UART_SetConfig+0x5c8>
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f4:	d20c      	bcs.n	8005110 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60da      	str	r2, [r3, #12]
 8005100:	e009      	b.n	8005116 <UART_SetConfig+0x5ce>
 8005102:	bf00      	nop
 8005104:	40008000 	.word	0x40008000
 8005108:	00f42400 	.word	0x00f42400
 800510c:	08008520 	.word	0x08008520
      }
      else
      {
        ret = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2201      	movs	r2, #1
 800511a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2201      	movs	r2, #1
 8005122:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2200      	movs	r2, #0
 800512a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2200      	movs	r2, #0
 8005130:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005132:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005136:	4618      	mov	r0, r3
 8005138:	3730      	adds	r7, #48	@ 0x30
 800513a:	46bd      	mov	sp, r7
 800513c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01a      	beq.n	8005256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800523e:	d10a      	bne.n	8005256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b098      	sub	sp, #96	@ 0x60
 8005288:	af02      	add	r7, sp, #8
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005294:	f7fc fb48 	bl	8001928 <HAL_GetTick>
 8005298:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d12f      	bne.n	8005308 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b0:	2200      	movs	r2, #0
 80052b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f88e 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d022      	beq.n	8005308 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e6      	bne.n	80052c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e063      	b.n	80053d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b04      	cmp	r3, #4
 8005314:	d149      	bne.n	80053aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005316:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800531e:	2200      	movs	r2, #0
 8005320:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f857 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d03c      	beq.n	80053aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	623b      	str	r3, [r7, #32]
   return(result);
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800534e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005350:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e6      	bne.n	8005330 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	60fb      	str	r3, [r7, #12]
   return(result);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005382:	61fa      	str	r2, [r7, #28]
 8005384:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	69b9      	ldr	r1, [r7, #24]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	617b      	str	r3, [r7, #20]
   return(result);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e012      	b.n	80053d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3758      	adds	r7, #88	@ 0x58
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	e04f      	b.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d04b      	beq.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7fc fa99 	bl	8001928 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <UART_WaitOnFlagUntilTimeout+0x30>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e04e      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d037      	beq.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b80      	cmp	r3, #128	@ 0x80
 800541e:	d034      	beq.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b40      	cmp	r3, #64	@ 0x40
 8005424:	d031      	beq.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b08      	cmp	r3, #8
 8005432:	d110      	bne.n	8005456 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2208      	movs	r2, #8
 800543a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f838 	bl	80054b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2208      	movs	r2, #8
 8005446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e029      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005464:	d111      	bne.n	800548a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800546e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f81e 	bl	80054b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e00f      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4013      	ands	r3, r2
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	429a      	cmp	r2, r3
 8005498:	bf0c      	ite	eq
 800549a:	2301      	moveq	r3, #1
 800549c:	2300      	movne	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d0a0      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b095      	sub	sp, #84	@ 0x54
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80054da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e6      	bne.n	80054ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3308      	adds	r3, #8
 80054f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3308      	adds	r3, #8
 800550e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005510:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005512:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e3      	bne.n	80054ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d118      	bne.n	800555e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	60bb      	str	r3, [r7, #8]
   return(result);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f023 0310 	bic.w	r3, r3, #16
 8005540:	647b      	str	r3, [r7, #68]	@ 0x44
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6979      	ldr	r1, [r7, #20]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	613b      	str	r3, [r7, #16]
   return(result);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e6      	bne.n	800552c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005572:	bf00      	nop
 8005574:	3754      	adds	r7, #84	@ 0x54
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f7ff fac1 	bl	8004b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b088      	sub	sp, #32
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6979      	ldr	r1, [r7, #20]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	613b      	str	r3, [r7, #16]
   return(result);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e6      	bne.n	80055aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff fa8c 	bl	8004b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055f0:	bf00      	nop
 80055f2:	3720      	adds	r7, #32
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_UARTEx_DisableFifoMode+0x16>
 8005646:	2302      	movs	r3, #2
 8005648:	e027      	b.n	800569a <HAL_UARTEx_DisableFifoMode+0x66>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2224      	movs	r2, #36	@ 0x24
 8005656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0201 	bic.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005678:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e02d      	b.n	800571a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2224      	movs	r2, #36	@ 0x24
 80056ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f850 	bl	80057a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005736:	2302      	movs	r3, #2
 8005738:	e02d      	b.n	8005796 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2224      	movs	r2, #36	@ 0x24
 8005746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0201 	bic.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f812 	bl	80057a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d108      	bne.n	80057c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057c0:	e031      	b.n	8005826 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057c2:	2308      	movs	r3, #8
 80057c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057c6:	2308      	movs	r3, #8
 80057c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	0e5b      	lsrs	r3, r3, #25
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	0f5b      	lsrs	r3, r3, #29
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ea:	7bbb      	ldrb	r3, [r7, #14]
 80057ec:	7b3a      	ldrb	r2, [r7, #12]
 80057ee:	4911      	ldr	r1, [pc, #68]	@ (8005834 <UARTEx_SetNbDataToProcess+0x94>)
 80057f0:	5c8a      	ldrb	r2, [r1, r2]
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057f6:	7b3a      	ldrb	r2, [r7, #12]
 80057f8:	490f      	ldr	r1, [pc, #60]	@ (8005838 <UARTEx_SetNbDataToProcess+0x98>)
 80057fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	7b7a      	ldrb	r2, [r7, #13]
 800580c:	4909      	ldr	r1, [pc, #36]	@ (8005834 <UARTEx_SetNbDataToProcess+0x94>)
 800580e:	5c8a      	ldrb	r2, [r1, r2]
 8005810:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005814:	7b7a      	ldrb	r2, [r7, #13]
 8005816:	4908      	ldr	r1, [pc, #32]	@ (8005838 <UARTEx_SetNbDataToProcess+0x98>)
 8005818:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800581a:	fb93 f3f2 	sdiv	r3, r3, r2
 800581e:	b29a      	uxth	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	08008538 	.word	0x08008538
 8005838:	08008540 	.word	0x08008540

0800583c <__cvt>:
 800583c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	ec57 6b10 	vmov	r6, r7, d0
 8005844:	2f00      	cmp	r7, #0
 8005846:	460c      	mov	r4, r1
 8005848:	4619      	mov	r1, r3
 800584a:	463b      	mov	r3, r7
 800584c:	bfbb      	ittet	lt
 800584e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005852:	461f      	movlt	r7, r3
 8005854:	2300      	movge	r3, #0
 8005856:	232d      	movlt	r3, #45	@ 0x2d
 8005858:	700b      	strb	r3, [r1, #0]
 800585a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800585c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005860:	4691      	mov	r9, r2
 8005862:	f023 0820 	bic.w	r8, r3, #32
 8005866:	bfbc      	itt	lt
 8005868:	4632      	movlt	r2, r6
 800586a:	4616      	movlt	r6, r2
 800586c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005870:	d005      	beq.n	800587e <__cvt+0x42>
 8005872:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005876:	d100      	bne.n	800587a <__cvt+0x3e>
 8005878:	3401      	adds	r4, #1
 800587a:	2102      	movs	r1, #2
 800587c:	e000      	b.n	8005880 <__cvt+0x44>
 800587e:	2103      	movs	r1, #3
 8005880:	ab03      	add	r3, sp, #12
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	ab02      	add	r3, sp, #8
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	ec47 6b10 	vmov	d0, r6, r7
 800588c:	4653      	mov	r3, sl
 800588e:	4622      	mov	r2, r4
 8005890:	f000 fe5a 	bl	8006548 <_dtoa_r>
 8005894:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005898:	4605      	mov	r5, r0
 800589a:	d119      	bne.n	80058d0 <__cvt+0x94>
 800589c:	f019 0f01 	tst.w	r9, #1
 80058a0:	d00e      	beq.n	80058c0 <__cvt+0x84>
 80058a2:	eb00 0904 	add.w	r9, r0, r4
 80058a6:	2200      	movs	r2, #0
 80058a8:	2300      	movs	r3, #0
 80058aa:	4630      	mov	r0, r6
 80058ac:	4639      	mov	r1, r7
 80058ae:	f7fb f933 	bl	8000b18 <__aeabi_dcmpeq>
 80058b2:	b108      	cbz	r0, 80058b8 <__cvt+0x7c>
 80058b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80058b8:	2230      	movs	r2, #48	@ 0x30
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	454b      	cmp	r3, r9
 80058be:	d31e      	bcc.n	80058fe <__cvt+0xc2>
 80058c0:	9b03      	ldr	r3, [sp, #12]
 80058c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058c4:	1b5b      	subs	r3, r3, r5
 80058c6:	4628      	mov	r0, r5
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	b004      	add	sp, #16
 80058cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058d4:	eb00 0904 	add.w	r9, r0, r4
 80058d8:	d1e5      	bne.n	80058a6 <__cvt+0x6a>
 80058da:	7803      	ldrb	r3, [r0, #0]
 80058dc:	2b30      	cmp	r3, #48	@ 0x30
 80058de:	d10a      	bne.n	80058f6 <__cvt+0xba>
 80058e0:	2200      	movs	r2, #0
 80058e2:	2300      	movs	r3, #0
 80058e4:	4630      	mov	r0, r6
 80058e6:	4639      	mov	r1, r7
 80058e8:	f7fb f916 	bl	8000b18 <__aeabi_dcmpeq>
 80058ec:	b918      	cbnz	r0, 80058f6 <__cvt+0xba>
 80058ee:	f1c4 0401 	rsb	r4, r4, #1
 80058f2:	f8ca 4000 	str.w	r4, [sl]
 80058f6:	f8da 3000 	ldr.w	r3, [sl]
 80058fa:	4499      	add	r9, r3
 80058fc:	e7d3      	b.n	80058a6 <__cvt+0x6a>
 80058fe:	1c59      	adds	r1, r3, #1
 8005900:	9103      	str	r1, [sp, #12]
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	e7d9      	b.n	80058ba <__cvt+0x7e>

08005906 <__exponent>:
 8005906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005908:	2900      	cmp	r1, #0
 800590a:	bfba      	itte	lt
 800590c:	4249      	neglt	r1, r1
 800590e:	232d      	movlt	r3, #45	@ 0x2d
 8005910:	232b      	movge	r3, #43	@ 0x2b
 8005912:	2909      	cmp	r1, #9
 8005914:	7002      	strb	r2, [r0, #0]
 8005916:	7043      	strb	r3, [r0, #1]
 8005918:	dd29      	ble.n	800596e <__exponent+0x68>
 800591a:	f10d 0307 	add.w	r3, sp, #7
 800591e:	461d      	mov	r5, r3
 8005920:	270a      	movs	r7, #10
 8005922:	461a      	mov	r2, r3
 8005924:	fbb1 f6f7 	udiv	r6, r1, r7
 8005928:	fb07 1416 	mls	r4, r7, r6, r1
 800592c:	3430      	adds	r4, #48	@ 0x30
 800592e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005932:	460c      	mov	r4, r1
 8005934:	2c63      	cmp	r4, #99	@ 0x63
 8005936:	f103 33ff 	add.w	r3, r3, #4294967295
 800593a:	4631      	mov	r1, r6
 800593c:	dcf1      	bgt.n	8005922 <__exponent+0x1c>
 800593e:	3130      	adds	r1, #48	@ 0x30
 8005940:	1e94      	subs	r4, r2, #2
 8005942:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005946:	1c41      	adds	r1, r0, #1
 8005948:	4623      	mov	r3, r4
 800594a:	42ab      	cmp	r3, r5
 800594c:	d30a      	bcc.n	8005964 <__exponent+0x5e>
 800594e:	f10d 0309 	add.w	r3, sp, #9
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	42ac      	cmp	r4, r5
 8005956:	bf88      	it	hi
 8005958:	2300      	movhi	r3, #0
 800595a:	3302      	adds	r3, #2
 800595c:	4403      	add	r3, r0
 800595e:	1a18      	subs	r0, r3, r0
 8005960:	b003      	add	sp, #12
 8005962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005964:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005968:	f801 6f01 	strb.w	r6, [r1, #1]!
 800596c:	e7ed      	b.n	800594a <__exponent+0x44>
 800596e:	2330      	movs	r3, #48	@ 0x30
 8005970:	3130      	adds	r1, #48	@ 0x30
 8005972:	7083      	strb	r3, [r0, #2]
 8005974:	70c1      	strb	r1, [r0, #3]
 8005976:	1d03      	adds	r3, r0, #4
 8005978:	e7f1      	b.n	800595e <__exponent+0x58>
	...

0800597c <_printf_float>:
 800597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	b08d      	sub	sp, #52	@ 0x34
 8005982:	460c      	mov	r4, r1
 8005984:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005988:	4616      	mov	r6, r2
 800598a:	461f      	mov	r7, r3
 800598c:	4605      	mov	r5, r0
 800598e:	f000 fcdb 	bl	8006348 <_localeconv_r>
 8005992:	6803      	ldr	r3, [r0, #0]
 8005994:	9304      	str	r3, [sp, #16]
 8005996:	4618      	mov	r0, r3
 8005998:	f7fa fc92 	bl	80002c0 <strlen>
 800599c:	2300      	movs	r3, #0
 800599e:	930a      	str	r3, [sp, #40]	@ 0x28
 80059a0:	f8d8 3000 	ldr.w	r3, [r8]
 80059a4:	9005      	str	r0, [sp, #20]
 80059a6:	3307      	adds	r3, #7
 80059a8:	f023 0307 	bic.w	r3, r3, #7
 80059ac:	f103 0208 	add.w	r2, r3, #8
 80059b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80059b4:	f8d4 b000 	ldr.w	fp, [r4]
 80059b8:	f8c8 2000 	str.w	r2, [r8]
 80059bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80059c4:	9307      	str	r3, [sp, #28]
 80059c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80059ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80059ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059d2:	4b9c      	ldr	r3, [pc, #624]	@ (8005c44 <_printf_float+0x2c8>)
 80059d4:	f04f 32ff 	mov.w	r2, #4294967295
 80059d8:	f7fb f8d0 	bl	8000b7c <__aeabi_dcmpun>
 80059dc:	bb70      	cbnz	r0, 8005a3c <_printf_float+0xc0>
 80059de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059e2:	4b98      	ldr	r3, [pc, #608]	@ (8005c44 <_printf_float+0x2c8>)
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295
 80059e8:	f7fb f8aa 	bl	8000b40 <__aeabi_dcmple>
 80059ec:	bb30      	cbnz	r0, 8005a3c <_printf_float+0xc0>
 80059ee:	2200      	movs	r2, #0
 80059f0:	2300      	movs	r3, #0
 80059f2:	4640      	mov	r0, r8
 80059f4:	4649      	mov	r1, r9
 80059f6:	f7fb f899 	bl	8000b2c <__aeabi_dcmplt>
 80059fa:	b110      	cbz	r0, 8005a02 <_printf_float+0x86>
 80059fc:	232d      	movs	r3, #45	@ 0x2d
 80059fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a02:	4a91      	ldr	r2, [pc, #580]	@ (8005c48 <_printf_float+0x2cc>)
 8005a04:	4b91      	ldr	r3, [pc, #580]	@ (8005c4c <_printf_float+0x2d0>)
 8005a06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005a0a:	bf8c      	ite	hi
 8005a0c:	4690      	movhi	r8, r2
 8005a0e:	4698      	movls	r8, r3
 8005a10:	2303      	movs	r3, #3
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	f02b 0304 	bic.w	r3, fp, #4
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	f04f 0900 	mov.w	r9, #0
 8005a1e:	9700      	str	r7, [sp, #0]
 8005a20:	4633      	mov	r3, r6
 8005a22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005a24:	4621      	mov	r1, r4
 8005a26:	4628      	mov	r0, r5
 8005a28:	f000 f9d2 	bl	8005dd0 <_printf_common>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	f040 808d 	bne.w	8005b4c <_printf_float+0x1d0>
 8005a32:	f04f 30ff 	mov.w	r0, #4294967295
 8005a36:	b00d      	add	sp, #52	@ 0x34
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	4640      	mov	r0, r8
 8005a42:	4649      	mov	r1, r9
 8005a44:	f7fb f89a 	bl	8000b7c <__aeabi_dcmpun>
 8005a48:	b140      	cbz	r0, 8005a5c <_printf_float+0xe0>
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bfbc      	itt	lt
 8005a50:	232d      	movlt	r3, #45	@ 0x2d
 8005a52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a56:	4a7e      	ldr	r2, [pc, #504]	@ (8005c50 <_printf_float+0x2d4>)
 8005a58:	4b7e      	ldr	r3, [pc, #504]	@ (8005c54 <_printf_float+0x2d8>)
 8005a5a:	e7d4      	b.n	8005a06 <_printf_float+0x8a>
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a62:	9206      	str	r2, [sp, #24]
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	d13b      	bne.n	8005ae0 <_printf_float+0x164>
 8005a68:	2306      	movs	r3, #6
 8005a6a:	6063      	str	r3, [r4, #4]
 8005a6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a70:	2300      	movs	r3, #0
 8005a72:	6022      	str	r2, [r4, #0]
 8005a74:	9303      	str	r3, [sp, #12]
 8005a76:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a7c:	ab09      	add	r3, sp, #36	@ 0x24
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	6861      	ldr	r1, [r4, #4]
 8005a82:	ec49 8b10 	vmov	d0, r8, r9
 8005a86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f7ff fed6 	bl	800583c <__cvt>
 8005a90:	9b06      	ldr	r3, [sp, #24]
 8005a92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a94:	2b47      	cmp	r3, #71	@ 0x47
 8005a96:	4680      	mov	r8, r0
 8005a98:	d129      	bne.n	8005aee <_printf_float+0x172>
 8005a9a:	1cc8      	adds	r0, r1, #3
 8005a9c:	db02      	blt.n	8005aa4 <_printf_float+0x128>
 8005a9e:	6863      	ldr	r3, [r4, #4]
 8005aa0:	4299      	cmp	r1, r3
 8005aa2:	dd41      	ble.n	8005b28 <_printf_float+0x1ac>
 8005aa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005aa8:	fa5f fa8a 	uxtb.w	sl, sl
 8005aac:	3901      	subs	r1, #1
 8005aae:	4652      	mov	r2, sl
 8005ab0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ab4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ab6:	f7ff ff26 	bl	8005906 <__exponent>
 8005aba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005abc:	1813      	adds	r3, r2, r0
 8005abe:	2a01      	cmp	r2, #1
 8005ac0:	4681      	mov	r9, r0
 8005ac2:	6123      	str	r3, [r4, #16]
 8005ac4:	dc02      	bgt.n	8005acc <_printf_float+0x150>
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	07d2      	lsls	r2, r2, #31
 8005aca:	d501      	bpl.n	8005ad0 <_printf_float+0x154>
 8005acc:	3301      	adds	r3, #1
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0a2      	beq.n	8005a1e <_printf_float+0xa2>
 8005ad8:	232d      	movs	r3, #45	@ 0x2d
 8005ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ade:	e79e      	b.n	8005a1e <_printf_float+0xa2>
 8005ae0:	9a06      	ldr	r2, [sp, #24]
 8005ae2:	2a47      	cmp	r2, #71	@ 0x47
 8005ae4:	d1c2      	bne.n	8005a6c <_printf_float+0xf0>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1c0      	bne.n	8005a6c <_printf_float+0xf0>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e7bd      	b.n	8005a6a <_printf_float+0xee>
 8005aee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005af2:	d9db      	bls.n	8005aac <_printf_float+0x130>
 8005af4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005af8:	d118      	bne.n	8005b2c <_printf_float+0x1b0>
 8005afa:	2900      	cmp	r1, #0
 8005afc:	6863      	ldr	r3, [r4, #4]
 8005afe:	dd0b      	ble.n	8005b18 <_printf_float+0x19c>
 8005b00:	6121      	str	r1, [r4, #16]
 8005b02:	b913      	cbnz	r3, 8005b0a <_printf_float+0x18e>
 8005b04:	6822      	ldr	r2, [r4, #0]
 8005b06:	07d0      	lsls	r0, r2, #31
 8005b08:	d502      	bpl.n	8005b10 <_printf_float+0x194>
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	440b      	add	r3, r1
 8005b0e:	6123      	str	r3, [r4, #16]
 8005b10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005b12:	f04f 0900 	mov.w	r9, #0
 8005b16:	e7db      	b.n	8005ad0 <_printf_float+0x154>
 8005b18:	b913      	cbnz	r3, 8005b20 <_printf_float+0x1a4>
 8005b1a:	6822      	ldr	r2, [r4, #0]
 8005b1c:	07d2      	lsls	r2, r2, #31
 8005b1e:	d501      	bpl.n	8005b24 <_printf_float+0x1a8>
 8005b20:	3302      	adds	r3, #2
 8005b22:	e7f4      	b.n	8005b0e <_printf_float+0x192>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e7f2      	b.n	8005b0e <_printf_float+0x192>
 8005b28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b2e:	4299      	cmp	r1, r3
 8005b30:	db05      	blt.n	8005b3e <_printf_float+0x1c2>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	6121      	str	r1, [r4, #16]
 8005b36:	07d8      	lsls	r0, r3, #31
 8005b38:	d5ea      	bpl.n	8005b10 <_printf_float+0x194>
 8005b3a:	1c4b      	adds	r3, r1, #1
 8005b3c:	e7e7      	b.n	8005b0e <_printf_float+0x192>
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	bfd4      	ite	le
 8005b42:	f1c1 0202 	rsble	r2, r1, #2
 8005b46:	2201      	movgt	r2, #1
 8005b48:	4413      	add	r3, r2
 8005b4a:	e7e0      	b.n	8005b0e <_printf_float+0x192>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	055a      	lsls	r2, r3, #21
 8005b50:	d407      	bmi.n	8005b62 <_printf_float+0x1e6>
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	4642      	mov	r2, r8
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d12b      	bne.n	8005bb8 <_printf_float+0x23c>
 8005b60:	e767      	b.n	8005a32 <_printf_float+0xb6>
 8005b62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b66:	f240 80dd 	bls.w	8005d24 <_printf_float+0x3a8>
 8005b6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2300      	movs	r3, #0
 8005b72:	f7fa ffd1 	bl	8000b18 <__aeabi_dcmpeq>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d033      	beq.n	8005be2 <_printf_float+0x266>
 8005b7a:	4a37      	ldr	r2, [pc, #220]	@ (8005c58 <_printf_float+0x2dc>)
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	f43f af54 	beq.w	8005a32 <_printf_float+0xb6>
 8005b8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b8e:	4543      	cmp	r3, r8
 8005b90:	db02      	blt.n	8005b98 <_printf_float+0x21c>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	07d8      	lsls	r0, r3, #31
 8005b96:	d50f      	bpl.n	8005bb8 <_printf_float+0x23c>
 8005b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f43f af45 	beq.w	8005a32 <_printf_float+0xb6>
 8005ba8:	f04f 0900 	mov.w	r9, #0
 8005bac:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bb0:	f104 0a1a 	add.w	sl, r4, #26
 8005bb4:	45c8      	cmp	r8, r9
 8005bb6:	dc09      	bgt.n	8005bcc <_printf_float+0x250>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	079b      	lsls	r3, r3, #30
 8005bbc:	f100 8103 	bmi.w	8005dc6 <_printf_float+0x44a>
 8005bc0:	68e0      	ldr	r0, [r4, #12]
 8005bc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bc4:	4298      	cmp	r0, r3
 8005bc6:	bfb8      	it	lt
 8005bc8:	4618      	movlt	r0, r3
 8005bca:	e734      	b.n	8005a36 <_printf_float+0xba>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4652      	mov	r2, sl
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b8      	blx	r7
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f43f af2b 	beq.w	8005a32 <_printf_float+0xb6>
 8005bdc:	f109 0901 	add.w	r9, r9, #1
 8005be0:	e7e8      	b.n	8005bb4 <_printf_float+0x238>
 8005be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dc39      	bgt.n	8005c5c <_printf_float+0x2e0>
 8005be8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <_printf_float+0x2dc>)
 8005bea:	2301      	movs	r3, #1
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f af1d 	beq.w	8005a32 <_printf_float+0xb6>
 8005bf8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005bfc:	ea59 0303 	orrs.w	r3, r9, r3
 8005c00:	d102      	bne.n	8005c08 <_printf_float+0x28c>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	07d9      	lsls	r1, r3, #31
 8005c06:	d5d7      	bpl.n	8005bb8 <_printf_float+0x23c>
 8005c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	f43f af0d 	beq.w	8005a32 <_printf_float+0xb6>
 8005c18:	f04f 0a00 	mov.w	sl, #0
 8005c1c:	f104 0b1a 	add.w	fp, r4, #26
 8005c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c22:	425b      	negs	r3, r3
 8005c24:	4553      	cmp	r3, sl
 8005c26:	dc01      	bgt.n	8005c2c <_printf_float+0x2b0>
 8005c28:	464b      	mov	r3, r9
 8005c2a:	e793      	b.n	8005b54 <_printf_float+0x1d8>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	465a      	mov	r2, fp
 8005c30:	4631      	mov	r1, r6
 8005c32:	4628      	mov	r0, r5
 8005c34:	47b8      	blx	r7
 8005c36:	3001      	adds	r0, #1
 8005c38:	f43f aefb 	beq.w	8005a32 <_printf_float+0xb6>
 8005c3c:	f10a 0a01 	add.w	sl, sl, #1
 8005c40:	e7ee      	b.n	8005c20 <_printf_float+0x2a4>
 8005c42:	bf00      	nop
 8005c44:	7fefffff 	.word	0x7fefffff
 8005c48:	0800854c 	.word	0x0800854c
 8005c4c:	08008548 	.word	0x08008548
 8005c50:	08008554 	.word	0x08008554
 8005c54:	08008550 	.word	0x08008550
 8005c58:	08008558 	.word	0x08008558
 8005c5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c62:	4553      	cmp	r3, sl
 8005c64:	bfa8      	it	ge
 8005c66:	4653      	movge	r3, sl
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	4699      	mov	r9, r3
 8005c6c:	dc36      	bgt.n	8005cdc <_printf_float+0x360>
 8005c6e:	f04f 0b00 	mov.w	fp, #0
 8005c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c76:	f104 021a 	add.w	r2, r4, #26
 8005c7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c7c:	9306      	str	r3, [sp, #24]
 8005c7e:	eba3 0309 	sub.w	r3, r3, r9
 8005c82:	455b      	cmp	r3, fp
 8005c84:	dc31      	bgt.n	8005cea <_printf_float+0x36e>
 8005c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c88:	459a      	cmp	sl, r3
 8005c8a:	dc3a      	bgt.n	8005d02 <_printf_float+0x386>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	07da      	lsls	r2, r3, #31
 8005c90:	d437      	bmi.n	8005d02 <_printf_float+0x386>
 8005c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c94:	ebaa 0903 	sub.w	r9, sl, r3
 8005c98:	9b06      	ldr	r3, [sp, #24]
 8005c9a:	ebaa 0303 	sub.w	r3, sl, r3
 8005c9e:	4599      	cmp	r9, r3
 8005ca0:	bfa8      	it	ge
 8005ca2:	4699      	movge	r9, r3
 8005ca4:	f1b9 0f00 	cmp.w	r9, #0
 8005ca8:	dc33      	bgt.n	8005d12 <_printf_float+0x396>
 8005caa:	f04f 0800 	mov.w	r8, #0
 8005cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cb2:	f104 0b1a 	add.w	fp, r4, #26
 8005cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb8:	ebaa 0303 	sub.w	r3, sl, r3
 8005cbc:	eba3 0309 	sub.w	r3, r3, r9
 8005cc0:	4543      	cmp	r3, r8
 8005cc2:	f77f af79 	ble.w	8005bb8 <_printf_float+0x23c>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	465a      	mov	r2, fp
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f aeae 	beq.w	8005a32 <_printf_float+0xb6>
 8005cd6:	f108 0801 	add.w	r8, r8, #1
 8005cda:	e7ec      	b.n	8005cb6 <_printf_float+0x33a>
 8005cdc:	4642      	mov	r2, r8
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	47b8      	blx	r7
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d1c2      	bne.n	8005c6e <_printf_float+0x2f2>
 8005ce8:	e6a3      	b.n	8005a32 <_printf_float+0xb6>
 8005cea:	2301      	movs	r3, #1
 8005cec:	4631      	mov	r1, r6
 8005cee:	4628      	mov	r0, r5
 8005cf0:	9206      	str	r2, [sp, #24]
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f ae9c 	beq.w	8005a32 <_printf_float+0xb6>
 8005cfa:	9a06      	ldr	r2, [sp, #24]
 8005cfc:	f10b 0b01 	add.w	fp, fp, #1
 8005d00:	e7bb      	b.n	8005c7a <_printf_float+0x2fe>
 8005d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d06:	4631      	mov	r1, r6
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b8      	blx	r7
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d1c0      	bne.n	8005c92 <_printf_float+0x316>
 8005d10:	e68f      	b.n	8005a32 <_printf_float+0xb6>
 8005d12:	9a06      	ldr	r2, [sp, #24]
 8005d14:	464b      	mov	r3, r9
 8005d16:	4442      	add	r2, r8
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	47b8      	blx	r7
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d1c3      	bne.n	8005caa <_printf_float+0x32e>
 8005d22:	e686      	b.n	8005a32 <_printf_float+0xb6>
 8005d24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d28:	f1ba 0f01 	cmp.w	sl, #1
 8005d2c:	dc01      	bgt.n	8005d32 <_printf_float+0x3b6>
 8005d2e:	07db      	lsls	r3, r3, #31
 8005d30:	d536      	bpl.n	8005da0 <_printf_float+0x424>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4642      	mov	r2, r8
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	47b8      	blx	r7
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	f43f ae78 	beq.w	8005a32 <_printf_float+0xb6>
 8005d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f ae70 	beq.w	8005a32 <_printf_float+0xb6>
 8005d52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d56:	2200      	movs	r2, #0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d5e:	f7fa fedb 	bl	8000b18 <__aeabi_dcmpeq>
 8005d62:	b9c0      	cbnz	r0, 8005d96 <_printf_float+0x41a>
 8005d64:	4653      	mov	r3, sl
 8005d66:	f108 0201 	add.w	r2, r8, #1
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	d10c      	bne.n	8005d8e <_printf_float+0x412>
 8005d74:	e65d      	b.n	8005a32 <_printf_float+0xb6>
 8005d76:	2301      	movs	r3, #1
 8005d78:	465a      	mov	r2, fp
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b8      	blx	r7
 8005d80:	3001      	adds	r0, #1
 8005d82:	f43f ae56 	beq.w	8005a32 <_printf_float+0xb6>
 8005d86:	f108 0801 	add.w	r8, r8, #1
 8005d8a:	45d0      	cmp	r8, sl
 8005d8c:	dbf3      	blt.n	8005d76 <_printf_float+0x3fa>
 8005d8e:	464b      	mov	r3, r9
 8005d90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d94:	e6df      	b.n	8005b56 <_printf_float+0x1da>
 8005d96:	f04f 0800 	mov.w	r8, #0
 8005d9a:	f104 0b1a 	add.w	fp, r4, #26
 8005d9e:	e7f4      	b.n	8005d8a <_printf_float+0x40e>
 8005da0:	2301      	movs	r3, #1
 8005da2:	4642      	mov	r2, r8
 8005da4:	e7e1      	b.n	8005d6a <_printf_float+0x3ee>
 8005da6:	2301      	movs	r3, #1
 8005da8:	464a      	mov	r2, r9
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	f43f ae3e 	beq.w	8005a32 <_printf_float+0xb6>
 8005db6:	f108 0801 	add.w	r8, r8, #1
 8005dba:	68e3      	ldr	r3, [r4, #12]
 8005dbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005dbe:	1a5b      	subs	r3, r3, r1
 8005dc0:	4543      	cmp	r3, r8
 8005dc2:	dcf0      	bgt.n	8005da6 <_printf_float+0x42a>
 8005dc4:	e6fc      	b.n	8005bc0 <_printf_float+0x244>
 8005dc6:	f04f 0800 	mov.w	r8, #0
 8005dca:	f104 0919 	add.w	r9, r4, #25
 8005dce:	e7f4      	b.n	8005dba <_printf_float+0x43e>

08005dd0 <_printf_common>:
 8005dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	4698      	mov	r8, r3
 8005dd8:	688a      	ldr	r2, [r1, #8]
 8005dda:	690b      	ldr	r3, [r1, #16]
 8005ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005de0:	4293      	cmp	r3, r2
 8005de2:	bfb8      	it	lt
 8005de4:	4613      	movlt	r3, r2
 8005de6:	6033      	str	r3, [r6, #0]
 8005de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dec:	4607      	mov	r7, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	b10a      	cbz	r2, 8005df6 <_printf_common+0x26>
 8005df2:	3301      	adds	r3, #1
 8005df4:	6033      	str	r3, [r6, #0]
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	0699      	lsls	r1, r3, #26
 8005dfa:	bf42      	ittt	mi
 8005dfc:	6833      	ldrmi	r3, [r6, #0]
 8005dfe:	3302      	addmi	r3, #2
 8005e00:	6033      	strmi	r3, [r6, #0]
 8005e02:	6825      	ldr	r5, [r4, #0]
 8005e04:	f015 0506 	ands.w	r5, r5, #6
 8005e08:	d106      	bne.n	8005e18 <_printf_common+0x48>
 8005e0a:	f104 0a19 	add.w	sl, r4, #25
 8005e0e:	68e3      	ldr	r3, [r4, #12]
 8005e10:	6832      	ldr	r2, [r6, #0]
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	42ab      	cmp	r3, r5
 8005e16:	dc26      	bgt.n	8005e66 <_printf_common+0x96>
 8005e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e1c:	6822      	ldr	r2, [r4, #0]
 8005e1e:	3b00      	subs	r3, #0
 8005e20:	bf18      	it	ne
 8005e22:	2301      	movne	r3, #1
 8005e24:	0692      	lsls	r2, r2, #26
 8005e26:	d42b      	bmi.n	8005e80 <_printf_common+0xb0>
 8005e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	4638      	mov	r0, r7
 8005e30:	47c8      	blx	r9
 8005e32:	3001      	adds	r0, #1
 8005e34:	d01e      	beq.n	8005e74 <_printf_common+0xa4>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	6922      	ldr	r2, [r4, #16]
 8005e3a:	f003 0306 	and.w	r3, r3, #6
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	bf02      	ittt	eq
 8005e42:	68e5      	ldreq	r5, [r4, #12]
 8005e44:	6833      	ldreq	r3, [r6, #0]
 8005e46:	1aed      	subeq	r5, r5, r3
 8005e48:	68a3      	ldr	r3, [r4, #8]
 8005e4a:	bf0c      	ite	eq
 8005e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e50:	2500      	movne	r5, #0
 8005e52:	4293      	cmp	r3, r2
 8005e54:	bfc4      	itt	gt
 8005e56:	1a9b      	subgt	r3, r3, r2
 8005e58:	18ed      	addgt	r5, r5, r3
 8005e5a:	2600      	movs	r6, #0
 8005e5c:	341a      	adds	r4, #26
 8005e5e:	42b5      	cmp	r5, r6
 8005e60:	d11a      	bne.n	8005e98 <_printf_common+0xc8>
 8005e62:	2000      	movs	r0, #0
 8005e64:	e008      	b.n	8005e78 <_printf_common+0xa8>
 8005e66:	2301      	movs	r3, #1
 8005e68:	4652      	mov	r2, sl
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	47c8      	blx	r9
 8005e70:	3001      	adds	r0, #1
 8005e72:	d103      	bne.n	8005e7c <_printf_common+0xac>
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	e7c6      	b.n	8005e0e <_printf_common+0x3e>
 8005e80:	18e1      	adds	r1, r4, r3
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	2030      	movs	r0, #48	@ 0x30
 8005e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e8a:	4422      	add	r2, r4
 8005e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e94:	3302      	adds	r3, #2
 8005e96:	e7c7      	b.n	8005e28 <_printf_common+0x58>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	47c8      	blx	r9
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d0e6      	beq.n	8005e74 <_printf_common+0xa4>
 8005ea6:	3601      	adds	r6, #1
 8005ea8:	e7d9      	b.n	8005e5e <_printf_common+0x8e>
	...

08005eac <_printf_i>:
 8005eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb0:	7e0f      	ldrb	r7, [r1, #24]
 8005eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005eb4:	2f78      	cmp	r7, #120	@ 0x78
 8005eb6:	4691      	mov	r9, r2
 8005eb8:	4680      	mov	r8, r0
 8005eba:	460c      	mov	r4, r1
 8005ebc:	469a      	mov	sl, r3
 8005ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ec2:	d807      	bhi.n	8005ed4 <_printf_i+0x28>
 8005ec4:	2f62      	cmp	r7, #98	@ 0x62
 8005ec6:	d80a      	bhi.n	8005ede <_printf_i+0x32>
 8005ec8:	2f00      	cmp	r7, #0
 8005eca:	f000 80d1 	beq.w	8006070 <_printf_i+0x1c4>
 8005ece:	2f58      	cmp	r7, #88	@ 0x58
 8005ed0:	f000 80b8 	beq.w	8006044 <_printf_i+0x198>
 8005ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005edc:	e03a      	b.n	8005f54 <_printf_i+0xa8>
 8005ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ee2:	2b15      	cmp	r3, #21
 8005ee4:	d8f6      	bhi.n	8005ed4 <_printf_i+0x28>
 8005ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8005eec <_printf_i+0x40>)
 8005ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eec:	08005f45 	.word	0x08005f45
 8005ef0:	08005f59 	.word	0x08005f59
 8005ef4:	08005ed5 	.word	0x08005ed5
 8005ef8:	08005ed5 	.word	0x08005ed5
 8005efc:	08005ed5 	.word	0x08005ed5
 8005f00:	08005ed5 	.word	0x08005ed5
 8005f04:	08005f59 	.word	0x08005f59
 8005f08:	08005ed5 	.word	0x08005ed5
 8005f0c:	08005ed5 	.word	0x08005ed5
 8005f10:	08005ed5 	.word	0x08005ed5
 8005f14:	08005ed5 	.word	0x08005ed5
 8005f18:	08006057 	.word	0x08006057
 8005f1c:	08005f83 	.word	0x08005f83
 8005f20:	08006011 	.word	0x08006011
 8005f24:	08005ed5 	.word	0x08005ed5
 8005f28:	08005ed5 	.word	0x08005ed5
 8005f2c:	08006079 	.word	0x08006079
 8005f30:	08005ed5 	.word	0x08005ed5
 8005f34:	08005f83 	.word	0x08005f83
 8005f38:	08005ed5 	.word	0x08005ed5
 8005f3c:	08005ed5 	.word	0x08005ed5
 8005f40:	08006019 	.word	0x08006019
 8005f44:	6833      	ldr	r3, [r6, #0]
 8005f46:	1d1a      	adds	r2, r3, #4
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6032      	str	r2, [r6, #0]
 8005f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f54:	2301      	movs	r3, #1
 8005f56:	e09c      	b.n	8006092 <_printf_i+0x1e6>
 8005f58:	6833      	ldr	r3, [r6, #0]
 8005f5a:	6820      	ldr	r0, [r4, #0]
 8005f5c:	1d19      	adds	r1, r3, #4
 8005f5e:	6031      	str	r1, [r6, #0]
 8005f60:	0606      	lsls	r6, r0, #24
 8005f62:	d501      	bpl.n	8005f68 <_printf_i+0xbc>
 8005f64:	681d      	ldr	r5, [r3, #0]
 8005f66:	e003      	b.n	8005f70 <_printf_i+0xc4>
 8005f68:	0645      	lsls	r5, r0, #25
 8005f6a:	d5fb      	bpl.n	8005f64 <_printf_i+0xb8>
 8005f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	da03      	bge.n	8005f7c <_printf_i+0xd0>
 8005f74:	232d      	movs	r3, #45	@ 0x2d
 8005f76:	426d      	negs	r5, r5
 8005f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f7c:	4858      	ldr	r0, [pc, #352]	@ (80060e0 <_printf_i+0x234>)
 8005f7e:	230a      	movs	r3, #10
 8005f80:	e011      	b.n	8005fa6 <_printf_i+0xfa>
 8005f82:	6821      	ldr	r1, [r4, #0]
 8005f84:	6833      	ldr	r3, [r6, #0]
 8005f86:	0608      	lsls	r0, r1, #24
 8005f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f8c:	d402      	bmi.n	8005f94 <_printf_i+0xe8>
 8005f8e:	0649      	lsls	r1, r1, #25
 8005f90:	bf48      	it	mi
 8005f92:	b2ad      	uxthmi	r5, r5
 8005f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f96:	4852      	ldr	r0, [pc, #328]	@ (80060e0 <_printf_i+0x234>)
 8005f98:	6033      	str	r3, [r6, #0]
 8005f9a:	bf14      	ite	ne
 8005f9c:	230a      	movne	r3, #10
 8005f9e:	2308      	moveq	r3, #8
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fa6:	6866      	ldr	r6, [r4, #4]
 8005fa8:	60a6      	str	r6, [r4, #8]
 8005faa:	2e00      	cmp	r6, #0
 8005fac:	db05      	blt.n	8005fba <_printf_i+0x10e>
 8005fae:	6821      	ldr	r1, [r4, #0]
 8005fb0:	432e      	orrs	r6, r5
 8005fb2:	f021 0104 	bic.w	r1, r1, #4
 8005fb6:	6021      	str	r1, [r4, #0]
 8005fb8:	d04b      	beq.n	8006052 <_printf_i+0x1a6>
 8005fba:	4616      	mov	r6, r2
 8005fbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fc0:	fb03 5711 	mls	r7, r3, r1, r5
 8005fc4:	5dc7      	ldrb	r7, [r0, r7]
 8005fc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fca:	462f      	mov	r7, r5
 8005fcc:	42bb      	cmp	r3, r7
 8005fce:	460d      	mov	r5, r1
 8005fd0:	d9f4      	bls.n	8005fbc <_printf_i+0x110>
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d10b      	bne.n	8005fee <_printf_i+0x142>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	07df      	lsls	r7, r3, #31
 8005fda:	d508      	bpl.n	8005fee <_printf_i+0x142>
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	6861      	ldr	r1, [r4, #4]
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	bfde      	ittt	le
 8005fe4:	2330      	movle	r3, #48	@ 0x30
 8005fe6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fee:	1b92      	subs	r2, r2, r6
 8005ff0:	6122      	str	r2, [r4, #16]
 8005ff2:	f8cd a000 	str.w	sl, [sp]
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	aa03      	add	r2, sp, #12
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	f7ff fee7 	bl	8005dd0 <_printf_common>
 8006002:	3001      	adds	r0, #1
 8006004:	d14a      	bne.n	800609c <_printf_i+0x1f0>
 8006006:	f04f 30ff 	mov.w	r0, #4294967295
 800600a:	b004      	add	sp, #16
 800600c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	f043 0320 	orr.w	r3, r3, #32
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	4832      	ldr	r0, [pc, #200]	@ (80060e4 <_printf_i+0x238>)
 800601a:	2778      	movs	r7, #120	@ 0x78
 800601c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	6831      	ldr	r1, [r6, #0]
 8006024:	061f      	lsls	r7, r3, #24
 8006026:	f851 5b04 	ldr.w	r5, [r1], #4
 800602a:	d402      	bmi.n	8006032 <_printf_i+0x186>
 800602c:	065f      	lsls	r7, r3, #25
 800602e:	bf48      	it	mi
 8006030:	b2ad      	uxthmi	r5, r5
 8006032:	6031      	str	r1, [r6, #0]
 8006034:	07d9      	lsls	r1, r3, #31
 8006036:	bf44      	itt	mi
 8006038:	f043 0320 	orrmi.w	r3, r3, #32
 800603c:	6023      	strmi	r3, [r4, #0]
 800603e:	b11d      	cbz	r5, 8006048 <_printf_i+0x19c>
 8006040:	2310      	movs	r3, #16
 8006042:	e7ad      	b.n	8005fa0 <_printf_i+0xf4>
 8006044:	4826      	ldr	r0, [pc, #152]	@ (80060e0 <_printf_i+0x234>)
 8006046:	e7e9      	b.n	800601c <_printf_i+0x170>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	f023 0320 	bic.w	r3, r3, #32
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	e7f6      	b.n	8006040 <_printf_i+0x194>
 8006052:	4616      	mov	r6, r2
 8006054:	e7bd      	b.n	8005fd2 <_printf_i+0x126>
 8006056:	6833      	ldr	r3, [r6, #0]
 8006058:	6825      	ldr	r5, [r4, #0]
 800605a:	6961      	ldr	r1, [r4, #20]
 800605c:	1d18      	adds	r0, r3, #4
 800605e:	6030      	str	r0, [r6, #0]
 8006060:	062e      	lsls	r6, r5, #24
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	d501      	bpl.n	800606a <_printf_i+0x1be>
 8006066:	6019      	str	r1, [r3, #0]
 8006068:	e002      	b.n	8006070 <_printf_i+0x1c4>
 800606a:	0668      	lsls	r0, r5, #25
 800606c:	d5fb      	bpl.n	8006066 <_printf_i+0x1ba>
 800606e:	8019      	strh	r1, [r3, #0]
 8006070:	2300      	movs	r3, #0
 8006072:	6123      	str	r3, [r4, #16]
 8006074:	4616      	mov	r6, r2
 8006076:	e7bc      	b.n	8005ff2 <_printf_i+0x146>
 8006078:	6833      	ldr	r3, [r6, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	6032      	str	r2, [r6, #0]
 800607e:	681e      	ldr	r6, [r3, #0]
 8006080:	6862      	ldr	r2, [r4, #4]
 8006082:	2100      	movs	r1, #0
 8006084:	4630      	mov	r0, r6
 8006086:	f7fa f8cb 	bl	8000220 <memchr>
 800608a:	b108      	cbz	r0, 8006090 <_printf_i+0x1e4>
 800608c:	1b80      	subs	r0, r0, r6
 800608e:	6060      	str	r0, [r4, #4]
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	6123      	str	r3, [r4, #16]
 8006094:	2300      	movs	r3, #0
 8006096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800609a:	e7aa      	b.n	8005ff2 <_printf_i+0x146>
 800609c:	6923      	ldr	r3, [r4, #16]
 800609e:	4632      	mov	r2, r6
 80060a0:	4649      	mov	r1, r9
 80060a2:	4640      	mov	r0, r8
 80060a4:	47d0      	blx	sl
 80060a6:	3001      	adds	r0, #1
 80060a8:	d0ad      	beq.n	8006006 <_printf_i+0x15a>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	079b      	lsls	r3, r3, #30
 80060ae:	d413      	bmi.n	80060d8 <_printf_i+0x22c>
 80060b0:	68e0      	ldr	r0, [r4, #12]
 80060b2:	9b03      	ldr	r3, [sp, #12]
 80060b4:	4298      	cmp	r0, r3
 80060b6:	bfb8      	it	lt
 80060b8:	4618      	movlt	r0, r3
 80060ba:	e7a6      	b.n	800600a <_printf_i+0x15e>
 80060bc:	2301      	movs	r3, #1
 80060be:	4632      	mov	r2, r6
 80060c0:	4649      	mov	r1, r9
 80060c2:	4640      	mov	r0, r8
 80060c4:	47d0      	blx	sl
 80060c6:	3001      	adds	r0, #1
 80060c8:	d09d      	beq.n	8006006 <_printf_i+0x15a>
 80060ca:	3501      	adds	r5, #1
 80060cc:	68e3      	ldr	r3, [r4, #12]
 80060ce:	9903      	ldr	r1, [sp, #12]
 80060d0:	1a5b      	subs	r3, r3, r1
 80060d2:	42ab      	cmp	r3, r5
 80060d4:	dcf2      	bgt.n	80060bc <_printf_i+0x210>
 80060d6:	e7eb      	b.n	80060b0 <_printf_i+0x204>
 80060d8:	2500      	movs	r5, #0
 80060da:	f104 0619 	add.w	r6, r4, #25
 80060de:	e7f5      	b.n	80060cc <_printf_i+0x220>
 80060e0:	0800855a 	.word	0x0800855a
 80060e4:	0800856b 	.word	0x0800856b

080060e8 <std>:
 80060e8:	2300      	movs	r3, #0
 80060ea:	b510      	push	{r4, lr}
 80060ec:	4604      	mov	r4, r0
 80060ee:	e9c0 3300 	strd	r3, r3, [r0]
 80060f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060f6:	6083      	str	r3, [r0, #8]
 80060f8:	8181      	strh	r1, [r0, #12]
 80060fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80060fc:	81c2      	strh	r2, [r0, #14]
 80060fe:	6183      	str	r3, [r0, #24]
 8006100:	4619      	mov	r1, r3
 8006102:	2208      	movs	r2, #8
 8006104:	305c      	adds	r0, #92	@ 0x5c
 8006106:	f000 f916 	bl	8006336 <memset>
 800610a:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <std+0x58>)
 800610c:	6263      	str	r3, [r4, #36]	@ 0x24
 800610e:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <std+0x5c>)
 8006110:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006112:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <std+0x60>)
 8006114:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006116:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <std+0x64>)
 8006118:	6323      	str	r3, [r4, #48]	@ 0x30
 800611a:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <std+0x68>)
 800611c:	6224      	str	r4, [r4, #32]
 800611e:	429c      	cmp	r4, r3
 8006120:	d006      	beq.n	8006130 <std+0x48>
 8006122:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006126:	4294      	cmp	r4, r2
 8006128:	d002      	beq.n	8006130 <std+0x48>
 800612a:	33d0      	adds	r3, #208	@ 0xd0
 800612c:	429c      	cmp	r4, r3
 800612e:	d105      	bne.n	800613c <std+0x54>
 8006130:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006138:	f000 b97a 	b.w	8006430 <__retarget_lock_init_recursive>
 800613c:	bd10      	pop	{r4, pc}
 800613e:	bf00      	nop
 8006140:	080062b1 	.word	0x080062b1
 8006144:	080062d3 	.word	0x080062d3
 8006148:	0800630b 	.word	0x0800630b
 800614c:	0800632f 	.word	0x0800632f
 8006150:	20000380 	.word	0x20000380

08006154 <stdio_exit_handler>:
 8006154:	4a02      	ldr	r2, [pc, #8]	@ (8006160 <stdio_exit_handler+0xc>)
 8006156:	4903      	ldr	r1, [pc, #12]	@ (8006164 <stdio_exit_handler+0x10>)
 8006158:	4803      	ldr	r0, [pc, #12]	@ (8006168 <stdio_exit_handler+0x14>)
 800615a:	f000 b869 	b.w	8006230 <_fwalk_sglue>
 800615e:	bf00      	nop
 8006160:	2000000c 	.word	0x2000000c
 8006164:	08007d95 	.word	0x08007d95
 8006168:	2000001c 	.word	0x2000001c

0800616c <cleanup_stdio>:
 800616c:	6841      	ldr	r1, [r0, #4]
 800616e:	4b0c      	ldr	r3, [pc, #48]	@ (80061a0 <cleanup_stdio+0x34>)
 8006170:	4299      	cmp	r1, r3
 8006172:	b510      	push	{r4, lr}
 8006174:	4604      	mov	r4, r0
 8006176:	d001      	beq.n	800617c <cleanup_stdio+0x10>
 8006178:	f001 fe0c 	bl	8007d94 <_fflush_r>
 800617c:	68a1      	ldr	r1, [r4, #8]
 800617e:	4b09      	ldr	r3, [pc, #36]	@ (80061a4 <cleanup_stdio+0x38>)
 8006180:	4299      	cmp	r1, r3
 8006182:	d002      	beq.n	800618a <cleanup_stdio+0x1e>
 8006184:	4620      	mov	r0, r4
 8006186:	f001 fe05 	bl	8007d94 <_fflush_r>
 800618a:	68e1      	ldr	r1, [r4, #12]
 800618c:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <cleanup_stdio+0x3c>)
 800618e:	4299      	cmp	r1, r3
 8006190:	d004      	beq.n	800619c <cleanup_stdio+0x30>
 8006192:	4620      	mov	r0, r4
 8006194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006198:	f001 bdfc 	b.w	8007d94 <_fflush_r>
 800619c:	bd10      	pop	{r4, pc}
 800619e:	bf00      	nop
 80061a0:	20000380 	.word	0x20000380
 80061a4:	200003e8 	.word	0x200003e8
 80061a8:	20000450 	.word	0x20000450

080061ac <global_stdio_init.part.0>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	4b0b      	ldr	r3, [pc, #44]	@ (80061dc <global_stdio_init.part.0+0x30>)
 80061b0:	4c0b      	ldr	r4, [pc, #44]	@ (80061e0 <global_stdio_init.part.0+0x34>)
 80061b2:	4a0c      	ldr	r2, [pc, #48]	@ (80061e4 <global_stdio_init.part.0+0x38>)
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	4620      	mov	r0, r4
 80061b8:	2200      	movs	r2, #0
 80061ba:	2104      	movs	r1, #4
 80061bc:	f7ff ff94 	bl	80060e8 <std>
 80061c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061c4:	2201      	movs	r2, #1
 80061c6:	2109      	movs	r1, #9
 80061c8:	f7ff ff8e 	bl	80060e8 <std>
 80061cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061d0:	2202      	movs	r2, #2
 80061d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d6:	2112      	movs	r1, #18
 80061d8:	f7ff bf86 	b.w	80060e8 <std>
 80061dc:	200004b8 	.word	0x200004b8
 80061e0:	20000380 	.word	0x20000380
 80061e4:	08006155 	.word	0x08006155

080061e8 <__sfp_lock_acquire>:
 80061e8:	4801      	ldr	r0, [pc, #4]	@ (80061f0 <__sfp_lock_acquire+0x8>)
 80061ea:	f000 b922 	b.w	8006432 <__retarget_lock_acquire_recursive>
 80061ee:	bf00      	nop
 80061f0:	200004c1 	.word	0x200004c1

080061f4 <__sfp_lock_release>:
 80061f4:	4801      	ldr	r0, [pc, #4]	@ (80061fc <__sfp_lock_release+0x8>)
 80061f6:	f000 b91d 	b.w	8006434 <__retarget_lock_release_recursive>
 80061fa:	bf00      	nop
 80061fc:	200004c1 	.word	0x200004c1

08006200 <__sinit>:
 8006200:	b510      	push	{r4, lr}
 8006202:	4604      	mov	r4, r0
 8006204:	f7ff fff0 	bl	80061e8 <__sfp_lock_acquire>
 8006208:	6a23      	ldr	r3, [r4, #32]
 800620a:	b11b      	cbz	r3, 8006214 <__sinit+0x14>
 800620c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006210:	f7ff bff0 	b.w	80061f4 <__sfp_lock_release>
 8006214:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <__sinit+0x28>)
 8006216:	6223      	str	r3, [r4, #32]
 8006218:	4b04      	ldr	r3, [pc, #16]	@ (800622c <__sinit+0x2c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f5      	bne.n	800620c <__sinit+0xc>
 8006220:	f7ff ffc4 	bl	80061ac <global_stdio_init.part.0>
 8006224:	e7f2      	b.n	800620c <__sinit+0xc>
 8006226:	bf00      	nop
 8006228:	0800616d 	.word	0x0800616d
 800622c:	200004b8 	.word	0x200004b8

08006230 <_fwalk_sglue>:
 8006230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006234:	4607      	mov	r7, r0
 8006236:	4688      	mov	r8, r1
 8006238:	4614      	mov	r4, r2
 800623a:	2600      	movs	r6, #0
 800623c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006240:	f1b9 0901 	subs.w	r9, r9, #1
 8006244:	d505      	bpl.n	8006252 <_fwalk_sglue+0x22>
 8006246:	6824      	ldr	r4, [r4, #0]
 8006248:	2c00      	cmp	r4, #0
 800624a:	d1f7      	bne.n	800623c <_fwalk_sglue+0xc>
 800624c:	4630      	mov	r0, r6
 800624e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d907      	bls.n	8006268 <_fwalk_sglue+0x38>
 8006258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800625c:	3301      	adds	r3, #1
 800625e:	d003      	beq.n	8006268 <_fwalk_sglue+0x38>
 8006260:	4629      	mov	r1, r5
 8006262:	4638      	mov	r0, r7
 8006264:	47c0      	blx	r8
 8006266:	4306      	orrs	r6, r0
 8006268:	3568      	adds	r5, #104	@ 0x68
 800626a:	e7e9      	b.n	8006240 <_fwalk_sglue+0x10>

0800626c <siprintf>:
 800626c:	b40e      	push	{r1, r2, r3}
 800626e:	b510      	push	{r4, lr}
 8006270:	b09d      	sub	sp, #116	@ 0x74
 8006272:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006274:	9002      	str	r0, [sp, #8]
 8006276:	9006      	str	r0, [sp, #24]
 8006278:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800627c:	480a      	ldr	r0, [pc, #40]	@ (80062a8 <siprintf+0x3c>)
 800627e:	9107      	str	r1, [sp, #28]
 8006280:	9104      	str	r1, [sp, #16]
 8006282:	490a      	ldr	r1, [pc, #40]	@ (80062ac <siprintf+0x40>)
 8006284:	f853 2b04 	ldr.w	r2, [r3], #4
 8006288:	9105      	str	r1, [sp, #20]
 800628a:	2400      	movs	r4, #0
 800628c:	a902      	add	r1, sp, #8
 800628e:	6800      	ldr	r0, [r0, #0]
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006294:	f001 fbfe 	bl	8007a94 <_svfiprintf_r>
 8006298:	9b02      	ldr	r3, [sp, #8]
 800629a:	701c      	strb	r4, [r3, #0]
 800629c:	b01d      	add	sp, #116	@ 0x74
 800629e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a2:	b003      	add	sp, #12
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000018 	.word	0x20000018
 80062ac:	ffff0208 	.word	0xffff0208

080062b0 <__sread>:
 80062b0:	b510      	push	{r4, lr}
 80062b2:	460c      	mov	r4, r1
 80062b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b8:	f000 f86c 	bl	8006394 <_read_r>
 80062bc:	2800      	cmp	r0, #0
 80062be:	bfab      	itete	ge
 80062c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062c2:	89a3      	ldrhlt	r3, [r4, #12]
 80062c4:	181b      	addge	r3, r3, r0
 80062c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062ca:	bfac      	ite	ge
 80062cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062ce:	81a3      	strhlt	r3, [r4, #12]
 80062d0:	bd10      	pop	{r4, pc}

080062d2 <__swrite>:
 80062d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d6:	461f      	mov	r7, r3
 80062d8:	898b      	ldrh	r3, [r1, #12]
 80062da:	05db      	lsls	r3, r3, #23
 80062dc:	4605      	mov	r5, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	4616      	mov	r6, r2
 80062e2:	d505      	bpl.n	80062f0 <__swrite+0x1e>
 80062e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e8:	2302      	movs	r3, #2
 80062ea:	2200      	movs	r2, #0
 80062ec:	f000 f840 	bl	8006370 <_lseek_r>
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	4632      	mov	r2, r6
 80062fe:	463b      	mov	r3, r7
 8006300:	4628      	mov	r0, r5
 8006302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006306:	f000 b857 	b.w	80063b8 <_write_r>

0800630a <__sseek>:
 800630a:	b510      	push	{r4, lr}
 800630c:	460c      	mov	r4, r1
 800630e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006312:	f000 f82d 	bl	8006370 <_lseek_r>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	bf15      	itete	ne
 800631c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800631e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006322:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006326:	81a3      	strheq	r3, [r4, #12]
 8006328:	bf18      	it	ne
 800632a:	81a3      	strhne	r3, [r4, #12]
 800632c:	bd10      	pop	{r4, pc}

0800632e <__sclose>:
 800632e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006332:	f000 b80d 	b.w	8006350 <_close_r>

08006336 <memset>:
 8006336:	4402      	add	r2, r0
 8006338:	4603      	mov	r3, r0
 800633a:	4293      	cmp	r3, r2
 800633c:	d100      	bne.n	8006340 <memset+0xa>
 800633e:	4770      	bx	lr
 8006340:	f803 1b01 	strb.w	r1, [r3], #1
 8006344:	e7f9      	b.n	800633a <memset+0x4>
	...

08006348 <_localeconv_r>:
 8006348:	4800      	ldr	r0, [pc, #0]	@ (800634c <_localeconv_r+0x4>)
 800634a:	4770      	bx	lr
 800634c:	20000158 	.word	0x20000158

08006350 <_close_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4d06      	ldr	r5, [pc, #24]	@ (800636c <_close_r+0x1c>)
 8006354:	2300      	movs	r3, #0
 8006356:	4604      	mov	r4, r0
 8006358:	4608      	mov	r0, r1
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	f7fb f9da 	bl	8001714 <_close>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_close_r+0x1a>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_close_r+0x1a>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	200004bc 	.word	0x200004bc

08006370 <_lseek_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4d07      	ldr	r5, [pc, #28]	@ (8006390 <_lseek_r+0x20>)
 8006374:	4604      	mov	r4, r0
 8006376:	4608      	mov	r0, r1
 8006378:	4611      	mov	r1, r2
 800637a:	2200      	movs	r2, #0
 800637c:	602a      	str	r2, [r5, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	f7fb f9ef 	bl	8001762 <_lseek>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_lseek_r+0x1e>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_lseek_r+0x1e>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	200004bc 	.word	0x200004bc

08006394 <_read_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4d07      	ldr	r5, [pc, #28]	@ (80063b4 <_read_r+0x20>)
 8006398:	4604      	mov	r4, r0
 800639a:	4608      	mov	r0, r1
 800639c:	4611      	mov	r1, r2
 800639e:	2200      	movs	r2, #0
 80063a0:	602a      	str	r2, [r5, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7fb f97d 	bl	80016a2 <_read>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_read_r+0x1e>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_read_r+0x1e>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	200004bc 	.word	0x200004bc

080063b8 <_write_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	@ (80063d8 <_write_r+0x20>)
 80063bc:	4604      	mov	r4, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fb f988 	bl	80016dc <_write>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_write_r+0x1e>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_write_r+0x1e>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	200004bc 	.word	0x200004bc

080063dc <__errno>:
 80063dc:	4b01      	ldr	r3, [pc, #4]	@ (80063e4 <__errno+0x8>)
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	20000018 	.word	0x20000018

080063e8 <__libc_init_array>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006420 <__libc_init_array+0x38>)
 80063ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006424 <__libc_init_array+0x3c>)
 80063ee:	1b64      	subs	r4, r4, r5
 80063f0:	10a4      	asrs	r4, r4, #2
 80063f2:	2600      	movs	r6, #0
 80063f4:	42a6      	cmp	r6, r4
 80063f6:	d109      	bne.n	800640c <__libc_init_array+0x24>
 80063f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006428 <__libc_init_array+0x40>)
 80063fa:	4c0c      	ldr	r4, [pc, #48]	@ (800642c <__libc_init_array+0x44>)
 80063fc:	f002 f868 	bl	80084d0 <_init>
 8006400:	1b64      	subs	r4, r4, r5
 8006402:	10a4      	asrs	r4, r4, #2
 8006404:	2600      	movs	r6, #0
 8006406:	42a6      	cmp	r6, r4
 8006408:	d105      	bne.n	8006416 <__libc_init_array+0x2e>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006410:	4798      	blx	r3
 8006412:	3601      	adds	r6, #1
 8006414:	e7ee      	b.n	80063f4 <__libc_init_array+0xc>
 8006416:	f855 3b04 	ldr.w	r3, [r5], #4
 800641a:	4798      	blx	r3
 800641c:	3601      	adds	r6, #1
 800641e:	e7f2      	b.n	8006406 <__libc_init_array+0x1e>
 8006420:	080088c4 	.word	0x080088c4
 8006424:	080088c4 	.word	0x080088c4
 8006428:	080088c4 	.word	0x080088c4
 800642c:	080088c8 	.word	0x080088c8

08006430 <__retarget_lock_init_recursive>:
 8006430:	4770      	bx	lr

08006432 <__retarget_lock_acquire_recursive>:
 8006432:	4770      	bx	lr

08006434 <__retarget_lock_release_recursive>:
 8006434:	4770      	bx	lr

08006436 <quorem>:
 8006436:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	6903      	ldr	r3, [r0, #16]
 800643c:	690c      	ldr	r4, [r1, #16]
 800643e:	42a3      	cmp	r3, r4
 8006440:	4607      	mov	r7, r0
 8006442:	db7e      	blt.n	8006542 <quorem+0x10c>
 8006444:	3c01      	subs	r4, #1
 8006446:	f101 0814 	add.w	r8, r1, #20
 800644a:	00a3      	lsls	r3, r4, #2
 800644c:	f100 0514 	add.w	r5, r0, #20
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800645c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006460:	3301      	adds	r3, #1
 8006462:	429a      	cmp	r2, r3
 8006464:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006468:	fbb2 f6f3 	udiv	r6, r2, r3
 800646c:	d32e      	bcc.n	80064cc <quorem+0x96>
 800646e:	f04f 0a00 	mov.w	sl, #0
 8006472:	46c4      	mov	ip, r8
 8006474:	46ae      	mov	lr, r5
 8006476:	46d3      	mov	fp, sl
 8006478:	f85c 3b04 	ldr.w	r3, [ip], #4
 800647c:	b298      	uxth	r0, r3
 800647e:	fb06 a000 	mla	r0, r6, r0, sl
 8006482:	0c02      	lsrs	r2, r0, #16
 8006484:	0c1b      	lsrs	r3, r3, #16
 8006486:	fb06 2303 	mla	r3, r6, r3, r2
 800648a:	f8de 2000 	ldr.w	r2, [lr]
 800648e:	b280      	uxth	r0, r0
 8006490:	b292      	uxth	r2, r2
 8006492:	1a12      	subs	r2, r2, r0
 8006494:	445a      	add	r2, fp
 8006496:	f8de 0000 	ldr.w	r0, [lr]
 800649a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800649e:	b29b      	uxth	r3, r3
 80064a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80064a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80064a8:	b292      	uxth	r2, r2
 80064aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064ae:	45e1      	cmp	r9, ip
 80064b0:	f84e 2b04 	str.w	r2, [lr], #4
 80064b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80064b8:	d2de      	bcs.n	8006478 <quorem+0x42>
 80064ba:	9b00      	ldr	r3, [sp, #0]
 80064bc:	58eb      	ldr	r3, [r5, r3]
 80064be:	b92b      	cbnz	r3, 80064cc <quorem+0x96>
 80064c0:	9b01      	ldr	r3, [sp, #4]
 80064c2:	3b04      	subs	r3, #4
 80064c4:	429d      	cmp	r5, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	d32f      	bcc.n	800652a <quorem+0xf4>
 80064ca:	613c      	str	r4, [r7, #16]
 80064cc:	4638      	mov	r0, r7
 80064ce:	f001 f97d 	bl	80077cc <__mcmp>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	db25      	blt.n	8006522 <quorem+0xec>
 80064d6:	4629      	mov	r1, r5
 80064d8:	2000      	movs	r0, #0
 80064da:	f858 2b04 	ldr.w	r2, [r8], #4
 80064de:	f8d1 c000 	ldr.w	ip, [r1]
 80064e2:	fa1f fe82 	uxth.w	lr, r2
 80064e6:	fa1f f38c 	uxth.w	r3, ip
 80064ea:	eba3 030e 	sub.w	r3, r3, lr
 80064ee:	4403      	add	r3, r0
 80064f0:	0c12      	lsrs	r2, r2, #16
 80064f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006500:	45c1      	cmp	r9, r8
 8006502:	f841 3b04 	str.w	r3, [r1], #4
 8006506:	ea4f 4022 	mov.w	r0, r2, asr #16
 800650a:	d2e6      	bcs.n	80064da <quorem+0xa4>
 800650c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006510:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006514:	b922      	cbnz	r2, 8006520 <quorem+0xea>
 8006516:	3b04      	subs	r3, #4
 8006518:	429d      	cmp	r5, r3
 800651a:	461a      	mov	r2, r3
 800651c:	d30b      	bcc.n	8006536 <quorem+0x100>
 800651e:	613c      	str	r4, [r7, #16]
 8006520:	3601      	adds	r6, #1
 8006522:	4630      	mov	r0, r6
 8006524:	b003      	add	sp, #12
 8006526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	3b04      	subs	r3, #4
 800652e:	2a00      	cmp	r2, #0
 8006530:	d1cb      	bne.n	80064ca <quorem+0x94>
 8006532:	3c01      	subs	r4, #1
 8006534:	e7c6      	b.n	80064c4 <quorem+0x8e>
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	3b04      	subs	r3, #4
 800653a:	2a00      	cmp	r2, #0
 800653c:	d1ef      	bne.n	800651e <quorem+0xe8>
 800653e:	3c01      	subs	r4, #1
 8006540:	e7ea      	b.n	8006518 <quorem+0xe2>
 8006542:	2000      	movs	r0, #0
 8006544:	e7ee      	b.n	8006524 <quorem+0xee>
	...

08006548 <_dtoa_r>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	69c7      	ldr	r7, [r0, #28]
 800654e:	b097      	sub	sp, #92	@ 0x5c
 8006550:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006554:	ec55 4b10 	vmov	r4, r5, d0
 8006558:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800655a:	9107      	str	r1, [sp, #28]
 800655c:	4681      	mov	r9, r0
 800655e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006560:	9311      	str	r3, [sp, #68]	@ 0x44
 8006562:	b97f      	cbnz	r7, 8006584 <_dtoa_r+0x3c>
 8006564:	2010      	movs	r0, #16
 8006566:	f000 fe09 	bl	800717c <malloc>
 800656a:	4602      	mov	r2, r0
 800656c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006570:	b920      	cbnz	r0, 800657c <_dtoa_r+0x34>
 8006572:	4ba9      	ldr	r3, [pc, #676]	@ (8006818 <_dtoa_r+0x2d0>)
 8006574:	21ef      	movs	r1, #239	@ 0xef
 8006576:	48a9      	ldr	r0, [pc, #676]	@ (800681c <_dtoa_r+0x2d4>)
 8006578:	f001 fc6c 	bl	8007e54 <__assert_func>
 800657c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006580:	6007      	str	r7, [r0, #0]
 8006582:	60c7      	str	r7, [r0, #12]
 8006584:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006588:	6819      	ldr	r1, [r3, #0]
 800658a:	b159      	cbz	r1, 80065a4 <_dtoa_r+0x5c>
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	604a      	str	r2, [r1, #4]
 8006590:	2301      	movs	r3, #1
 8006592:	4093      	lsls	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
 8006596:	4648      	mov	r0, r9
 8006598:	f000 fee6 	bl	8007368 <_Bfree>
 800659c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	1e2b      	subs	r3, r5, #0
 80065a6:	bfb9      	ittee	lt
 80065a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80065ac:	9305      	strlt	r3, [sp, #20]
 80065ae:	2300      	movge	r3, #0
 80065b0:	6033      	strge	r3, [r6, #0]
 80065b2:	9f05      	ldr	r7, [sp, #20]
 80065b4:	4b9a      	ldr	r3, [pc, #616]	@ (8006820 <_dtoa_r+0x2d8>)
 80065b6:	bfbc      	itt	lt
 80065b8:	2201      	movlt	r2, #1
 80065ba:	6032      	strlt	r2, [r6, #0]
 80065bc:	43bb      	bics	r3, r7
 80065be:	d112      	bne.n	80065e6 <_dtoa_r+0x9e>
 80065c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80065c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065cc:	4323      	orrs	r3, r4
 80065ce:	f000 855a 	beq.w	8007086 <_dtoa_r+0xb3e>
 80065d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006834 <_dtoa_r+0x2ec>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 855c 	beq.w	8007096 <_dtoa_r+0xb4e>
 80065de:	f10a 0303 	add.w	r3, sl, #3
 80065e2:	f000 bd56 	b.w	8007092 <_dtoa_r+0xb4a>
 80065e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80065ea:	2200      	movs	r2, #0
 80065ec:	ec51 0b17 	vmov	r0, r1, d7
 80065f0:	2300      	movs	r3, #0
 80065f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80065f6:	f7fa fa8f 	bl	8000b18 <__aeabi_dcmpeq>
 80065fa:	4680      	mov	r8, r0
 80065fc:	b158      	cbz	r0, 8006616 <_dtoa_r+0xce>
 80065fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006600:	2301      	movs	r3, #1
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006606:	b113      	cbz	r3, 800660e <_dtoa_r+0xc6>
 8006608:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800660a:	4b86      	ldr	r3, [pc, #536]	@ (8006824 <_dtoa_r+0x2dc>)
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006838 <_dtoa_r+0x2f0>
 8006612:	f000 bd40 	b.w	8007096 <_dtoa_r+0xb4e>
 8006616:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800661a:	aa14      	add	r2, sp, #80	@ 0x50
 800661c:	a915      	add	r1, sp, #84	@ 0x54
 800661e:	4648      	mov	r0, r9
 8006620:	f001 f984 	bl	800792c <__d2b>
 8006624:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006628:	9002      	str	r0, [sp, #8]
 800662a:	2e00      	cmp	r6, #0
 800662c:	d078      	beq.n	8006720 <_dtoa_r+0x1d8>
 800662e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006630:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006638:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800663c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006640:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006644:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006648:	4619      	mov	r1, r3
 800664a:	2200      	movs	r2, #0
 800664c:	4b76      	ldr	r3, [pc, #472]	@ (8006828 <_dtoa_r+0x2e0>)
 800664e:	f7f9 fe43 	bl	80002d8 <__aeabi_dsub>
 8006652:	a36b      	add	r3, pc, #428	@ (adr r3, 8006800 <_dtoa_r+0x2b8>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f7f9 fff6 	bl	8000648 <__aeabi_dmul>
 800665c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006808 <_dtoa_r+0x2c0>)
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f7f9 fe3b 	bl	80002dc <__adddf3>
 8006666:	4604      	mov	r4, r0
 8006668:	4630      	mov	r0, r6
 800666a:	460d      	mov	r5, r1
 800666c:	f7f9 ff82 	bl	8000574 <__aeabi_i2d>
 8006670:	a367      	add	r3, pc, #412	@ (adr r3, 8006810 <_dtoa_r+0x2c8>)
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	f7f9 ffe7 	bl	8000648 <__aeabi_dmul>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4620      	mov	r0, r4
 8006680:	4629      	mov	r1, r5
 8006682:	f7f9 fe2b 	bl	80002dc <__adddf3>
 8006686:	4604      	mov	r4, r0
 8006688:	460d      	mov	r5, r1
 800668a:	f7fa fa8d 	bl	8000ba8 <__aeabi_d2iz>
 800668e:	2200      	movs	r2, #0
 8006690:	4607      	mov	r7, r0
 8006692:	2300      	movs	r3, #0
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f7fa fa48 	bl	8000b2c <__aeabi_dcmplt>
 800669c:	b140      	cbz	r0, 80066b0 <_dtoa_r+0x168>
 800669e:	4638      	mov	r0, r7
 80066a0:	f7f9 ff68 	bl	8000574 <__aeabi_i2d>
 80066a4:	4622      	mov	r2, r4
 80066a6:	462b      	mov	r3, r5
 80066a8:	f7fa fa36 	bl	8000b18 <__aeabi_dcmpeq>
 80066ac:	b900      	cbnz	r0, 80066b0 <_dtoa_r+0x168>
 80066ae:	3f01      	subs	r7, #1
 80066b0:	2f16      	cmp	r7, #22
 80066b2:	d852      	bhi.n	800675a <_dtoa_r+0x212>
 80066b4:	4b5d      	ldr	r3, [pc, #372]	@ (800682c <_dtoa_r+0x2e4>)
 80066b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066c2:	f7fa fa33 	bl	8000b2c <__aeabi_dcmplt>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d049      	beq.n	800675e <_dtoa_r+0x216>
 80066ca:	3f01      	subs	r7, #1
 80066cc:	2300      	movs	r3, #0
 80066ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80066d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066d2:	1b9b      	subs	r3, r3, r6
 80066d4:	1e5a      	subs	r2, r3, #1
 80066d6:	bf45      	ittet	mi
 80066d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80066dc:	9300      	strmi	r3, [sp, #0]
 80066de:	2300      	movpl	r3, #0
 80066e0:	2300      	movmi	r3, #0
 80066e2:	9206      	str	r2, [sp, #24]
 80066e4:	bf54      	ite	pl
 80066e6:	9300      	strpl	r3, [sp, #0]
 80066e8:	9306      	strmi	r3, [sp, #24]
 80066ea:	2f00      	cmp	r7, #0
 80066ec:	db39      	blt.n	8006762 <_dtoa_r+0x21a>
 80066ee:	9b06      	ldr	r3, [sp, #24]
 80066f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80066f2:	443b      	add	r3, r7
 80066f4:	9306      	str	r3, [sp, #24]
 80066f6:	2300      	movs	r3, #0
 80066f8:	9308      	str	r3, [sp, #32]
 80066fa:	9b07      	ldr	r3, [sp, #28]
 80066fc:	2b09      	cmp	r3, #9
 80066fe:	d863      	bhi.n	80067c8 <_dtoa_r+0x280>
 8006700:	2b05      	cmp	r3, #5
 8006702:	bfc4      	itt	gt
 8006704:	3b04      	subgt	r3, #4
 8006706:	9307      	strgt	r3, [sp, #28]
 8006708:	9b07      	ldr	r3, [sp, #28]
 800670a:	f1a3 0302 	sub.w	r3, r3, #2
 800670e:	bfcc      	ite	gt
 8006710:	2400      	movgt	r4, #0
 8006712:	2401      	movle	r4, #1
 8006714:	2b03      	cmp	r3, #3
 8006716:	d863      	bhi.n	80067e0 <_dtoa_r+0x298>
 8006718:	e8df f003 	tbb	[pc, r3]
 800671c:	2b375452 	.word	0x2b375452
 8006720:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006724:	441e      	add	r6, r3
 8006726:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800672a:	2b20      	cmp	r3, #32
 800672c:	bfc1      	itttt	gt
 800672e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006732:	409f      	lslgt	r7, r3
 8006734:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006738:	fa24 f303 	lsrgt.w	r3, r4, r3
 800673c:	bfd6      	itet	le
 800673e:	f1c3 0320 	rsble	r3, r3, #32
 8006742:	ea47 0003 	orrgt.w	r0, r7, r3
 8006746:	fa04 f003 	lslle.w	r0, r4, r3
 800674a:	f7f9 ff03 	bl	8000554 <__aeabi_ui2d>
 800674e:	2201      	movs	r2, #1
 8006750:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006754:	3e01      	subs	r6, #1
 8006756:	9212      	str	r2, [sp, #72]	@ 0x48
 8006758:	e776      	b.n	8006648 <_dtoa_r+0x100>
 800675a:	2301      	movs	r3, #1
 800675c:	e7b7      	b.n	80066ce <_dtoa_r+0x186>
 800675e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006760:	e7b6      	b.n	80066d0 <_dtoa_r+0x188>
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	1bdb      	subs	r3, r3, r7
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	427b      	negs	r3, r7
 800676a:	9308      	str	r3, [sp, #32]
 800676c:	2300      	movs	r3, #0
 800676e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006770:	e7c3      	b.n	80066fa <_dtoa_r+0x1b2>
 8006772:	2301      	movs	r3, #1
 8006774:	9309      	str	r3, [sp, #36]	@ 0x24
 8006776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006778:	eb07 0b03 	add.w	fp, r7, r3
 800677c:	f10b 0301 	add.w	r3, fp, #1
 8006780:	2b01      	cmp	r3, #1
 8006782:	9303      	str	r3, [sp, #12]
 8006784:	bfb8      	it	lt
 8006786:	2301      	movlt	r3, #1
 8006788:	e006      	b.n	8006798 <_dtoa_r+0x250>
 800678a:	2301      	movs	r3, #1
 800678c:	9309      	str	r3, [sp, #36]	@ 0x24
 800678e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006790:	2b00      	cmp	r3, #0
 8006792:	dd28      	ble.n	80067e6 <_dtoa_r+0x29e>
 8006794:	469b      	mov	fp, r3
 8006796:	9303      	str	r3, [sp, #12]
 8006798:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800679c:	2100      	movs	r1, #0
 800679e:	2204      	movs	r2, #4
 80067a0:	f102 0514 	add.w	r5, r2, #20
 80067a4:	429d      	cmp	r5, r3
 80067a6:	d926      	bls.n	80067f6 <_dtoa_r+0x2ae>
 80067a8:	6041      	str	r1, [r0, #4]
 80067aa:	4648      	mov	r0, r9
 80067ac:	f000 fd9c 	bl	80072e8 <_Balloc>
 80067b0:	4682      	mov	sl, r0
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d142      	bne.n	800683c <_dtoa_r+0x2f4>
 80067b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006830 <_dtoa_r+0x2e8>)
 80067b8:	4602      	mov	r2, r0
 80067ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80067be:	e6da      	b.n	8006576 <_dtoa_r+0x2e>
 80067c0:	2300      	movs	r3, #0
 80067c2:	e7e3      	b.n	800678c <_dtoa_r+0x244>
 80067c4:	2300      	movs	r3, #0
 80067c6:	e7d5      	b.n	8006774 <_dtoa_r+0x22c>
 80067c8:	2401      	movs	r4, #1
 80067ca:	2300      	movs	r3, #0
 80067cc:	9307      	str	r3, [sp, #28]
 80067ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80067d0:	f04f 3bff 	mov.w	fp, #4294967295
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80067da:	2312      	movs	r3, #18
 80067dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80067de:	e7db      	b.n	8006798 <_dtoa_r+0x250>
 80067e0:	2301      	movs	r3, #1
 80067e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067e4:	e7f4      	b.n	80067d0 <_dtoa_r+0x288>
 80067e6:	f04f 0b01 	mov.w	fp, #1
 80067ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80067ee:	465b      	mov	r3, fp
 80067f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80067f4:	e7d0      	b.n	8006798 <_dtoa_r+0x250>
 80067f6:	3101      	adds	r1, #1
 80067f8:	0052      	lsls	r2, r2, #1
 80067fa:	e7d1      	b.n	80067a0 <_dtoa_r+0x258>
 80067fc:	f3af 8000 	nop.w
 8006800:	636f4361 	.word	0x636f4361
 8006804:	3fd287a7 	.word	0x3fd287a7
 8006808:	8b60c8b3 	.word	0x8b60c8b3
 800680c:	3fc68a28 	.word	0x3fc68a28
 8006810:	509f79fb 	.word	0x509f79fb
 8006814:	3fd34413 	.word	0x3fd34413
 8006818:	08008589 	.word	0x08008589
 800681c:	080085a0 	.word	0x080085a0
 8006820:	7ff00000 	.word	0x7ff00000
 8006824:	08008559 	.word	0x08008559
 8006828:	3ff80000 	.word	0x3ff80000
 800682c:	080086f0 	.word	0x080086f0
 8006830:	080085f8 	.word	0x080085f8
 8006834:	08008585 	.word	0x08008585
 8006838:	08008558 	.word	0x08008558
 800683c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006840:	6018      	str	r0, [r3, #0]
 8006842:	9b03      	ldr	r3, [sp, #12]
 8006844:	2b0e      	cmp	r3, #14
 8006846:	f200 80a1 	bhi.w	800698c <_dtoa_r+0x444>
 800684a:	2c00      	cmp	r4, #0
 800684c:	f000 809e 	beq.w	800698c <_dtoa_r+0x444>
 8006850:	2f00      	cmp	r7, #0
 8006852:	dd33      	ble.n	80068bc <_dtoa_r+0x374>
 8006854:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac8 <_dtoa_r+0x580>)
 8006856:	f007 020f 	and.w	r2, r7, #15
 800685a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800685e:	ed93 7b00 	vldr	d7, [r3]
 8006862:	05f8      	lsls	r0, r7, #23
 8006864:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006868:	ea4f 1427 	mov.w	r4, r7, asr #4
 800686c:	d516      	bpl.n	800689c <_dtoa_r+0x354>
 800686e:	4b97      	ldr	r3, [pc, #604]	@ (8006acc <_dtoa_r+0x584>)
 8006870:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006878:	f7fa f810 	bl	800089c <__aeabi_ddiv>
 800687c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006880:	f004 040f 	and.w	r4, r4, #15
 8006884:	2603      	movs	r6, #3
 8006886:	4d91      	ldr	r5, [pc, #580]	@ (8006acc <_dtoa_r+0x584>)
 8006888:	b954      	cbnz	r4, 80068a0 <_dtoa_r+0x358>
 800688a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800688e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006892:	f7fa f803 	bl	800089c <__aeabi_ddiv>
 8006896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800689a:	e028      	b.n	80068ee <_dtoa_r+0x3a6>
 800689c:	2602      	movs	r6, #2
 800689e:	e7f2      	b.n	8006886 <_dtoa_r+0x33e>
 80068a0:	07e1      	lsls	r1, r4, #31
 80068a2:	d508      	bpl.n	80068b6 <_dtoa_r+0x36e>
 80068a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80068a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068ac:	f7f9 fecc 	bl	8000648 <__aeabi_dmul>
 80068b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068b4:	3601      	adds	r6, #1
 80068b6:	1064      	asrs	r4, r4, #1
 80068b8:	3508      	adds	r5, #8
 80068ba:	e7e5      	b.n	8006888 <_dtoa_r+0x340>
 80068bc:	f000 80af 	beq.w	8006a1e <_dtoa_r+0x4d6>
 80068c0:	427c      	negs	r4, r7
 80068c2:	4b81      	ldr	r3, [pc, #516]	@ (8006ac8 <_dtoa_r+0x580>)
 80068c4:	4d81      	ldr	r5, [pc, #516]	@ (8006acc <_dtoa_r+0x584>)
 80068c6:	f004 020f 	and.w	r2, r4, #15
 80068ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068d6:	f7f9 feb7 	bl	8000648 <__aeabi_dmul>
 80068da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068de:	1124      	asrs	r4, r4, #4
 80068e0:	2300      	movs	r3, #0
 80068e2:	2602      	movs	r6, #2
 80068e4:	2c00      	cmp	r4, #0
 80068e6:	f040 808f 	bne.w	8006a08 <_dtoa_r+0x4c0>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1d3      	bne.n	8006896 <_dtoa_r+0x34e>
 80068ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80068f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8094 	beq.w	8006a22 <_dtoa_r+0x4da>
 80068fa:	4b75      	ldr	r3, [pc, #468]	@ (8006ad0 <_dtoa_r+0x588>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	4620      	mov	r0, r4
 8006900:	4629      	mov	r1, r5
 8006902:	f7fa f913 	bl	8000b2c <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	f000 808b 	beq.w	8006a22 <_dtoa_r+0x4da>
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 8087 	beq.w	8006a22 <_dtoa_r+0x4da>
 8006914:	f1bb 0f00 	cmp.w	fp, #0
 8006918:	dd34      	ble.n	8006984 <_dtoa_r+0x43c>
 800691a:	4620      	mov	r0, r4
 800691c:	4b6d      	ldr	r3, [pc, #436]	@ (8006ad4 <_dtoa_r+0x58c>)
 800691e:	2200      	movs	r2, #0
 8006920:	4629      	mov	r1, r5
 8006922:	f7f9 fe91 	bl	8000648 <__aeabi_dmul>
 8006926:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800692a:	f107 38ff 	add.w	r8, r7, #4294967295
 800692e:	3601      	adds	r6, #1
 8006930:	465c      	mov	r4, fp
 8006932:	4630      	mov	r0, r6
 8006934:	f7f9 fe1e 	bl	8000574 <__aeabi_i2d>
 8006938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800693c:	f7f9 fe84 	bl	8000648 <__aeabi_dmul>
 8006940:	4b65      	ldr	r3, [pc, #404]	@ (8006ad8 <_dtoa_r+0x590>)
 8006942:	2200      	movs	r2, #0
 8006944:	f7f9 fcca 	bl	80002dc <__adddf3>
 8006948:	4605      	mov	r5, r0
 800694a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800694e:	2c00      	cmp	r4, #0
 8006950:	d16a      	bne.n	8006a28 <_dtoa_r+0x4e0>
 8006952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006956:	4b61      	ldr	r3, [pc, #388]	@ (8006adc <_dtoa_r+0x594>)
 8006958:	2200      	movs	r2, #0
 800695a:	f7f9 fcbd 	bl	80002d8 <__aeabi_dsub>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006966:	462a      	mov	r2, r5
 8006968:	4633      	mov	r3, r6
 800696a:	f7fa f8fd 	bl	8000b68 <__aeabi_dcmpgt>
 800696e:	2800      	cmp	r0, #0
 8006970:	f040 8298 	bne.w	8006ea4 <_dtoa_r+0x95c>
 8006974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006978:	462a      	mov	r2, r5
 800697a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800697e:	f7fa f8d5 	bl	8000b2c <__aeabi_dcmplt>
 8006982:	bb38      	cbnz	r0, 80069d4 <_dtoa_r+0x48c>
 8006984:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006988:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800698c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800698e:	2b00      	cmp	r3, #0
 8006990:	f2c0 8157 	blt.w	8006c42 <_dtoa_r+0x6fa>
 8006994:	2f0e      	cmp	r7, #14
 8006996:	f300 8154 	bgt.w	8006c42 <_dtoa_r+0x6fa>
 800699a:	4b4b      	ldr	r3, [pc, #300]	@ (8006ac8 <_dtoa_r+0x580>)
 800699c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069a0:	ed93 7b00 	vldr	d7, [r3]
 80069a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	ed8d 7b00 	vstr	d7, [sp]
 80069ac:	f280 80e5 	bge.w	8006b7a <_dtoa_r+0x632>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f300 80e1 	bgt.w	8006b7a <_dtoa_r+0x632>
 80069b8:	d10c      	bne.n	80069d4 <_dtoa_r+0x48c>
 80069ba:	4b48      	ldr	r3, [pc, #288]	@ (8006adc <_dtoa_r+0x594>)
 80069bc:	2200      	movs	r2, #0
 80069be:	ec51 0b17 	vmov	r0, r1, d7
 80069c2:	f7f9 fe41 	bl	8000648 <__aeabi_dmul>
 80069c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ca:	f7fa f8c3 	bl	8000b54 <__aeabi_dcmpge>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f000 8266 	beq.w	8006ea0 <_dtoa_r+0x958>
 80069d4:	2400      	movs	r4, #0
 80069d6:	4625      	mov	r5, r4
 80069d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069da:	4656      	mov	r6, sl
 80069dc:	ea6f 0803 	mvn.w	r8, r3
 80069e0:	2700      	movs	r7, #0
 80069e2:	4621      	mov	r1, r4
 80069e4:	4648      	mov	r0, r9
 80069e6:	f000 fcbf 	bl	8007368 <_Bfree>
 80069ea:	2d00      	cmp	r5, #0
 80069ec:	f000 80bd 	beq.w	8006b6a <_dtoa_r+0x622>
 80069f0:	b12f      	cbz	r7, 80069fe <_dtoa_r+0x4b6>
 80069f2:	42af      	cmp	r7, r5
 80069f4:	d003      	beq.n	80069fe <_dtoa_r+0x4b6>
 80069f6:	4639      	mov	r1, r7
 80069f8:	4648      	mov	r0, r9
 80069fa:	f000 fcb5 	bl	8007368 <_Bfree>
 80069fe:	4629      	mov	r1, r5
 8006a00:	4648      	mov	r0, r9
 8006a02:	f000 fcb1 	bl	8007368 <_Bfree>
 8006a06:	e0b0      	b.n	8006b6a <_dtoa_r+0x622>
 8006a08:	07e2      	lsls	r2, r4, #31
 8006a0a:	d505      	bpl.n	8006a18 <_dtoa_r+0x4d0>
 8006a0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a10:	f7f9 fe1a 	bl	8000648 <__aeabi_dmul>
 8006a14:	3601      	adds	r6, #1
 8006a16:	2301      	movs	r3, #1
 8006a18:	1064      	asrs	r4, r4, #1
 8006a1a:	3508      	adds	r5, #8
 8006a1c:	e762      	b.n	80068e4 <_dtoa_r+0x39c>
 8006a1e:	2602      	movs	r6, #2
 8006a20:	e765      	b.n	80068ee <_dtoa_r+0x3a6>
 8006a22:	9c03      	ldr	r4, [sp, #12]
 8006a24:	46b8      	mov	r8, r7
 8006a26:	e784      	b.n	8006932 <_dtoa_r+0x3ea>
 8006a28:	4b27      	ldr	r3, [pc, #156]	@ (8006ac8 <_dtoa_r+0x580>)
 8006a2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a34:	4454      	add	r4, sl
 8006a36:	2900      	cmp	r1, #0
 8006a38:	d054      	beq.n	8006ae4 <_dtoa_r+0x59c>
 8006a3a:	4929      	ldr	r1, [pc, #164]	@ (8006ae0 <_dtoa_r+0x598>)
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	f7f9 ff2d 	bl	800089c <__aeabi_ddiv>
 8006a42:	4633      	mov	r3, r6
 8006a44:	462a      	mov	r2, r5
 8006a46:	f7f9 fc47 	bl	80002d8 <__aeabi_dsub>
 8006a4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a4e:	4656      	mov	r6, sl
 8006a50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a54:	f7fa f8a8 	bl	8000ba8 <__aeabi_d2iz>
 8006a58:	4605      	mov	r5, r0
 8006a5a:	f7f9 fd8b 	bl	8000574 <__aeabi_i2d>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a66:	f7f9 fc37 	bl	80002d8 <__aeabi_dsub>
 8006a6a:	3530      	adds	r5, #48	@ 0x30
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a74:	f806 5b01 	strb.w	r5, [r6], #1
 8006a78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a7c:	f7fa f856 	bl	8000b2c <__aeabi_dcmplt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d172      	bne.n	8006b6a <_dtoa_r+0x622>
 8006a84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a88:	4911      	ldr	r1, [pc, #68]	@ (8006ad0 <_dtoa_r+0x588>)
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f7f9 fc24 	bl	80002d8 <__aeabi_dsub>
 8006a90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a94:	f7fa f84a 	bl	8000b2c <__aeabi_dcmplt>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	f040 80b4 	bne.w	8006c06 <_dtoa_r+0x6be>
 8006a9e:	42a6      	cmp	r6, r4
 8006aa0:	f43f af70 	beq.w	8006984 <_dtoa_r+0x43c>
 8006aa4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad4 <_dtoa_r+0x58c>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f7f9 fdcc 	bl	8000648 <__aeabi_dmul>
 8006ab0:	4b08      	ldr	r3, [pc, #32]	@ (8006ad4 <_dtoa_r+0x58c>)
 8006ab2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006abc:	f7f9 fdc4 	bl	8000648 <__aeabi_dmul>
 8006ac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ac4:	e7c4      	b.n	8006a50 <_dtoa_r+0x508>
 8006ac6:	bf00      	nop
 8006ac8:	080086f0 	.word	0x080086f0
 8006acc:	080086c8 	.word	0x080086c8
 8006ad0:	3ff00000 	.word	0x3ff00000
 8006ad4:	40240000 	.word	0x40240000
 8006ad8:	401c0000 	.word	0x401c0000
 8006adc:	40140000 	.word	0x40140000
 8006ae0:	3fe00000 	.word	0x3fe00000
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f7f9 fdae 	bl	8000648 <__aeabi_dmul>
 8006aec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006af0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006af2:	4656      	mov	r6, sl
 8006af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006af8:	f7fa f856 	bl	8000ba8 <__aeabi_d2iz>
 8006afc:	4605      	mov	r5, r0
 8006afe:	f7f9 fd39 	bl	8000574 <__aeabi_i2d>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b0a:	f7f9 fbe5 	bl	80002d8 <__aeabi_dsub>
 8006b0e:	3530      	adds	r5, #48	@ 0x30
 8006b10:	f806 5b01 	strb.w	r5, [r6], #1
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	42a6      	cmp	r6, r4
 8006b1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	d124      	bne.n	8006b6e <_dtoa_r+0x626>
 8006b24:	4baf      	ldr	r3, [pc, #700]	@ (8006de4 <_dtoa_r+0x89c>)
 8006b26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b2a:	f7f9 fbd7 	bl	80002dc <__adddf3>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b36:	f7fa f817 	bl	8000b68 <__aeabi_dcmpgt>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d163      	bne.n	8006c06 <_dtoa_r+0x6be>
 8006b3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b42:	49a8      	ldr	r1, [pc, #672]	@ (8006de4 <_dtoa_r+0x89c>)
 8006b44:	2000      	movs	r0, #0
 8006b46:	f7f9 fbc7 	bl	80002d8 <__aeabi_dsub>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b52:	f7f9 ffeb 	bl	8000b2c <__aeabi_dcmplt>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	f43f af14 	beq.w	8006984 <_dtoa_r+0x43c>
 8006b5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b5e:	1e73      	subs	r3, r6, #1
 8006b60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b66:	2b30      	cmp	r3, #48	@ 0x30
 8006b68:	d0f8      	beq.n	8006b5c <_dtoa_r+0x614>
 8006b6a:	4647      	mov	r7, r8
 8006b6c:	e03b      	b.n	8006be6 <_dtoa_r+0x69e>
 8006b6e:	4b9e      	ldr	r3, [pc, #632]	@ (8006de8 <_dtoa_r+0x8a0>)
 8006b70:	f7f9 fd6a 	bl	8000648 <__aeabi_dmul>
 8006b74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b78:	e7bc      	b.n	8006af4 <_dtoa_r+0x5ac>
 8006b7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006b7e:	4656      	mov	r6, sl
 8006b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b84:	4620      	mov	r0, r4
 8006b86:	4629      	mov	r1, r5
 8006b88:	f7f9 fe88 	bl	800089c <__aeabi_ddiv>
 8006b8c:	f7fa f80c 	bl	8000ba8 <__aeabi_d2iz>
 8006b90:	4680      	mov	r8, r0
 8006b92:	f7f9 fcef 	bl	8000574 <__aeabi_i2d>
 8006b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b9a:	f7f9 fd55 	bl	8000648 <__aeabi_dmul>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006baa:	f7f9 fb95 	bl	80002d8 <__aeabi_dsub>
 8006bae:	f806 4b01 	strb.w	r4, [r6], #1
 8006bb2:	9d03      	ldr	r5, [sp, #12]
 8006bb4:	eba6 040a 	sub.w	r4, r6, sl
 8006bb8:	42a5      	cmp	r5, r4
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	d133      	bne.n	8006c28 <_dtoa_r+0x6e0>
 8006bc0:	f7f9 fb8c 	bl	80002dc <__adddf3>
 8006bc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bc8:	4604      	mov	r4, r0
 8006bca:	460d      	mov	r5, r1
 8006bcc:	f7f9 ffcc 	bl	8000b68 <__aeabi_dcmpgt>
 8006bd0:	b9c0      	cbnz	r0, 8006c04 <_dtoa_r+0x6bc>
 8006bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	4629      	mov	r1, r5
 8006bda:	f7f9 ff9d 	bl	8000b18 <__aeabi_dcmpeq>
 8006bde:	b110      	cbz	r0, 8006be6 <_dtoa_r+0x69e>
 8006be0:	f018 0f01 	tst.w	r8, #1
 8006be4:	d10e      	bne.n	8006c04 <_dtoa_r+0x6bc>
 8006be6:	9902      	ldr	r1, [sp, #8]
 8006be8:	4648      	mov	r0, r9
 8006bea:	f000 fbbd 	bl	8007368 <_Bfree>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	7033      	strb	r3, [r6, #0]
 8006bf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006bf4:	3701      	adds	r7, #1
 8006bf6:	601f      	str	r7, [r3, #0]
 8006bf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 824b 	beq.w	8007096 <_dtoa_r+0xb4e>
 8006c00:	601e      	str	r6, [r3, #0]
 8006c02:	e248      	b.n	8007096 <_dtoa_r+0xb4e>
 8006c04:	46b8      	mov	r8, r7
 8006c06:	4633      	mov	r3, r6
 8006c08:	461e      	mov	r6, r3
 8006c0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c0e:	2a39      	cmp	r2, #57	@ 0x39
 8006c10:	d106      	bne.n	8006c20 <_dtoa_r+0x6d8>
 8006c12:	459a      	cmp	sl, r3
 8006c14:	d1f8      	bne.n	8006c08 <_dtoa_r+0x6c0>
 8006c16:	2230      	movs	r2, #48	@ 0x30
 8006c18:	f108 0801 	add.w	r8, r8, #1
 8006c1c:	f88a 2000 	strb.w	r2, [sl]
 8006c20:	781a      	ldrb	r2, [r3, #0]
 8006c22:	3201      	adds	r2, #1
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e7a0      	b.n	8006b6a <_dtoa_r+0x622>
 8006c28:	4b6f      	ldr	r3, [pc, #444]	@ (8006de8 <_dtoa_r+0x8a0>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f7f9 fd0c 	bl	8000648 <__aeabi_dmul>
 8006c30:	2200      	movs	r2, #0
 8006c32:	2300      	movs	r3, #0
 8006c34:	4604      	mov	r4, r0
 8006c36:	460d      	mov	r5, r1
 8006c38:	f7f9 ff6e 	bl	8000b18 <__aeabi_dcmpeq>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d09f      	beq.n	8006b80 <_dtoa_r+0x638>
 8006c40:	e7d1      	b.n	8006be6 <_dtoa_r+0x69e>
 8006c42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	f000 80ea 	beq.w	8006e1e <_dtoa_r+0x8d6>
 8006c4a:	9a07      	ldr	r2, [sp, #28]
 8006c4c:	2a01      	cmp	r2, #1
 8006c4e:	f300 80cd 	bgt.w	8006dec <_dtoa_r+0x8a4>
 8006c52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	f000 80c1 	beq.w	8006ddc <_dtoa_r+0x894>
 8006c5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c5e:	9c08      	ldr	r4, [sp, #32]
 8006c60:	9e00      	ldr	r6, [sp, #0]
 8006c62:	9a00      	ldr	r2, [sp, #0]
 8006c64:	441a      	add	r2, r3
 8006c66:	9200      	str	r2, [sp, #0]
 8006c68:	9a06      	ldr	r2, [sp, #24]
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	441a      	add	r2, r3
 8006c6e:	4648      	mov	r0, r9
 8006c70:	9206      	str	r2, [sp, #24]
 8006c72:	f000 fc2d 	bl	80074d0 <__i2b>
 8006c76:	4605      	mov	r5, r0
 8006c78:	b166      	cbz	r6, 8006c94 <_dtoa_r+0x74c>
 8006c7a:	9b06      	ldr	r3, [sp, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dd09      	ble.n	8006c94 <_dtoa_r+0x74c>
 8006c80:	42b3      	cmp	r3, r6
 8006c82:	9a00      	ldr	r2, [sp, #0]
 8006c84:	bfa8      	it	ge
 8006c86:	4633      	movge	r3, r6
 8006c88:	1ad2      	subs	r2, r2, r3
 8006c8a:	9200      	str	r2, [sp, #0]
 8006c8c:	9a06      	ldr	r2, [sp, #24]
 8006c8e:	1af6      	subs	r6, r6, r3
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	9306      	str	r3, [sp, #24]
 8006c94:	9b08      	ldr	r3, [sp, #32]
 8006c96:	b30b      	cbz	r3, 8006cdc <_dtoa_r+0x794>
 8006c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 80c6 	beq.w	8006e2c <_dtoa_r+0x8e4>
 8006ca0:	2c00      	cmp	r4, #0
 8006ca2:	f000 80c0 	beq.w	8006e26 <_dtoa_r+0x8de>
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4622      	mov	r2, r4
 8006caa:	4648      	mov	r0, r9
 8006cac:	f000 fcc8 	bl	8007640 <__pow5mult>
 8006cb0:	9a02      	ldr	r2, [sp, #8]
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	4648      	mov	r0, r9
 8006cb8:	f000 fc20 	bl	80074fc <__multiply>
 8006cbc:	9902      	ldr	r1, [sp, #8]
 8006cbe:	4680      	mov	r8, r0
 8006cc0:	4648      	mov	r0, r9
 8006cc2:	f000 fb51 	bl	8007368 <_Bfree>
 8006cc6:	9b08      	ldr	r3, [sp, #32]
 8006cc8:	1b1b      	subs	r3, r3, r4
 8006cca:	9308      	str	r3, [sp, #32]
 8006ccc:	f000 80b1 	beq.w	8006e32 <_dtoa_r+0x8ea>
 8006cd0:	9a08      	ldr	r2, [sp, #32]
 8006cd2:	4641      	mov	r1, r8
 8006cd4:	4648      	mov	r0, r9
 8006cd6:	f000 fcb3 	bl	8007640 <__pow5mult>
 8006cda:	9002      	str	r0, [sp, #8]
 8006cdc:	2101      	movs	r1, #1
 8006cde:	4648      	mov	r0, r9
 8006ce0:	f000 fbf6 	bl	80074d0 <__i2b>
 8006ce4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 81d8 	beq.w	800709e <_dtoa_r+0xb56>
 8006cee:	461a      	mov	r2, r3
 8006cf0:	4601      	mov	r1, r0
 8006cf2:	4648      	mov	r0, r9
 8006cf4:	f000 fca4 	bl	8007640 <__pow5mult>
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	f300 809f 	bgt.w	8006e40 <_dtoa_r+0x8f8>
 8006d02:	9b04      	ldr	r3, [sp, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f040 8097 	bne.w	8006e38 <_dtoa_r+0x8f0>
 8006d0a:	9b05      	ldr	r3, [sp, #20]
 8006d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f040 8093 	bne.w	8006e3c <_dtoa_r+0x8f4>
 8006d16:	9b05      	ldr	r3, [sp, #20]
 8006d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d1c:	0d1b      	lsrs	r3, r3, #20
 8006d1e:	051b      	lsls	r3, r3, #20
 8006d20:	b133      	cbz	r3, 8006d30 <_dtoa_r+0x7e8>
 8006d22:	9b00      	ldr	r3, [sp, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	9b06      	ldr	r3, [sp, #24]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	9306      	str	r3, [sp, #24]
 8006d2e:	2301      	movs	r3, #1
 8006d30:	9308      	str	r3, [sp, #32]
 8006d32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 81b8 	beq.w	80070aa <_dtoa_r+0xb62>
 8006d3a:	6923      	ldr	r3, [r4, #16]
 8006d3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d40:	6918      	ldr	r0, [r3, #16]
 8006d42:	f000 fb79 	bl	8007438 <__hi0bits>
 8006d46:	f1c0 0020 	rsb	r0, r0, #32
 8006d4a:	9b06      	ldr	r3, [sp, #24]
 8006d4c:	4418      	add	r0, r3
 8006d4e:	f010 001f 	ands.w	r0, r0, #31
 8006d52:	f000 8082 	beq.w	8006e5a <_dtoa_r+0x912>
 8006d56:	f1c0 0320 	rsb	r3, r0, #32
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	dd73      	ble.n	8006e46 <_dtoa_r+0x8fe>
 8006d5e:	9b00      	ldr	r3, [sp, #0]
 8006d60:	f1c0 001c 	rsb	r0, r0, #28
 8006d64:	4403      	add	r3, r0
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	9b06      	ldr	r3, [sp, #24]
 8006d6a:	4403      	add	r3, r0
 8006d6c:	4406      	add	r6, r0
 8006d6e:	9306      	str	r3, [sp, #24]
 8006d70:	9b00      	ldr	r3, [sp, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dd05      	ble.n	8006d82 <_dtoa_r+0x83a>
 8006d76:	9902      	ldr	r1, [sp, #8]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4648      	mov	r0, r9
 8006d7c:	f000 fcba 	bl	80076f4 <__lshift>
 8006d80:	9002      	str	r0, [sp, #8]
 8006d82:	9b06      	ldr	r3, [sp, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dd05      	ble.n	8006d94 <_dtoa_r+0x84c>
 8006d88:	4621      	mov	r1, r4
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	f000 fcb1 	bl	80076f4 <__lshift>
 8006d92:	4604      	mov	r4, r0
 8006d94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d061      	beq.n	8006e5e <_dtoa_r+0x916>
 8006d9a:	9802      	ldr	r0, [sp, #8]
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	f000 fd15 	bl	80077cc <__mcmp>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	da5b      	bge.n	8006e5e <_dtoa_r+0x916>
 8006da6:	2300      	movs	r3, #0
 8006da8:	9902      	ldr	r1, [sp, #8]
 8006daa:	220a      	movs	r2, #10
 8006dac:	4648      	mov	r0, r9
 8006dae:	f000 fafd 	bl	80073ac <__multadd>
 8006db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db4:	9002      	str	r0, [sp, #8]
 8006db6:	f107 38ff 	add.w	r8, r7, #4294967295
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 8177 	beq.w	80070ae <_dtoa_r+0xb66>
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	220a      	movs	r2, #10
 8006dc6:	4648      	mov	r0, r9
 8006dc8:	f000 faf0 	bl	80073ac <__multadd>
 8006dcc:	f1bb 0f00 	cmp.w	fp, #0
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	dc6f      	bgt.n	8006eb4 <_dtoa_r+0x96c>
 8006dd4:	9b07      	ldr	r3, [sp, #28]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	dc49      	bgt.n	8006e6e <_dtoa_r+0x926>
 8006dda:	e06b      	b.n	8006eb4 <_dtoa_r+0x96c>
 8006ddc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006de2:	e73c      	b.n	8006c5e <_dtoa_r+0x716>
 8006de4:	3fe00000 	.word	0x3fe00000
 8006de8:	40240000 	.word	0x40240000
 8006dec:	9b03      	ldr	r3, [sp, #12]
 8006dee:	1e5c      	subs	r4, r3, #1
 8006df0:	9b08      	ldr	r3, [sp, #32]
 8006df2:	42a3      	cmp	r3, r4
 8006df4:	db09      	blt.n	8006e0a <_dtoa_r+0x8c2>
 8006df6:	1b1c      	subs	r4, r3, r4
 8006df8:	9b03      	ldr	r3, [sp, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f6bf af30 	bge.w	8006c60 <_dtoa_r+0x718>
 8006e00:	9b00      	ldr	r3, [sp, #0]
 8006e02:	9a03      	ldr	r2, [sp, #12]
 8006e04:	1a9e      	subs	r6, r3, r2
 8006e06:	2300      	movs	r3, #0
 8006e08:	e72b      	b.n	8006c62 <_dtoa_r+0x71a>
 8006e0a:	9b08      	ldr	r3, [sp, #32]
 8006e0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e0e:	9408      	str	r4, [sp, #32]
 8006e10:	1ae3      	subs	r3, r4, r3
 8006e12:	441a      	add	r2, r3
 8006e14:	9e00      	ldr	r6, [sp, #0]
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	920d      	str	r2, [sp, #52]	@ 0x34
 8006e1a:	2400      	movs	r4, #0
 8006e1c:	e721      	b.n	8006c62 <_dtoa_r+0x71a>
 8006e1e:	9c08      	ldr	r4, [sp, #32]
 8006e20:	9e00      	ldr	r6, [sp, #0]
 8006e22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006e24:	e728      	b.n	8006c78 <_dtoa_r+0x730>
 8006e26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006e2a:	e751      	b.n	8006cd0 <_dtoa_r+0x788>
 8006e2c:	9a08      	ldr	r2, [sp, #32]
 8006e2e:	9902      	ldr	r1, [sp, #8]
 8006e30:	e750      	b.n	8006cd4 <_dtoa_r+0x78c>
 8006e32:	f8cd 8008 	str.w	r8, [sp, #8]
 8006e36:	e751      	b.n	8006cdc <_dtoa_r+0x794>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e779      	b.n	8006d30 <_dtoa_r+0x7e8>
 8006e3c:	9b04      	ldr	r3, [sp, #16]
 8006e3e:	e777      	b.n	8006d30 <_dtoa_r+0x7e8>
 8006e40:	2300      	movs	r3, #0
 8006e42:	9308      	str	r3, [sp, #32]
 8006e44:	e779      	b.n	8006d3a <_dtoa_r+0x7f2>
 8006e46:	d093      	beq.n	8006d70 <_dtoa_r+0x828>
 8006e48:	9a00      	ldr	r2, [sp, #0]
 8006e4a:	331c      	adds	r3, #28
 8006e4c:	441a      	add	r2, r3
 8006e4e:	9200      	str	r2, [sp, #0]
 8006e50:	9a06      	ldr	r2, [sp, #24]
 8006e52:	441a      	add	r2, r3
 8006e54:	441e      	add	r6, r3
 8006e56:	9206      	str	r2, [sp, #24]
 8006e58:	e78a      	b.n	8006d70 <_dtoa_r+0x828>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	e7f4      	b.n	8006e48 <_dtoa_r+0x900>
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	46b8      	mov	r8, r7
 8006e64:	dc20      	bgt.n	8006ea8 <_dtoa_r+0x960>
 8006e66:	469b      	mov	fp, r3
 8006e68:	9b07      	ldr	r3, [sp, #28]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	dd1e      	ble.n	8006eac <_dtoa_r+0x964>
 8006e6e:	f1bb 0f00 	cmp.w	fp, #0
 8006e72:	f47f adb1 	bne.w	80069d8 <_dtoa_r+0x490>
 8006e76:	4621      	mov	r1, r4
 8006e78:	465b      	mov	r3, fp
 8006e7a:	2205      	movs	r2, #5
 8006e7c:	4648      	mov	r0, r9
 8006e7e:	f000 fa95 	bl	80073ac <__multadd>
 8006e82:	4601      	mov	r1, r0
 8006e84:	4604      	mov	r4, r0
 8006e86:	9802      	ldr	r0, [sp, #8]
 8006e88:	f000 fca0 	bl	80077cc <__mcmp>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f77f ada3 	ble.w	80069d8 <_dtoa_r+0x490>
 8006e92:	4656      	mov	r6, sl
 8006e94:	2331      	movs	r3, #49	@ 0x31
 8006e96:	f806 3b01 	strb.w	r3, [r6], #1
 8006e9a:	f108 0801 	add.w	r8, r8, #1
 8006e9e:	e59f      	b.n	80069e0 <_dtoa_r+0x498>
 8006ea0:	9c03      	ldr	r4, [sp, #12]
 8006ea2:	46b8      	mov	r8, r7
 8006ea4:	4625      	mov	r5, r4
 8006ea6:	e7f4      	b.n	8006e92 <_dtoa_r+0x94a>
 8006ea8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8101 	beq.w	80070b6 <_dtoa_r+0xb6e>
 8006eb4:	2e00      	cmp	r6, #0
 8006eb6:	dd05      	ble.n	8006ec4 <_dtoa_r+0x97c>
 8006eb8:	4629      	mov	r1, r5
 8006eba:	4632      	mov	r2, r6
 8006ebc:	4648      	mov	r0, r9
 8006ebe:	f000 fc19 	bl	80076f4 <__lshift>
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	9b08      	ldr	r3, [sp, #32]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d05c      	beq.n	8006f84 <_dtoa_r+0xa3c>
 8006eca:	6869      	ldr	r1, [r5, #4]
 8006ecc:	4648      	mov	r0, r9
 8006ece:	f000 fa0b 	bl	80072e8 <_Balloc>
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	b928      	cbnz	r0, 8006ee2 <_dtoa_r+0x99a>
 8006ed6:	4b82      	ldr	r3, [pc, #520]	@ (80070e0 <_dtoa_r+0xb98>)
 8006ed8:	4602      	mov	r2, r0
 8006eda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ede:	f7ff bb4a 	b.w	8006576 <_dtoa_r+0x2e>
 8006ee2:	692a      	ldr	r2, [r5, #16]
 8006ee4:	3202      	adds	r2, #2
 8006ee6:	0092      	lsls	r2, r2, #2
 8006ee8:	f105 010c 	add.w	r1, r5, #12
 8006eec:	300c      	adds	r0, #12
 8006eee:	f000 ffa3 	bl	8007e38 <memcpy>
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4648      	mov	r0, r9
 8006ef8:	f000 fbfc 	bl	80076f4 <__lshift>
 8006efc:	f10a 0301 	add.w	r3, sl, #1
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	eb0a 030b 	add.w	r3, sl, fp
 8006f06:	9308      	str	r3, [sp, #32]
 8006f08:	9b04      	ldr	r3, [sp, #16]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	462f      	mov	r7, r5
 8006f10:	9306      	str	r3, [sp, #24]
 8006f12:	4605      	mov	r5, r0
 8006f14:	9b00      	ldr	r3, [sp, #0]
 8006f16:	9802      	ldr	r0, [sp, #8]
 8006f18:	4621      	mov	r1, r4
 8006f1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f1e:	f7ff fa8a 	bl	8006436 <quorem>
 8006f22:	4603      	mov	r3, r0
 8006f24:	3330      	adds	r3, #48	@ 0x30
 8006f26:	9003      	str	r0, [sp, #12]
 8006f28:	4639      	mov	r1, r7
 8006f2a:	9802      	ldr	r0, [sp, #8]
 8006f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f2e:	f000 fc4d 	bl	80077cc <__mcmp>
 8006f32:	462a      	mov	r2, r5
 8006f34:	9004      	str	r0, [sp, #16]
 8006f36:	4621      	mov	r1, r4
 8006f38:	4648      	mov	r0, r9
 8006f3a:	f000 fc63 	bl	8007804 <__mdiff>
 8006f3e:	68c2      	ldr	r2, [r0, #12]
 8006f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f42:	4606      	mov	r6, r0
 8006f44:	bb02      	cbnz	r2, 8006f88 <_dtoa_r+0xa40>
 8006f46:	4601      	mov	r1, r0
 8006f48:	9802      	ldr	r0, [sp, #8]
 8006f4a:	f000 fc3f 	bl	80077cc <__mcmp>
 8006f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f50:	4602      	mov	r2, r0
 8006f52:	4631      	mov	r1, r6
 8006f54:	4648      	mov	r0, r9
 8006f56:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f5a:	f000 fa05 	bl	8007368 <_Bfree>
 8006f5e:	9b07      	ldr	r3, [sp, #28]
 8006f60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f62:	9e00      	ldr	r6, [sp, #0]
 8006f64:	ea42 0103 	orr.w	r1, r2, r3
 8006f68:	9b06      	ldr	r3, [sp, #24]
 8006f6a:	4319      	orrs	r1, r3
 8006f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f6e:	d10d      	bne.n	8006f8c <_dtoa_r+0xa44>
 8006f70:	2b39      	cmp	r3, #57	@ 0x39
 8006f72:	d027      	beq.n	8006fc4 <_dtoa_r+0xa7c>
 8006f74:	9a04      	ldr	r2, [sp, #16]
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	dd01      	ble.n	8006f7e <_dtoa_r+0xa36>
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	3331      	adds	r3, #49	@ 0x31
 8006f7e:	f88b 3000 	strb.w	r3, [fp]
 8006f82:	e52e      	b.n	80069e2 <_dtoa_r+0x49a>
 8006f84:	4628      	mov	r0, r5
 8006f86:	e7b9      	b.n	8006efc <_dtoa_r+0x9b4>
 8006f88:	2201      	movs	r2, #1
 8006f8a:	e7e2      	b.n	8006f52 <_dtoa_r+0xa0a>
 8006f8c:	9904      	ldr	r1, [sp, #16]
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	db04      	blt.n	8006f9c <_dtoa_r+0xa54>
 8006f92:	9807      	ldr	r0, [sp, #28]
 8006f94:	4301      	orrs	r1, r0
 8006f96:	9806      	ldr	r0, [sp, #24]
 8006f98:	4301      	orrs	r1, r0
 8006f9a:	d120      	bne.n	8006fde <_dtoa_r+0xa96>
 8006f9c:	2a00      	cmp	r2, #0
 8006f9e:	ddee      	ble.n	8006f7e <_dtoa_r+0xa36>
 8006fa0:	9902      	ldr	r1, [sp, #8]
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	4648      	mov	r0, r9
 8006fa8:	f000 fba4 	bl	80076f4 <__lshift>
 8006fac:	4621      	mov	r1, r4
 8006fae:	9002      	str	r0, [sp, #8]
 8006fb0:	f000 fc0c 	bl	80077cc <__mcmp>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	9b00      	ldr	r3, [sp, #0]
 8006fb8:	dc02      	bgt.n	8006fc0 <_dtoa_r+0xa78>
 8006fba:	d1e0      	bne.n	8006f7e <_dtoa_r+0xa36>
 8006fbc:	07da      	lsls	r2, r3, #31
 8006fbe:	d5de      	bpl.n	8006f7e <_dtoa_r+0xa36>
 8006fc0:	2b39      	cmp	r3, #57	@ 0x39
 8006fc2:	d1da      	bne.n	8006f7a <_dtoa_r+0xa32>
 8006fc4:	2339      	movs	r3, #57	@ 0x39
 8006fc6:	f88b 3000 	strb.w	r3, [fp]
 8006fca:	4633      	mov	r3, r6
 8006fcc:	461e      	mov	r6, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006fd4:	2a39      	cmp	r2, #57	@ 0x39
 8006fd6:	d04e      	beq.n	8007076 <_dtoa_r+0xb2e>
 8006fd8:	3201      	adds	r2, #1
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	e501      	b.n	80069e2 <_dtoa_r+0x49a>
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	dd03      	ble.n	8006fea <_dtoa_r+0xaa2>
 8006fe2:	2b39      	cmp	r3, #57	@ 0x39
 8006fe4:	d0ee      	beq.n	8006fc4 <_dtoa_r+0xa7c>
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	e7c9      	b.n	8006f7e <_dtoa_r+0xa36>
 8006fea:	9a00      	ldr	r2, [sp, #0]
 8006fec:	9908      	ldr	r1, [sp, #32]
 8006fee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ff2:	428a      	cmp	r2, r1
 8006ff4:	d028      	beq.n	8007048 <_dtoa_r+0xb00>
 8006ff6:	9902      	ldr	r1, [sp, #8]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	220a      	movs	r2, #10
 8006ffc:	4648      	mov	r0, r9
 8006ffe:	f000 f9d5 	bl	80073ac <__multadd>
 8007002:	42af      	cmp	r7, r5
 8007004:	9002      	str	r0, [sp, #8]
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	f04f 020a 	mov.w	r2, #10
 800700e:	4639      	mov	r1, r7
 8007010:	4648      	mov	r0, r9
 8007012:	d107      	bne.n	8007024 <_dtoa_r+0xadc>
 8007014:	f000 f9ca 	bl	80073ac <__multadd>
 8007018:	4607      	mov	r7, r0
 800701a:	4605      	mov	r5, r0
 800701c:	9b00      	ldr	r3, [sp, #0]
 800701e:	3301      	adds	r3, #1
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	e777      	b.n	8006f14 <_dtoa_r+0x9cc>
 8007024:	f000 f9c2 	bl	80073ac <__multadd>
 8007028:	4629      	mov	r1, r5
 800702a:	4607      	mov	r7, r0
 800702c:	2300      	movs	r3, #0
 800702e:	220a      	movs	r2, #10
 8007030:	4648      	mov	r0, r9
 8007032:	f000 f9bb 	bl	80073ac <__multadd>
 8007036:	4605      	mov	r5, r0
 8007038:	e7f0      	b.n	800701c <_dtoa_r+0xad4>
 800703a:	f1bb 0f00 	cmp.w	fp, #0
 800703e:	bfcc      	ite	gt
 8007040:	465e      	movgt	r6, fp
 8007042:	2601      	movle	r6, #1
 8007044:	4456      	add	r6, sl
 8007046:	2700      	movs	r7, #0
 8007048:	9902      	ldr	r1, [sp, #8]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	2201      	movs	r2, #1
 800704e:	4648      	mov	r0, r9
 8007050:	f000 fb50 	bl	80076f4 <__lshift>
 8007054:	4621      	mov	r1, r4
 8007056:	9002      	str	r0, [sp, #8]
 8007058:	f000 fbb8 	bl	80077cc <__mcmp>
 800705c:	2800      	cmp	r0, #0
 800705e:	dcb4      	bgt.n	8006fca <_dtoa_r+0xa82>
 8007060:	d102      	bne.n	8007068 <_dtoa_r+0xb20>
 8007062:	9b00      	ldr	r3, [sp, #0]
 8007064:	07db      	lsls	r3, r3, #31
 8007066:	d4b0      	bmi.n	8006fca <_dtoa_r+0xa82>
 8007068:	4633      	mov	r3, r6
 800706a:	461e      	mov	r6, r3
 800706c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007070:	2a30      	cmp	r2, #48	@ 0x30
 8007072:	d0fa      	beq.n	800706a <_dtoa_r+0xb22>
 8007074:	e4b5      	b.n	80069e2 <_dtoa_r+0x49a>
 8007076:	459a      	cmp	sl, r3
 8007078:	d1a8      	bne.n	8006fcc <_dtoa_r+0xa84>
 800707a:	2331      	movs	r3, #49	@ 0x31
 800707c:	f108 0801 	add.w	r8, r8, #1
 8007080:	f88a 3000 	strb.w	r3, [sl]
 8007084:	e4ad      	b.n	80069e2 <_dtoa_r+0x49a>
 8007086:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007088:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80070e4 <_dtoa_r+0xb9c>
 800708c:	b11b      	cbz	r3, 8007096 <_dtoa_r+0xb4e>
 800708e:	f10a 0308 	add.w	r3, sl, #8
 8007092:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	4650      	mov	r0, sl
 8007098:	b017      	add	sp, #92	@ 0x5c
 800709a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709e:	9b07      	ldr	r3, [sp, #28]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	f77f ae2e 	ble.w	8006d02 <_dtoa_r+0x7ba>
 80070a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070a8:	9308      	str	r3, [sp, #32]
 80070aa:	2001      	movs	r0, #1
 80070ac:	e64d      	b.n	8006d4a <_dtoa_r+0x802>
 80070ae:	f1bb 0f00 	cmp.w	fp, #0
 80070b2:	f77f aed9 	ble.w	8006e68 <_dtoa_r+0x920>
 80070b6:	4656      	mov	r6, sl
 80070b8:	9802      	ldr	r0, [sp, #8]
 80070ba:	4621      	mov	r1, r4
 80070bc:	f7ff f9bb 	bl	8006436 <quorem>
 80070c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80070c4:	f806 3b01 	strb.w	r3, [r6], #1
 80070c8:	eba6 020a 	sub.w	r2, r6, sl
 80070cc:	4593      	cmp	fp, r2
 80070ce:	ddb4      	ble.n	800703a <_dtoa_r+0xaf2>
 80070d0:	9902      	ldr	r1, [sp, #8]
 80070d2:	2300      	movs	r3, #0
 80070d4:	220a      	movs	r2, #10
 80070d6:	4648      	mov	r0, r9
 80070d8:	f000 f968 	bl	80073ac <__multadd>
 80070dc:	9002      	str	r0, [sp, #8]
 80070de:	e7eb      	b.n	80070b8 <_dtoa_r+0xb70>
 80070e0:	080085f8 	.word	0x080085f8
 80070e4:	0800857c 	.word	0x0800857c

080070e8 <_free_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4605      	mov	r5, r0
 80070ec:	2900      	cmp	r1, #0
 80070ee:	d041      	beq.n	8007174 <_free_r+0x8c>
 80070f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070f4:	1f0c      	subs	r4, r1, #4
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfb8      	it	lt
 80070fa:	18e4      	addlt	r4, r4, r3
 80070fc:	f000 f8e8 	bl	80072d0 <__malloc_lock>
 8007100:	4a1d      	ldr	r2, [pc, #116]	@ (8007178 <_free_r+0x90>)
 8007102:	6813      	ldr	r3, [r2, #0]
 8007104:	b933      	cbnz	r3, 8007114 <_free_r+0x2c>
 8007106:	6063      	str	r3, [r4, #4]
 8007108:	6014      	str	r4, [r2, #0]
 800710a:	4628      	mov	r0, r5
 800710c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007110:	f000 b8e4 	b.w	80072dc <__malloc_unlock>
 8007114:	42a3      	cmp	r3, r4
 8007116:	d908      	bls.n	800712a <_free_r+0x42>
 8007118:	6820      	ldr	r0, [r4, #0]
 800711a:	1821      	adds	r1, r4, r0
 800711c:	428b      	cmp	r3, r1
 800711e:	bf01      	itttt	eq
 8007120:	6819      	ldreq	r1, [r3, #0]
 8007122:	685b      	ldreq	r3, [r3, #4]
 8007124:	1809      	addeq	r1, r1, r0
 8007126:	6021      	streq	r1, [r4, #0]
 8007128:	e7ed      	b.n	8007106 <_free_r+0x1e>
 800712a:	461a      	mov	r2, r3
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	b10b      	cbz	r3, 8007134 <_free_r+0x4c>
 8007130:	42a3      	cmp	r3, r4
 8007132:	d9fa      	bls.n	800712a <_free_r+0x42>
 8007134:	6811      	ldr	r1, [r2, #0]
 8007136:	1850      	adds	r0, r2, r1
 8007138:	42a0      	cmp	r0, r4
 800713a:	d10b      	bne.n	8007154 <_free_r+0x6c>
 800713c:	6820      	ldr	r0, [r4, #0]
 800713e:	4401      	add	r1, r0
 8007140:	1850      	adds	r0, r2, r1
 8007142:	4283      	cmp	r3, r0
 8007144:	6011      	str	r1, [r2, #0]
 8007146:	d1e0      	bne.n	800710a <_free_r+0x22>
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	6053      	str	r3, [r2, #4]
 800714e:	4408      	add	r0, r1
 8007150:	6010      	str	r0, [r2, #0]
 8007152:	e7da      	b.n	800710a <_free_r+0x22>
 8007154:	d902      	bls.n	800715c <_free_r+0x74>
 8007156:	230c      	movs	r3, #12
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	e7d6      	b.n	800710a <_free_r+0x22>
 800715c:	6820      	ldr	r0, [r4, #0]
 800715e:	1821      	adds	r1, r4, r0
 8007160:	428b      	cmp	r3, r1
 8007162:	bf04      	itt	eq
 8007164:	6819      	ldreq	r1, [r3, #0]
 8007166:	685b      	ldreq	r3, [r3, #4]
 8007168:	6063      	str	r3, [r4, #4]
 800716a:	bf04      	itt	eq
 800716c:	1809      	addeq	r1, r1, r0
 800716e:	6021      	streq	r1, [r4, #0]
 8007170:	6054      	str	r4, [r2, #4]
 8007172:	e7ca      	b.n	800710a <_free_r+0x22>
 8007174:	bd38      	pop	{r3, r4, r5, pc}
 8007176:	bf00      	nop
 8007178:	200004c8 	.word	0x200004c8

0800717c <malloc>:
 800717c:	4b02      	ldr	r3, [pc, #8]	@ (8007188 <malloc+0xc>)
 800717e:	4601      	mov	r1, r0
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	f000 b825 	b.w	80071d0 <_malloc_r>
 8007186:	bf00      	nop
 8007188:	20000018 	.word	0x20000018

0800718c <sbrk_aligned>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	4e0f      	ldr	r6, [pc, #60]	@ (80071cc <sbrk_aligned+0x40>)
 8007190:	460c      	mov	r4, r1
 8007192:	6831      	ldr	r1, [r6, #0]
 8007194:	4605      	mov	r5, r0
 8007196:	b911      	cbnz	r1, 800719e <sbrk_aligned+0x12>
 8007198:	f000 fe3e 	bl	8007e18 <_sbrk_r>
 800719c:	6030      	str	r0, [r6, #0]
 800719e:	4621      	mov	r1, r4
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 fe39 	bl	8007e18 <_sbrk_r>
 80071a6:	1c43      	adds	r3, r0, #1
 80071a8:	d103      	bne.n	80071b2 <sbrk_aligned+0x26>
 80071aa:	f04f 34ff 	mov.w	r4, #4294967295
 80071ae:	4620      	mov	r0, r4
 80071b0:	bd70      	pop	{r4, r5, r6, pc}
 80071b2:	1cc4      	adds	r4, r0, #3
 80071b4:	f024 0403 	bic.w	r4, r4, #3
 80071b8:	42a0      	cmp	r0, r4
 80071ba:	d0f8      	beq.n	80071ae <sbrk_aligned+0x22>
 80071bc:	1a21      	subs	r1, r4, r0
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 fe2a 	bl	8007e18 <_sbrk_r>
 80071c4:	3001      	adds	r0, #1
 80071c6:	d1f2      	bne.n	80071ae <sbrk_aligned+0x22>
 80071c8:	e7ef      	b.n	80071aa <sbrk_aligned+0x1e>
 80071ca:	bf00      	nop
 80071cc:	200004c4 	.word	0x200004c4

080071d0 <_malloc_r>:
 80071d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d4:	1ccd      	adds	r5, r1, #3
 80071d6:	f025 0503 	bic.w	r5, r5, #3
 80071da:	3508      	adds	r5, #8
 80071dc:	2d0c      	cmp	r5, #12
 80071de:	bf38      	it	cc
 80071e0:	250c      	movcc	r5, #12
 80071e2:	2d00      	cmp	r5, #0
 80071e4:	4606      	mov	r6, r0
 80071e6:	db01      	blt.n	80071ec <_malloc_r+0x1c>
 80071e8:	42a9      	cmp	r1, r5
 80071ea:	d904      	bls.n	80071f6 <_malloc_r+0x26>
 80071ec:	230c      	movs	r3, #12
 80071ee:	6033      	str	r3, [r6, #0]
 80071f0:	2000      	movs	r0, #0
 80071f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072cc <_malloc_r+0xfc>
 80071fa:	f000 f869 	bl	80072d0 <__malloc_lock>
 80071fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007202:	461c      	mov	r4, r3
 8007204:	bb44      	cbnz	r4, 8007258 <_malloc_r+0x88>
 8007206:	4629      	mov	r1, r5
 8007208:	4630      	mov	r0, r6
 800720a:	f7ff ffbf 	bl	800718c <sbrk_aligned>
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	4604      	mov	r4, r0
 8007212:	d158      	bne.n	80072c6 <_malloc_r+0xf6>
 8007214:	f8d8 4000 	ldr.w	r4, [r8]
 8007218:	4627      	mov	r7, r4
 800721a:	2f00      	cmp	r7, #0
 800721c:	d143      	bne.n	80072a6 <_malloc_r+0xd6>
 800721e:	2c00      	cmp	r4, #0
 8007220:	d04b      	beq.n	80072ba <_malloc_r+0xea>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	4639      	mov	r1, r7
 8007226:	4630      	mov	r0, r6
 8007228:	eb04 0903 	add.w	r9, r4, r3
 800722c:	f000 fdf4 	bl	8007e18 <_sbrk_r>
 8007230:	4581      	cmp	r9, r0
 8007232:	d142      	bne.n	80072ba <_malloc_r+0xea>
 8007234:	6821      	ldr	r1, [r4, #0]
 8007236:	1a6d      	subs	r5, r5, r1
 8007238:	4629      	mov	r1, r5
 800723a:	4630      	mov	r0, r6
 800723c:	f7ff ffa6 	bl	800718c <sbrk_aligned>
 8007240:	3001      	adds	r0, #1
 8007242:	d03a      	beq.n	80072ba <_malloc_r+0xea>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	442b      	add	r3, r5
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	f8d8 3000 	ldr.w	r3, [r8]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	bb62      	cbnz	r2, 80072ac <_malloc_r+0xdc>
 8007252:	f8c8 7000 	str.w	r7, [r8]
 8007256:	e00f      	b.n	8007278 <_malloc_r+0xa8>
 8007258:	6822      	ldr	r2, [r4, #0]
 800725a:	1b52      	subs	r2, r2, r5
 800725c:	d420      	bmi.n	80072a0 <_malloc_r+0xd0>
 800725e:	2a0b      	cmp	r2, #11
 8007260:	d917      	bls.n	8007292 <_malloc_r+0xc2>
 8007262:	1961      	adds	r1, r4, r5
 8007264:	42a3      	cmp	r3, r4
 8007266:	6025      	str	r5, [r4, #0]
 8007268:	bf18      	it	ne
 800726a:	6059      	strne	r1, [r3, #4]
 800726c:	6863      	ldr	r3, [r4, #4]
 800726e:	bf08      	it	eq
 8007270:	f8c8 1000 	streq.w	r1, [r8]
 8007274:	5162      	str	r2, [r4, r5]
 8007276:	604b      	str	r3, [r1, #4]
 8007278:	4630      	mov	r0, r6
 800727a:	f000 f82f 	bl	80072dc <__malloc_unlock>
 800727e:	f104 000b 	add.w	r0, r4, #11
 8007282:	1d23      	adds	r3, r4, #4
 8007284:	f020 0007 	bic.w	r0, r0, #7
 8007288:	1ac2      	subs	r2, r0, r3
 800728a:	bf1c      	itt	ne
 800728c:	1a1b      	subne	r3, r3, r0
 800728e:	50a3      	strne	r3, [r4, r2]
 8007290:	e7af      	b.n	80071f2 <_malloc_r+0x22>
 8007292:	6862      	ldr	r2, [r4, #4]
 8007294:	42a3      	cmp	r3, r4
 8007296:	bf0c      	ite	eq
 8007298:	f8c8 2000 	streq.w	r2, [r8]
 800729c:	605a      	strne	r2, [r3, #4]
 800729e:	e7eb      	b.n	8007278 <_malloc_r+0xa8>
 80072a0:	4623      	mov	r3, r4
 80072a2:	6864      	ldr	r4, [r4, #4]
 80072a4:	e7ae      	b.n	8007204 <_malloc_r+0x34>
 80072a6:	463c      	mov	r4, r7
 80072a8:	687f      	ldr	r7, [r7, #4]
 80072aa:	e7b6      	b.n	800721a <_malloc_r+0x4a>
 80072ac:	461a      	mov	r2, r3
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	d1fb      	bne.n	80072ac <_malloc_r+0xdc>
 80072b4:	2300      	movs	r3, #0
 80072b6:	6053      	str	r3, [r2, #4]
 80072b8:	e7de      	b.n	8007278 <_malloc_r+0xa8>
 80072ba:	230c      	movs	r3, #12
 80072bc:	6033      	str	r3, [r6, #0]
 80072be:	4630      	mov	r0, r6
 80072c0:	f000 f80c 	bl	80072dc <__malloc_unlock>
 80072c4:	e794      	b.n	80071f0 <_malloc_r+0x20>
 80072c6:	6005      	str	r5, [r0, #0]
 80072c8:	e7d6      	b.n	8007278 <_malloc_r+0xa8>
 80072ca:	bf00      	nop
 80072cc:	200004c8 	.word	0x200004c8

080072d0 <__malloc_lock>:
 80072d0:	4801      	ldr	r0, [pc, #4]	@ (80072d8 <__malloc_lock+0x8>)
 80072d2:	f7ff b8ae 	b.w	8006432 <__retarget_lock_acquire_recursive>
 80072d6:	bf00      	nop
 80072d8:	200004c0 	.word	0x200004c0

080072dc <__malloc_unlock>:
 80072dc:	4801      	ldr	r0, [pc, #4]	@ (80072e4 <__malloc_unlock+0x8>)
 80072de:	f7ff b8a9 	b.w	8006434 <__retarget_lock_release_recursive>
 80072e2:	bf00      	nop
 80072e4:	200004c0 	.word	0x200004c0

080072e8 <_Balloc>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	69c6      	ldr	r6, [r0, #28]
 80072ec:	4604      	mov	r4, r0
 80072ee:	460d      	mov	r5, r1
 80072f0:	b976      	cbnz	r6, 8007310 <_Balloc+0x28>
 80072f2:	2010      	movs	r0, #16
 80072f4:	f7ff ff42 	bl	800717c <malloc>
 80072f8:	4602      	mov	r2, r0
 80072fa:	61e0      	str	r0, [r4, #28]
 80072fc:	b920      	cbnz	r0, 8007308 <_Balloc+0x20>
 80072fe:	4b18      	ldr	r3, [pc, #96]	@ (8007360 <_Balloc+0x78>)
 8007300:	4818      	ldr	r0, [pc, #96]	@ (8007364 <_Balloc+0x7c>)
 8007302:	216b      	movs	r1, #107	@ 0x6b
 8007304:	f000 fda6 	bl	8007e54 <__assert_func>
 8007308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800730c:	6006      	str	r6, [r0, #0]
 800730e:	60c6      	str	r6, [r0, #12]
 8007310:	69e6      	ldr	r6, [r4, #28]
 8007312:	68f3      	ldr	r3, [r6, #12]
 8007314:	b183      	cbz	r3, 8007338 <_Balloc+0x50>
 8007316:	69e3      	ldr	r3, [r4, #28]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800731e:	b9b8      	cbnz	r0, 8007350 <_Balloc+0x68>
 8007320:	2101      	movs	r1, #1
 8007322:	fa01 f605 	lsl.w	r6, r1, r5
 8007326:	1d72      	adds	r2, r6, #5
 8007328:	0092      	lsls	r2, r2, #2
 800732a:	4620      	mov	r0, r4
 800732c:	f000 fdb0 	bl	8007e90 <_calloc_r>
 8007330:	b160      	cbz	r0, 800734c <_Balloc+0x64>
 8007332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007336:	e00e      	b.n	8007356 <_Balloc+0x6e>
 8007338:	2221      	movs	r2, #33	@ 0x21
 800733a:	2104      	movs	r1, #4
 800733c:	4620      	mov	r0, r4
 800733e:	f000 fda7 	bl	8007e90 <_calloc_r>
 8007342:	69e3      	ldr	r3, [r4, #28]
 8007344:	60f0      	str	r0, [r6, #12]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e4      	bne.n	8007316 <_Balloc+0x2e>
 800734c:	2000      	movs	r0, #0
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	6802      	ldr	r2, [r0, #0]
 8007352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007356:	2300      	movs	r3, #0
 8007358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800735c:	e7f7      	b.n	800734e <_Balloc+0x66>
 800735e:	bf00      	nop
 8007360:	08008589 	.word	0x08008589
 8007364:	08008609 	.word	0x08008609

08007368 <_Bfree>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	69c6      	ldr	r6, [r0, #28]
 800736c:	4605      	mov	r5, r0
 800736e:	460c      	mov	r4, r1
 8007370:	b976      	cbnz	r6, 8007390 <_Bfree+0x28>
 8007372:	2010      	movs	r0, #16
 8007374:	f7ff ff02 	bl	800717c <malloc>
 8007378:	4602      	mov	r2, r0
 800737a:	61e8      	str	r0, [r5, #28]
 800737c:	b920      	cbnz	r0, 8007388 <_Bfree+0x20>
 800737e:	4b09      	ldr	r3, [pc, #36]	@ (80073a4 <_Bfree+0x3c>)
 8007380:	4809      	ldr	r0, [pc, #36]	@ (80073a8 <_Bfree+0x40>)
 8007382:	218f      	movs	r1, #143	@ 0x8f
 8007384:	f000 fd66 	bl	8007e54 <__assert_func>
 8007388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800738c:	6006      	str	r6, [r0, #0]
 800738e:	60c6      	str	r6, [r0, #12]
 8007390:	b13c      	cbz	r4, 80073a2 <_Bfree+0x3a>
 8007392:	69eb      	ldr	r3, [r5, #28]
 8007394:	6862      	ldr	r2, [r4, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800739c:	6021      	str	r1, [r4, #0]
 800739e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	08008589 	.word	0x08008589
 80073a8:	08008609 	.word	0x08008609

080073ac <__multadd>:
 80073ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b0:	690d      	ldr	r5, [r1, #16]
 80073b2:	4607      	mov	r7, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	461e      	mov	r6, r3
 80073b8:	f101 0c14 	add.w	ip, r1, #20
 80073bc:	2000      	movs	r0, #0
 80073be:	f8dc 3000 	ldr.w	r3, [ip]
 80073c2:	b299      	uxth	r1, r3
 80073c4:	fb02 6101 	mla	r1, r2, r1, r6
 80073c8:	0c1e      	lsrs	r6, r3, #16
 80073ca:	0c0b      	lsrs	r3, r1, #16
 80073cc:	fb02 3306 	mla	r3, r2, r6, r3
 80073d0:	b289      	uxth	r1, r1
 80073d2:	3001      	adds	r0, #1
 80073d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073d8:	4285      	cmp	r5, r0
 80073da:	f84c 1b04 	str.w	r1, [ip], #4
 80073de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073e2:	dcec      	bgt.n	80073be <__multadd+0x12>
 80073e4:	b30e      	cbz	r6, 800742a <__multadd+0x7e>
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	42ab      	cmp	r3, r5
 80073ea:	dc19      	bgt.n	8007420 <__multadd+0x74>
 80073ec:	6861      	ldr	r1, [r4, #4]
 80073ee:	4638      	mov	r0, r7
 80073f0:	3101      	adds	r1, #1
 80073f2:	f7ff ff79 	bl	80072e8 <_Balloc>
 80073f6:	4680      	mov	r8, r0
 80073f8:	b928      	cbnz	r0, 8007406 <__multadd+0x5a>
 80073fa:	4602      	mov	r2, r0
 80073fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007430 <__multadd+0x84>)
 80073fe:	480d      	ldr	r0, [pc, #52]	@ (8007434 <__multadd+0x88>)
 8007400:	21ba      	movs	r1, #186	@ 0xba
 8007402:	f000 fd27 	bl	8007e54 <__assert_func>
 8007406:	6922      	ldr	r2, [r4, #16]
 8007408:	3202      	adds	r2, #2
 800740a:	f104 010c 	add.w	r1, r4, #12
 800740e:	0092      	lsls	r2, r2, #2
 8007410:	300c      	adds	r0, #12
 8007412:	f000 fd11 	bl	8007e38 <memcpy>
 8007416:	4621      	mov	r1, r4
 8007418:	4638      	mov	r0, r7
 800741a:	f7ff ffa5 	bl	8007368 <_Bfree>
 800741e:	4644      	mov	r4, r8
 8007420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007424:	3501      	adds	r5, #1
 8007426:	615e      	str	r6, [r3, #20]
 8007428:	6125      	str	r5, [r4, #16]
 800742a:	4620      	mov	r0, r4
 800742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007430:	080085f8 	.word	0x080085f8
 8007434:	08008609 	.word	0x08008609

08007438 <__hi0bits>:
 8007438:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800743c:	4603      	mov	r3, r0
 800743e:	bf36      	itet	cc
 8007440:	0403      	lslcc	r3, r0, #16
 8007442:	2000      	movcs	r0, #0
 8007444:	2010      	movcc	r0, #16
 8007446:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800744a:	bf3c      	itt	cc
 800744c:	021b      	lslcc	r3, r3, #8
 800744e:	3008      	addcc	r0, #8
 8007450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007454:	bf3c      	itt	cc
 8007456:	011b      	lslcc	r3, r3, #4
 8007458:	3004      	addcc	r0, #4
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800745e:	bf3c      	itt	cc
 8007460:	009b      	lslcc	r3, r3, #2
 8007462:	3002      	addcc	r0, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	db05      	blt.n	8007474 <__hi0bits+0x3c>
 8007468:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800746c:	f100 0001 	add.w	r0, r0, #1
 8007470:	bf08      	it	eq
 8007472:	2020      	moveq	r0, #32
 8007474:	4770      	bx	lr

08007476 <__lo0bits>:
 8007476:	6803      	ldr	r3, [r0, #0]
 8007478:	4602      	mov	r2, r0
 800747a:	f013 0007 	ands.w	r0, r3, #7
 800747e:	d00b      	beq.n	8007498 <__lo0bits+0x22>
 8007480:	07d9      	lsls	r1, r3, #31
 8007482:	d421      	bmi.n	80074c8 <__lo0bits+0x52>
 8007484:	0798      	lsls	r0, r3, #30
 8007486:	bf49      	itett	mi
 8007488:	085b      	lsrmi	r3, r3, #1
 800748a:	089b      	lsrpl	r3, r3, #2
 800748c:	2001      	movmi	r0, #1
 800748e:	6013      	strmi	r3, [r2, #0]
 8007490:	bf5c      	itt	pl
 8007492:	6013      	strpl	r3, [r2, #0]
 8007494:	2002      	movpl	r0, #2
 8007496:	4770      	bx	lr
 8007498:	b299      	uxth	r1, r3
 800749a:	b909      	cbnz	r1, 80074a0 <__lo0bits+0x2a>
 800749c:	0c1b      	lsrs	r3, r3, #16
 800749e:	2010      	movs	r0, #16
 80074a0:	b2d9      	uxtb	r1, r3
 80074a2:	b909      	cbnz	r1, 80074a8 <__lo0bits+0x32>
 80074a4:	3008      	adds	r0, #8
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	0719      	lsls	r1, r3, #28
 80074aa:	bf04      	itt	eq
 80074ac:	091b      	lsreq	r3, r3, #4
 80074ae:	3004      	addeq	r0, #4
 80074b0:	0799      	lsls	r1, r3, #30
 80074b2:	bf04      	itt	eq
 80074b4:	089b      	lsreq	r3, r3, #2
 80074b6:	3002      	addeq	r0, #2
 80074b8:	07d9      	lsls	r1, r3, #31
 80074ba:	d403      	bmi.n	80074c4 <__lo0bits+0x4e>
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	f100 0001 	add.w	r0, r0, #1
 80074c2:	d003      	beq.n	80074cc <__lo0bits+0x56>
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	4770      	bx	lr
 80074c8:	2000      	movs	r0, #0
 80074ca:	4770      	bx	lr
 80074cc:	2020      	movs	r0, #32
 80074ce:	4770      	bx	lr

080074d0 <__i2b>:
 80074d0:	b510      	push	{r4, lr}
 80074d2:	460c      	mov	r4, r1
 80074d4:	2101      	movs	r1, #1
 80074d6:	f7ff ff07 	bl	80072e8 <_Balloc>
 80074da:	4602      	mov	r2, r0
 80074dc:	b928      	cbnz	r0, 80074ea <__i2b+0x1a>
 80074de:	4b05      	ldr	r3, [pc, #20]	@ (80074f4 <__i2b+0x24>)
 80074e0:	4805      	ldr	r0, [pc, #20]	@ (80074f8 <__i2b+0x28>)
 80074e2:	f240 1145 	movw	r1, #325	@ 0x145
 80074e6:	f000 fcb5 	bl	8007e54 <__assert_func>
 80074ea:	2301      	movs	r3, #1
 80074ec:	6144      	str	r4, [r0, #20]
 80074ee:	6103      	str	r3, [r0, #16]
 80074f0:	bd10      	pop	{r4, pc}
 80074f2:	bf00      	nop
 80074f4:	080085f8 	.word	0x080085f8
 80074f8:	08008609 	.word	0x08008609

080074fc <__multiply>:
 80074fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007500:	4617      	mov	r7, r2
 8007502:	690a      	ldr	r2, [r1, #16]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	429a      	cmp	r2, r3
 8007508:	bfa8      	it	ge
 800750a:	463b      	movge	r3, r7
 800750c:	4689      	mov	r9, r1
 800750e:	bfa4      	itt	ge
 8007510:	460f      	movge	r7, r1
 8007512:	4699      	movge	r9, r3
 8007514:	693d      	ldr	r5, [r7, #16]
 8007516:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	eb05 060a 	add.w	r6, r5, sl
 8007522:	42b3      	cmp	r3, r6
 8007524:	b085      	sub	sp, #20
 8007526:	bfb8      	it	lt
 8007528:	3101      	addlt	r1, #1
 800752a:	f7ff fedd 	bl	80072e8 <_Balloc>
 800752e:	b930      	cbnz	r0, 800753e <__multiply+0x42>
 8007530:	4602      	mov	r2, r0
 8007532:	4b41      	ldr	r3, [pc, #260]	@ (8007638 <__multiply+0x13c>)
 8007534:	4841      	ldr	r0, [pc, #260]	@ (800763c <__multiply+0x140>)
 8007536:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800753a:	f000 fc8b 	bl	8007e54 <__assert_func>
 800753e:	f100 0414 	add.w	r4, r0, #20
 8007542:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007546:	4623      	mov	r3, r4
 8007548:	2200      	movs	r2, #0
 800754a:	4573      	cmp	r3, lr
 800754c:	d320      	bcc.n	8007590 <__multiply+0x94>
 800754e:	f107 0814 	add.w	r8, r7, #20
 8007552:	f109 0114 	add.w	r1, r9, #20
 8007556:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800755a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800755e:	9302      	str	r3, [sp, #8]
 8007560:	1beb      	subs	r3, r5, r7
 8007562:	3b15      	subs	r3, #21
 8007564:	f023 0303 	bic.w	r3, r3, #3
 8007568:	3304      	adds	r3, #4
 800756a:	3715      	adds	r7, #21
 800756c:	42bd      	cmp	r5, r7
 800756e:	bf38      	it	cc
 8007570:	2304      	movcc	r3, #4
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	9b02      	ldr	r3, [sp, #8]
 8007576:	9103      	str	r1, [sp, #12]
 8007578:	428b      	cmp	r3, r1
 800757a:	d80c      	bhi.n	8007596 <__multiply+0x9a>
 800757c:	2e00      	cmp	r6, #0
 800757e:	dd03      	ble.n	8007588 <__multiply+0x8c>
 8007580:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007584:	2b00      	cmp	r3, #0
 8007586:	d055      	beq.n	8007634 <__multiply+0x138>
 8007588:	6106      	str	r6, [r0, #16]
 800758a:	b005      	add	sp, #20
 800758c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007590:	f843 2b04 	str.w	r2, [r3], #4
 8007594:	e7d9      	b.n	800754a <__multiply+0x4e>
 8007596:	f8b1 a000 	ldrh.w	sl, [r1]
 800759a:	f1ba 0f00 	cmp.w	sl, #0
 800759e:	d01f      	beq.n	80075e0 <__multiply+0xe4>
 80075a0:	46c4      	mov	ip, r8
 80075a2:	46a1      	mov	r9, r4
 80075a4:	2700      	movs	r7, #0
 80075a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075aa:	f8d9 3000 	ldr.w	r3, [r9]
 80075ae:	fa1f fb82 	uxth.w	fp, r2
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80075b8:	443b      	add	r3, r7
 80075ba:	f8d9 7000 	ldr.w	r7, [r9]
 80075be:	0c12      	lsrs	r2, r2, #16
 80075c0:	0c3f      	lsrs	r7, r7, #16
 80075c2:	fb0a 7202 	mla	r2, sl, r2, r7
 80075c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075d0:	4565      	cmp	r5, ip
 80075d2:	f849 3b04 	str.w	r3, [r9], #4
 80075d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80075da:	d8e4      	bhi.n	80075a6 <__multiply+0xaa>
 80075dc:	9b01      	ldr	r3, [sp, #4]
 80075de:	50e7      	str	r7, [r4, r3]
 80075e0:	9b03      	ldr	r3, [sp, #12]
 80075e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075e6:	3104      	adds	r1, #4
 80075e8:	f1b9 0f00 	cmp.w	r9, #0
 80075ec:	d020      	beq.n	8007630 <__multiply+0x134>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	4647      	mov	r7, r8
 80075f2:	46a4      	mov	ip, r4
 80075f4:	f04f 0a00 	mov.w	sl, #0
 80075f8:	f8b7 b000 	ldrh.w	fp, [r7]
 80075fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007600:	fb09 220b 	mla	r2, r9, fp, r2
 8007604:	4452      	add	r2, sl
 8007606:	b29b      	uxth	r3, r3
 8007608:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800760c:	f84c 3b04 	str.w	r3, [ip], #4
 8007610:	f857 3b04 	ldr.w	r3, [r7], #4
 8007614:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007618:	f8bc 3000 	ldrh.w	r3, [ip]
 800761c:	fb09 330a 	mla	r3, r9, sl, r3
 8007620:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007624:	42bd      	cmp	r5, r7
 8007626:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800762a:	d8e5      	bhi.n	80075f8 <__multiply+0xfc>
 800762c:	9a01      	ldr	r2, [sp, #4]
 800762e:	50a3      	str	r3, [r4, r2]
 8007630:	3404      	adds	r4, #4
 8007632:	e79f      	b.n	8007574 <__multiply+0x78>
 8007634:	3e01      	subs	r6, #1
 8007636:	e7a1      	b.n	800757c <__multiply+0x80>
 8007638:	080085f8 	.word	0x080085f8
 800763c:	08008609 	.word	0x08008609

08007640 <__pow5mult>:
 8007640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007644:	4615      	mov	r5, r2
 8007646:	f012 0203 	ands.w	r2, r2, #3
 800764a:	4607      	mov	r7, r0
 800764c:	460e      	mov	r6, r1
 800764e:	d007      	beq.n	8007660 <__pow5mult+0x20>
 8007650:	4c25      	ldr	r4, [pc, #148]	@ (80076e8 <__pow5mult+0xa8>)
 8007652:	3a01      	subs	r2, #1
 8007654:	2300      	movs	r3, #0
 8007656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800765a:	f7ff fea7 	bl	80073ac <__multadd>
 800765e:	4606      	mov	r6, r0
 8007660:	10ad      	asrs	r5, r5, #2
 8007662:	d03d      	beq.n	80076e0 <__pow5mult+0xa0>
 8007664:	69fc      	ldr	r4, [r7, #28]
 8007666:	b97c      	cbnz	r4, 8007688 <__pow5mult+0x48>
 8007668:	2010      	movs	r0, #16
 800766a:	f7ff fd87 	bl	800717c <malloc>
 800766e:	4602      	mov	r2, r0
 8007670:	61f8      	str	r0, [r7, #28]
 8007672:	b928      	cbnz	r0, 8007680 <__pow5mult+0x40>
 8007674:	4b1d      	ldr	r3, [pc, #116]	@ (80076ec <__pow5mult+0xac>)
 8007676:	481e      	ldr	r0, [pc, #120]	@ (80076f0 <__pow5mult+0xb0>)
 8007678:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800767c:	f000 fbea 	bl	8007e54 <__assert_func>
 8007680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007684:	6004      	str	r4, [r0, #0]
 8007686:	60c4      	str	r4, [r0, #12]
 8007688:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800768c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007690:	b94c      	cbnz	r4, 80076a6 <__pow5mult+0x66>
 8007692:	f240 2171 	movw	r1, #625	@ 0x271
 8007696:	4638      	mov	r0, r7
 8007698:	f7ff ff1a 	bl	80074d0 <__i2b>
 800769c:	2300      	movs	r3, #0
 800769e:	f8c8 0008 	str.w	r0, [r8, #8]
 80076a2:	4604      	mov	r4, r0
 80076a4:	6003      	str	r3, [r0, #0]
 80076a6:	f04f 0900 	mov.w	r9, #0
 80076aa:	07eb      	lsls	r3, r5, #31
 80076ac:	d50a      	bpl.n	80076c4 <__pow5mult+0x84>
 80076ae:	4631      	mov	r1, r6
 80076b0:	4622      	mov	r2, r4
 80076b2:	4638      	mov	r0, r7
 80076b4:	f7ff ff22 	bl	80074fc <__multiply>
 80076b8:	4631      	mov	r1, r6
 80076ba:	4680      	mov	r8, r0
 80076bc:	4638      	mov	r0, r7
 80076be:	f7ff fe53 	bl	8007368 <_Bfree>
 80076c2:	4646      	mov	r6, r8
 80076c4:	106d      	asrs	r5, r5, #1
 80076c6:	d00b      	beq.n	80076e0 <__pow5mult+0xa0>
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	b938      	cbnz	r0, 80076dc <__pow5mult+0x9c>
 80076cc:	4622      	mov	r2, r4
 80076ce:	4621      	mov	r1, r4
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff ff13 	bl	80074fc <__multiply>
 80076d6:	6020      	str	r0, [r4, #0]
 80076d8:	f8c0 9000 	str.w	r9, [r0]
 80076dc:	4604      	mov	r4, r0
 80076de:	e7e4      	b.n	80076aa <__pow5mult+0x6a>
 80076e0:	4630      	mov	r0, r6
 80076e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e6:	bf00      	nop
 80076e8:	080086bc 	.word	0x080086bc
 80076ec:	08008589 	.word	0x08008589
 80076f0:	08008609 	.word	0x08008609

080076f4 <__lshift>:
 80076f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	460c      	mov	r4, r1
 80076fa:	6849      	ldr	r1, [r1, #4]
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007702:	68a3      	ldr	r3, [r4, #8]
 8007704:	4607      	mov	r7, r0
 8007706:	4691      	mov	r9, r2
 8007708:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800770c:	f108 0601 	add.w	r6, r8, #1
 8007710:	42b3      	cmp	r3, r6
 8007712:	db0b      	blt.n	800772c <__lshift+0x38>
 8007714:	4638      	mov	r0, r7
 8007716:	f7ff fde7 	bl	80072e8 <_Balloc>
 800771a:	4605      	mov	r5, r0
 800771c:	b948      	cbnz	r0, 8007732 <__lshift+0x3e>
 800771e:	4602      	mov	r2, r0
 8007720:	4b28      	ldr	r3, [pc, #160]	@ (80077c4 <__lshift+0xd0>)
 8007722:	4829      	ldr	r0, [pc, #164]	@ (80077c8 <__lshift+0xd4>)
 8007724:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007728:	f000 fb94 	bl	8007e54 <__assert_func>
 800772c:	3101      	adds	r1, #1
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	e7ee      	b.n	8007710 <__lshift+0x1c>
 8007732:	2300      	movs	r3, #0
 8007734:	f100 0114 	add.w	r1, r0, #20
 8007738:	f100 0210 	add.w	r2, r0, #16
 800773c:	4618      	mov	r0, r3
 800773e:	4553      	cmp	r3, sl
 8007740:	db33      	blt.n	80077aa <__lshift+0xb6>
 8007742:	6920      	ldr	r0, [r4, #16]
 8007744:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007748:	f104 0314 	add.w	r3, r4, #20
 800774c:	f019 091f 	ands.w	r9, r9, #31
 8007750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007754:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007758:	d02b      	beq.n	80077b2 <__lshift+0xbe>
 800775a:	f1c9 0e20 	rsb	lr, r9, #32
 800775e:	468a      	mov	sl, r1
 8007760:	2200      	movs	r2, #0
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	fa00 f009 	lsl.w	r0, r0, r9
 8007768:	4310      	orrs	r0, r2
 800776a:	f84a 0b04 	str.w	r0, [sl], #4
 800776e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007772:	459c      	cmp	ip, r3
 8007774:	fa22 f20e 	lsr.w	r2, r2, lr
 8007778:	d8f3      	bhi.n	8007762 <__lshift+0x6e>
 800777a:	ebac 0304 	sub.w	r3, ip, r4
 800777e:	3b15      	subs	r3, #21
 8007780:	f023 0303 	bic.w	r3, r3, #3
 8007784:	3304      	adds	r3, #4
 8007786:	f104 0015 	add.w	r0, r4, #21
 800778a:	4560      	cmp	r0, ip
 800778c:	bf88      	it	hi
 800778e:	2304      	movhi	r3, #4
 8007790:	50ca      	str	r2, [r1, r3]
 8007792:	b10a      	cbz	r2, 8007798 <__lshift+0xa4>
 8007794:	f108 0602 	add.w	r6, r8, #2
 8007798:	3e01      	subs	r6, #1
 800779a:	4638      	mov	r0, r7
 800779c:	612e      	str	r6, [r5, #16]
 800779e:	4621      	mov	r1, r4
 80077a0:	f7ff fde2 	bl	8007368 <_Bfree>
 80077a4:	4628      	mov	r0, r5
 80077a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80077ae:	3301      	adds	r3, #1
 80077b0:	e7c5      	b.n	800773e <__lshift+0x4a>
 80077b2:	3904      	subs	r1, #4
 80077b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80077bc:	459c      	cmp	ip, r3
 80077be:	d8f9      	bhi.n	80077b4 <__lshift+0xc0>
 80077c0:	e7ea      	b.n	8007798 <__lshift+0xa4>
 80077c2:	bf00      	nop
 80077c4:	080085f8 	.word	0x080085f8
 80077c8:	08008609 	.word	0x08008609

080077cc <__mcmp>:
 80077cc:	690a      	ldr	r2, [r1, #16]
 80077ce:	4603      	mov	r3, r0
 80077d0:	6900      	ldr	r0, [r0, #16]
 80077d2:	1a80      	subs	r0, r0, r2
 80077d4:	b530      	push	{r4, r5, lr}
 80077d6:	d10e      	bne.n	80077f6 <__mcmp+0x2a>
 80077d8:	3314      	adds	r3, #20
 80077da:	3114      	adds	r1, #20
 80077dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077ec:	4295      	cmp	r5, r2
 80077ee:	d003      	beq.n	80077f8 <__mcmp+0x2c>
 80077f0:	d205      	bcs.n	80077fe <__mcmp+0x32>
 80077f2:	f04f 30ff 	mov.w	r0, #4294967295
 80077f6:	bd30      	pop	{r4, r5, pc}
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	d3f3      	bcc.n	80077e4 <__mcmp+0x18>
 80077fc:	e7fb      	b.n	80077f6 <__mcmp+0x2a>
 80077fe:	2001      	movs	r0, #1
 8007800:	e7f9      	b.n	80077f6 <__mcmp+0x2a>
	...

08007804 <__mdiff>:
 8007804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	4689      	mov	r9, r1
 800780a:	4606      	mov	r6, r0
 800780c:	4611      	mov	r1, r2
 800780e:	4648      	mov	r0, r9
 8007810:	4614      	mov	r4, r2
 8007812:	f7ff ffdb 	bl	80077cc <__mcmp>
 8007816:	1e05      	subs	r5, r0, #0
 8007818:	d112      	bne.n	8007840 <__mdiff+0x3c>
 800781a:	4629      	mov	r1, r5
 800781c:	4630      	mov	r0, r6
 800781e:	f7ff fd63 	bl	80072e8 <_Balloc>
 8007822:	4602      	mov	r2, r0
 8007824:	b928      	cbnz	r0, 8007832 <__mdiff+0x2e>
 8007826:	4b3f      	ldr	r3, [pc, #252]	@ (8007924 <__mdiff+0x120>)
 8007828:	f240 2137 	movw	r1, #567	@ 0x237
 800782c:	483e      	ldr	r0, [pc, #248]	@ (8007928 <__mdiff+0x124>)
 800782e:	f000 fb11 	bl	8007e54 <__assert_func>
 8007832:	2301      	movs	r3, #1
 8007834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007838:	4610      	mov	r0, r2
 800783a:	b003      	add	sp, #12
 800783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007840:	bfbc      	itt	lt
 8007842:	464b      	movlt	r3, r9
 8007844:	46a1      	movlt	r9, r4
 8007846:	4630      	mov	r0, r6
 8007848:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800784c:	bfba      	itte	lt
 800784e:	461c      	movlt	r4, r3
 8007850:	2501      	movlt	r5, #1
 8007852:	2500      	movge	r5, #0
 8007854:	f7ff fd48 	bl	80072e8 <_Balloc>
 8007858:	4602      	mov	r2, r0
 800785a:	b918      	cbnz	r0, 8007864 <__mdiff+0x60>
 800785c:	4b31      	ldr	r3, [pc, #196]	@ (8007924 <__mdiff+0x120>)
 800785e:	f240 2145 	movw	r1, #581	@ 0x245
 8007862:	e7e3      	b.n	800782c <__mdiff+0x28>
 8007864:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007868:	6926      	ldr	r6, [r4, #16]
 800786a:	60c5      	str	r5, [r0, #12]
 800786c:	f109 0310 	add.w	r3, r9, #16
 8007870:	f109 0514 	add.w	r5, r9, #20
 8007874:	f104 0e14 	add.w	lr, r4, #20
 8007878:	f100 0b14 	add.w	fp, r0, #20
 800787c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007880:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	46d9      	mov	r9, fp
 8007888:	f04f 0c00 	mov.w	ip, #0
 800788c:	9b01      	ldr	r3, [sp, #4]
 800788e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007892:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	fa1f f38a 	uxth.w	r3, sl
 800789c:	4619      	mov	r1, r3
 800789e:	b283      	uxth	r3, r0
 80078a0:	1acb      	subs	r3, r1, r3
 80078a2:	0c00      	lsrs	r0, r0, #16
 80078a4:	4463      	add	r3, ip
 80078a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80078aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80078b4:	4576      	cmp	r6, lr
 80078b6:	f849 3b04 	str.w	r3, [r9], #4
 80078ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078be:	d8e5      	bhi.n	800788c <__mdiff+0x88>
 80078c0:	1b33      	subs	r3, r6, r4
 80078c2:	3b15      	subs	r3, #21
 80078c4:	f023 0303 	bic.w	r3, r3, #3
 80078c8:	3415      	adds	r4, #21
 80078ca:	3304      	adds	r3, #4
 80078cc:	42a6      	cmp	r6, r4
 80078ce:	bf38      	it	cc
 80078d0:	2304      	movcc	r3, #4
 80078d2:	441d      	add	r5, r3
 80078d4:	445b      	add	r3, fp
 80078d6:	461e      	mov	r6, r3
 80078d8:	462c      	mov	r4, r5
 80078da:	4544      	cmp	r4, r8
 80078dc:	d30e      	bcc.n	80078fc <__mdiff+0xf8>
 80078de:	f108 0103 	add.w	r1, r8, #3
 80078e2:	1b49      	subs	r1, r1, r5
 80078e4:	f021 0103 	bic.w	r1, r1, #3
 80078e8:	3d03      	subs	r5, #3
 80078ea:	45a8      	cmp	r8, r5
 80078ec:	bf38      	it	cc
 80078ee:	2100      	movcc	r1, #0
 80078f0:	440b      	add	r3, r1
 80078f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078f6:	b191      	cbz	r1, 800791e <__mdiff+0x11a>
 80078f8:	6117      	str	r7, [r2, #16]
 80078fa:	e79d      	b.n	8007838 <__mdiff+0x34>
 80078fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007900:	46e6      	mov	lr, ip
 8007902:	0c08      	lsrs	r0, r1, #16
 8007904:	fa1c fc81 	uxtah	ip, ip, r1
 8007908:	4471      	add	r1, lr
 800790a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800790e:	b289      	uxth	r1, r1
 8007910:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007914:	f846 1b04 	str.w	r1, [r6], #4
 8007918:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800791c:	e7dd      	b.n	80078da <__mdiff+0xd6>
 800791e:	3f01      	subs	r7, #1
 8007920:	e7e7      	b.n	80078f2 <__mdiff+0xee>
 8007922:	bf00      	nop
 8007924:	080085f8 	.word	0x080085f8
 8007928:	08008609 	.word	0x08008609

0800792c <__d2b>:
 800792c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007930:	460f      	mov	r7, r1
 8007932:	2101      	movs	r1, #1
 8007934:	ec59 8b10 	vmov	r8, r9, d0
 8007938:	4616      	mov	r6, r2
 800793a:	f7ff fcd5 	bl	80072e8 <_Balloc>
 800793e:	4604      	mov	r4, r0
 8007940:	b930      	cbnz	r0, 8007950 <__d2b+0x24>
 8007942:	4602      	mov	r2, r0
 8007944:	4b23      	ldr	r3, [pc, #140]	@ (80079d4 <__d2b+0xa8>)
 8007946:	4824      	ldr	r0, [pc, #144]	@ (80079d8 <__d2b+0xac>)
 8007948:	f240 310f 	movw	r1, #783	@ 0x30f
 800794c:	f000 fa82 	bl	8007e54 <__assert_func>
 8007950:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007954:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007958:	b10d      	cbz	r5, 800795e <__d2b+0x32>
 800795a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	f1b8 0300 	subs.w	r3, r8, #0
 8007964:	d023      	beq.n	80079ae <__d2b+0x82>
 8007966:	4668      	mov	r0, sp
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	f7ff fd84 	bl	8007476 <__lo0bits>
 800796e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007972:	b1d0      	cbz	r0, 80079aa <__d2b+0x7e>
 8007974:	f1c0 0320 	rsb	r3, r0, #32
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	430b      	orrs	r3, r1
 800797e:	40c2      	lsrs	r2, r0
 8007980:	6163      	str	r3, [r4, #20]
 8007982:	9201      	str	r2, [sp, #4]
 8007984:	9b01      	ldr	r3, [sp, #4]
 8007986:	61a3      	str	r3, [r4, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	bf0c      	ite	eq
 800798c:	2201      	moveq	r2, #1
 800798e:	2202      	movne	r2, #2
 8007990:	6122      	str	r2, [r4, #16]
 8007992:	b1a5      	cbz	r5, 80079be <__d2b+0x92>
 8007994:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007998:	4405      	add	r5, r0
 800799a:	603d      	str	r5, [r7, #0]
 800799c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80079a0:	6030      	str	r0, [r6, #0]
 80079a2:	4620      	mov	r0, r4
 80079a4:	b003      	add	sp, #12
 80079a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079aa:	6161      	str	r1, [r4, #20]
 80079ac:	e7ea      	b.n	8007984 <__d2b+0x58>
 80079ae:	a801      	add	r0, sp, #4
 80079b0:	f7ff fd61 	bl	8007476 <__lo0bits>
 80079b4:	9b01      	ldr	r3, [sp, #4]
 80079b6:	6163      	str	r3, [r4, #20]
 80079b8:	3020      	adds	r0, #32
 80079ba:	2201      	movs	r2, #1
 80079bc:	e7e8      	b.n	8007990 <__d2b+0x64>
 80079be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80079c6:	6038      	str	r0, [r7, #0]
 80079c8:	6918      	ldr	r0, [r3, #16]
 80079ca:	f7ff fd35 	bl	8007438 <__hi0bits>
 80079ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079d2:	e7e5      	b.n	80079a0 <__d2b+0x74>
 80079d4:	080085f8 	.word	0x080085f8
 80079d8:	08008609 	.word	0x08008609

080079dc <__ssputs_r>:
 80079dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	688e      	ldr	r6, [r1, #8]
 80079e2:	461f      	mov	r7, r3
 80079e4:	42be      	cmp	r6, r7
 80079e6:	680b      	ldr	r3, [r1, #0]
 80079e8:	4682      	mov	sl, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	4690      	mov	r8, r2
 80079ee:	d82d      	bhi.n	8007a4c <__ssputs_r+0x70>
 80079f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079f8:	d026      	beq.n	8007a48 <__ssputs_r+0x6c>
 80079fa:	6965      	ldr	r5, [r4, #20]
 80079fc:	6909      	ldr	r1, [r1, #16]
 80079fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a02:	eba3 0901 	sub.w	r9, r3, r1
 8007a06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a0a:	1c7b      	adds	r3, r7, #1
 8007a0c:	444b      	add	r3, r9
 8007a0e:	106d      	asrs	r5, r5, #1
 8007a10:	429d      	cmp	r5, r3
 8007a12:	bf38      	it	cc
 8007a14:	461d      	movcc	r5, r3
 8007a16:	0553      	lsls	r3, r2, #21
 8007a18:	d527      	bpl.n	8007a6a <__ssputs_r+0x8e>
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	f7ff fbd8 	bl	80071d0 <_malloc_r>
 8007a20:	4606      	mov	r6, r0
 8007a22:	b360      	cbz	r0, 8007a7e <__ssputs_r+0xa2>
 8007a24:	6921      	ldr	r1, [r4, #16]
 8007a26:	464a      	mov	r2, r9
 8007a28:	f000 fa06 	bl	8007e38 <memcpy>
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a36:	81a3      	strh	r3, [r4, #12]
 8007a38:	6126      	str	r6, [r4, #16]
 8007a3a:	6165      	str	r5, [r4, #20]
 8007a3c:	444e      	add	r6, r9
 8007a3e:	eba5 0509 	sub.w	r5, r5, r9
 8007a42:	6026      	str	r6, [r4, #0]
 8007a44:	60a5      	str	r5, [r4, #8]
 8007a46:	463e      	mov	r6, r7
 8007a48:	42be      	cmp	r6, r7
 8007a4a:	d900      	bls.n	8007a4e <__ssputs_r+0x72>
 8007a4c:	463e      	mov	r6, r7
 8007a4e:	6820      	ldr	r0, [r4, #0]
 8007a50:	4632      	mov	r2, r6
 8007a52:	4641      	mov	r1, r8
 8007a54:	f000 f9c6 	bl	8007de4 <memmove>
 8007a58:	68a3      	ldr	r3, [r4, #8]
 8007a5a:	1b9b      	subs	r3, r3, r6
 8007a5c:	60a3      	str	r3, [r4, #8]
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	4433      	add	r3, r6
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	2000      	movs	r0, #0
 8007a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6a:	462a      	mov	r2, r5
 8007a6c:	f000 fa36 	bl	8007edc <_realloc_r>
 8007a70:	4606      	mov	r6, r0
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d1e0      	bne.n	8007a38 <__ssputs_r+0x5c>
 8007a76:	6921      	ldr	r1, [r4, #16]
 8007a78:	4650      	mov	r0, sl
 8007a7a:	f7ff fb35 	bl	80070e8 <_free_r>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	f8ca 3000 	str.w	r3, [sl]
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	e7e9      	b.n	8007a66 <__ssputs_r+0x8a>
	...

08007a94 <_svfiprintf_r>:
 8007a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a98:	4698      	mov	r8, r3
 8007a9a:	898b      	ldrh	r3, [r1, #12]
 8007a9c:	061b      	lsls	r3, r3, #24
 8007a9e:	b09d      	sub	sp, #116	@ 0x74
 8007aa0:	4607      	mov	r7, r0
 8007aa2:	460d      	mov	r5, r1
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	d510      	bpl.n	8007aca <_svfiprintf_r+0x36>
 8007aa8:	690b      	ldr	r3, [r1, #16]
 8007aaa:	b973      	cbnz	r3, 8007aca <_svfiprintf_r+0x36>
 8007aac:	2140      	movs	r1, #64	@ 0x40
 8007aae:	f7ff fb8f 	bl	80071d0 <_malloc_r>
 8007ab2:	6028      	str	r0, [r5, #0]
 8007ab4:	6128      	str	r0, [r5, #16]
 8007ab6:	b930      	cbnz	r0, 8007ac6 <_svfiprintf_r+0x32>
 8007ab8:	230c      	movs	r3, #12
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	b01d      	add	sp, #116	@ 0x74
 8007ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac6:	2340      	movs	r3, #64	@ 0x40
 8007ac8:	616b      	str	r3, [r5, #20]
 8007aca:	2300      	movs	r3, #0
 8007acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ace:	2320      	movs	r3, #32
 8007ad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ad8:	2330      	movs	r3, #48	@ 0x30
 8007ada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c78 <_svfiprintf_r+0x1e4>
 8007ade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ae2:	f04f 0901 	mov.w	r9, #1
 8007ae6:	4623      	mov	r3, r4
 8007ae8:	469a      	mov	sl, r3
 8007aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aee:	b10a      	cbz	r2, 8007af4 <_svfiprintf_r+0x60>
 8007af0:	2a25      	cmp	r2, #37	@ 0x25
 8007af2:	d1f9      	bne.n	8007ae8 <_svfiprintf_r+0x54>
 8007af4:	ebba 0b04 	subs.w	fp, sl, r4
 8007af8:	d00b      	beq.n	8007b12 <_svfiprintf_r+0x7e>
 8007afa:	465b      	mov	r3, fp
 8007afc:	4622      	mov	r2, r4
 8007afe:	4629      	mov	r1, r5
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff ff6b 	bl	80079dc <__ssputs_r>
 8007b06:	3001      	adds	r0, #1
 8007b08:	f000 80a7 	beq.w	8007c5a <_svfiprintf_r+0x1c6>
 8007b0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b0e:	445a      	add	r2, fp
 8007b10:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b12:	f89a 3000 	ldrb.w	r3, [sl]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 809f 	beq.w	8007c5a <_svfiprintf_r+0x1c6>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b26:	f10a 0a01 	add.w	sl, sl, #1
 8007b2a:	9304      	str	r3, [sp, #16]
 8007b2c:	9307      	str	r3, [sp, #28]
 8007b2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b32:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b34:	4654      	mov	r4, sl
 8007b36:	2205      	movs	r2, #5
 8007b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3c:	484e      	ldr	r0, [pc, #312]	@ (8007c78 <_svfiprintf_r+0x1e4>)
 8007b3e:	f7f8 fb6f 	bl	8000220 <memchr>
 8007b42:	9a04      	ldr	r2, [sp, #16]
 8007b44:	b9d8      	cbnz	r0, 8007b7e <_svfiprintf_r+0xea>
 8007b46:	06d0      	lsls	r0, r2, #27
 8007b48:	bf44      	itt	mi
 8007b4a:	2320      	movmi	r3, #32
 8007b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b50:	0711      	lsls	r1, r2, #28
 8007b52:	bf44      	itt	mi
 8007b54:	232b      	movmi	r3, #43	@ 0x2b
 8007b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b60:	d015      	beq.n	8007b8e <_svfiprintf_r+0xfa>
 8007b62:	9a07      	ldr	r2, [sp, #28]
 8007b64:	4654      	mov	r4, sl
 8007b66:	2000      	movs	r0, #0
 8007b68:	f04f 0c0a 	mov.w	ip, #10
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b72:	3b30      	subs	r3, #48	@ 0x30
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	d94b      	bls.n	8007c10 <_svfiprintf_r+0x17c>
 8007b78:	b1b0      	cbz	r0, 8007ba8 <_svfiprintf_r+0x114>
 8007b7a:	9207      	str	r2, [sp, #28]
 8007b7c:	e014      	b.n	8007ba8 <_svfiprintf_r+0x114>
 8007b7e:	eba0 0308 	sub.w	r3, r0, r8
 8007b82:	fa09 f303 	lsl.w	r3, r9, r3
 8007b86:	4313      	orrs	r3, r2
 8007b88:	9304      	str	r3, [sp, #16]
 8007b8a:	46a2      	mov	sl, r4
 8007b8c:	e7d2      	b.n	8007b34 <_svfiprintf_r+0xa0>
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	1d19      	adds	r1, r3, #4
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	9103      	str	r1, [sp, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfbb      	ittet	lt
 8007b9a:	425b      	neglt	r3, r3
 8007b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba0:	9307      	strge	r3, [sp, #28]
 8007ba2:	9307      	strlt	r3, [sp, #28]
 8007ba4:	bfb8      	it	lt
 8007ba6:	9204      	strlt	r2, [sp, #16]
 8007ba8:	7823      	ldrb	r3, [r4, #0]
 8007baa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bac:	d10a      	bne.n	8007bc4 <_svfiprintf_r+0x130>
 8007bae:	7863      	ldrb	r3, [r4, #1]
 8007bb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bb2:	d132      	bne.n	8007c1a <_svfiprintf_r+0x186>
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	1d1a      	adds	r2, r3, #4
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	9203      	str	r2, [sp, #12]
 8007bbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bc0:	3402      	adds	r4, #2
 8007bc2:	9305      	str	r3, [sp, #20]
 8007bc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c88 <_svfiprintf_r+0x1f4>
 8007bc8:	7821      	ldrb	r1, [r4, #0]
 8007bca:	2203      	movs	r2, #3
 8007bcc:	4650      	mov	r0, sl
 8007bce:	f7f8 fb27 	bl	8000220 <memchr>
 8007bd2:	b138      	cbz	r0, 8007be4 <_svfiprintf_r+0x150>
 8007bd4:	9b04      	ldr	r3, [sp, #16]
 8007bd6:	eba0 000a 	sub.w	r0, r0, sl
 8007bda:	2240      	movs	r2, #64	@ 0x40
 8007bdc:	4082      	lsls	r2, r0
 8007bde:	4313      	orrs	r3, r2
 8007be0:	3401      	adds	r4, #1
 8007be2:	9304      	str	r3, [sp, #16]
 8007be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be8:	4824      	ldr	r0, [pc, #144]	@ (8007c7c <_svfiprintf_r+0x1e8>)
 8007bea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bee:	2206      	movs	r2, #6
 8007bf0:	f7f8 fb16 	bl	8000220 <memchr>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d036      	beq.n	8007c66 <_svfiprintf_r+0x1d2>
 8007bf8:	4b21      	ldr	r3, [pc, #132]	@ (8007c80 <_svfiprintf_r+0x1ec>)
 8007bfa:	bb1b      	cbnz	r3, 8007c44 <_svfiprintf_r+0x1b0>
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	3307      	adds	r3, #7
 8007c00:	f023 0307 	bic.w	r3, r3, #7
 8007c04:	3308      	adds	r3, #8
 8007c06:	9303      	str	r3, [sp, #12]
 8007c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c0a:	4433      	add	r3, r6
 8007c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c0e:	e76a      	b.n	8007ae6 <_svfiprintf_r+0x52>
 8007c10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c14:	460c      	mov	r4, r1
 8007c16:	2001      	movs	r0, #1
 8007c18:	e7a8      	b.n	8007b6c <_svfiprintf_r+0xd8>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	3401      	adds	r4, #1
 8007c1e:	9305      	str	r3, [sp, #20]
 8007c20:	4619      	mov	r1, r3
 8007c22:	f04f 0c0a 	mov.w	ip, #10
 8007c26:	4620      	mov	r0, r4
 8007c28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c2c:	3a30      	subs	r2, #48	@ 0x30
 8007c2e:	2a09      	cmp	r2, #9
 8007c30:	d903      	bls.n	8007c3a <_svfiprintf_r+0x1a6>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0c6      	beq.n	8007bc4 <_svfiprintf_r+0x130>
 8007c36:	9105      	str	r1, [sp, #20]
 8007c38:	e7c4      	b.n	8007bc4 <_svfiprintf_r+0x130>
 8007c3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c3e:	4604      	mov	r4, r0
 8007c40:	2301      	movs	r3, #1
 8007c42:	e7f0      	b.n	8007c26 <_svfiprintf_r+0x192>
 8007c44:	ab03      	add	r3, sp, #12
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	462a      	mov	r2, r5
 8007c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c84 <_svfiprintf_r+0x1f0>)
 8007c4c:	a904      	add	r1, sp, #16
 8007c4e:	4638      	mov	r0, r7
 8007c50:	f7fd fe94 	bl	800597c <_printf_float>
 8007c54:	1c42      	adds	r2, r0, #1
 8007c56:	4606      	mov	r6, r0
 8007c58:	d1d6      	bne.n	8007c08 <_svfiprintf_r+0x174>
 8007c5a:	89ab      	ldrh	r3, [r5, #12]
 8007c5c:	065b      	lsls	r3, r3, #25
 8007c5e:	f53f af2d 	bmi.w	8007abc <_svfiprintf_r+0x28>
 8007c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c64:	e72c      	b.n	8007ac0 <_svfiprintf_r+0x2c>
 8007c66:	ab03      	add	r3, sp, #12
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	462a      	mov	r2, r5
 8007c6c:	4b05      	ldr	r3, [pc, #20]	@ (8007c84 <_svfiprintf_r+0x1f0>)
 8007c6e:	a904      	add	r1, sp, #16
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7fe f91b 	bl	8005eac <_printf_i>
 8007c76:	e7ed      	b.n	8007c54 <_svfiprintf_r+0x1c0>
 8007c78:	08008662 	.word	0x08008662
 8007c7c:	0800866c 	.word	0x0800866c
 8007c80:	0800597d 	.word	0x0800597d
 8007c84:	080079dd 	.word	0x080079dd
 8007c88:	08008668 	.word	0x08008668

08007c8c <__sflush_r>:
 8007c8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c94:	0716      	lsls	r6, r2, #28
 8007c96:	4605      	mov	r5, r0
 8007c98:	460c      	mov	r4, r1
 8007c9a:	d454      	bmi.n	8007d46 <__sflush_r+0xba>
 8007c9c:	684b      	ldr	r3, [r1, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	dc02      	bgt.n	8007ca8 <__sflush_r+0x1c>
 8007ca2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dd48      	ble.n	8007d3a <__sflush_r+0xae>
 8007ca8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	d045      	beq.n	8007d3a <__sflush_r+0xae>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007cb4:	682f      	ldr	r7, [r5, #0]
 8007cb6:	6a21      	ldr	r1, [r4, #32]
 8007cb8:	602b      	str	r3, [r5, #0]
 8007cba:	d030      	beq.n	8007d1e <__sflush_r+0x92>
 8007cbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	0759      	lsls	r1, r3, #29
 8007cc2:	d505      	bpl.n	8007cd0 <__sflush_r+0x44>
 8007cc4:	6863      	ldr	r3, [r4, #4]
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cca:	b10b      	cbz	r3, 8007cd0 <__sflush_r+0x44>
 8007ccc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cce:	1ad2      	subs	r2, r2, r3
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cd4:	6a21      	ldr	r1, [r4, #32]
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	47b0      	blx	r6
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	d106      	bne.n	8007cee <__sflush_r+0x62>
 8007ce0:	6829      	ldr	r1, [r5, #0]
 8007ce2:	291d      	cmp	r1, #29
 8007ce4:	d82b      	bhi.n	8007d3e <__sflush_r+0xb2>
 8007ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d90 <__sflush_r+0x104>)
 8007ce8:	40ca      	lsrs	r2, r1
 8007cea:	07d6      	lsls	r6, r2, #31
 8007cec:	d527      	bpl.n	8007d3e <__sflush_r+0xb2>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	6062      	str	r2, [r4, #4]
 8007cf2:	04d9      	lsls	r1, r3, #19
 8007cf4:	6922      	ldr	r2, [r4, #16]
 8007cf6:	6022      	str	r2, [r4, #0]
 8007cf8:	d504      	bpl.n	8007d04 <__sflush_r+0x78>
 8007cfa:	1c42      	adds	r2, r0, #1
 8007cfc:	d101      	bne.n	8007d02 <__sflush_r+0x76>
 8007cfe:	682b      	ldr	r3, [r5, #0]
 8007d00:	b903      	cbnz	r3, 8007d04 <__sflush_r+0x78>
 8007d02:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d06:	602f      	str	r7, [r5, #0]
 8007d08:	b1b9      	cbz	r1, 8007d3a <__sflush_r+0xae>
 8007d0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d0e:	4299      	cmp	r1, r3
 8007d10:	d002      	beq.n	8007d18 <__sflush_r+0x8c>
 8007d12:	4628      	mov	r0, r5
 8007d14:	f7ff f9e8 	bl	80070e8 <_free_r>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d1c:	e00d      	b.n	8007d3a <__sflush_r+0xae>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b0      	blx	r6
 8007d24:	4602      	mov	r2, r0
 8007d26:	1c50      	adds	r0, r2, #1
 8007d28:	d1c9      	bne.n	8007cbe <__sflush_r+0x32>
 8007d2a:	682b      	ldr	r3, [r5, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0c6      	beq.n	8007cbe <__sflush_r+0x32>
 8007d30:	2b1d      	cmp	r3, #29
 8007d32:	d001      	beq.n	8007d38 <__sflush_r+0xac>
 8007d34:	2b16      	cmp	r3, #22
 8007d36:	d11e      	bne.n	8007d76 <__sflush_r+0xea>
 8007d38:	602f      	str	r7, [r5, #0]
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e022      	b.n	8007d84 <__sflush_r+0xf8>
 8007d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d42:	b21b      	sxth	r3, r3
 8007d44:	e01b      	b.n	8007d7e <__sflush_r+0xf2>
 8007d46:	690f      	ldr	r7, [r1, #16]
 8007d48:	2f00      	cmp	r7, #0
 8007d4a:	d0f6      	beq.n	8007d3a <__sflush_r+0xae>
 8007d4c:	0793      	lsls	r3, r2, #30
 8007d4e:	680e      	ldr	r6, [r1, #0]
 8007d50:	bf08      	it	eq
 8007d52:	694b      	ldreq	r3, [r1, #20]
 8007d54:	600f      	str	r7, [r1, #0]
 8007d56:	bf18      	it	ne
 8007d58:	2300      	movne	r3, #0
 8007d5a:	eba6 0807 	sub.w	r8, r6, r7
 8007d5e:	608b      	str	r3, [r1, #8]
 8007d60:	f1b8 0f00 	cmp.w	r8, #0
 8007d64:	dde9      	ble.n	8007d3a <__sflush_r+0xae>
 8007d66:	6a21      	ldr	r1, [r4, #32]
 8007d68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d6a:	4643      	mov	r3, r8
 8007d6c:	463a      	mov	r2, r7
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b0      	blx	r6
 8007d72:	2800      	cmp	r0, #0
 8007d74:	dc08      	bgt.n	8007d88 <__sflush_r+0xfc>
 8007d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d7e:	81a3      	strh	r3, [r4, #12]
 8007d80:	f04f 30ff 	mov.w	r0, #4294967295
 8007d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d88:	4407      	add	r7, r0
 8007d8a:	eba8 0800 	sub.w	r8, r8, r0
 8007d8e:	e7e7      	b.n	8007d60 <__sflush_r+0xd4>
 8007d90:	20400001 	.word	0x20400001

08007d94 <_fflush_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	690b      	ldr	r3, [r1, #16]
 8007d98:	4605      	mov	r5, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	b913      	cbnz	r3, 8007da4 <_fflush_r+0x10>
 8007d9e:	2500      	movs	r5, #0
 8007da0:	4628      	mov	r0, r5
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	b118      	cbz	r0, 8007dae <_fflush_r+0x1a>
 8007da6:	6a03      	ldr	r3, [r0, #32]
 8007da8:	b90b      	cbnz	r3, 8007dae <_fflush_r+0x1a>
 8007daa:	f7fe fa29 	bl	8006200 <__sinit>
 8007dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0f3      	beq.n	8007d9e <_fflush_r+0xa>
 8007db6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007db8:	07d0      	lsls	r0, r2, #31
 8007dba:	d404      	bmi.n	8007dc6 <_fflush_r+0x32>
 8007dbc:	0599      	lsls	r1, r3, #22
 8007dbe:	d402      	bmi.n	8007dc6 <_fflush_r+0x32>
 8007dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dc2:	f7fe fb36 	bl	8006432 <__retarget_lock_acquire_recursive>
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	4621      	mov	r1, r4
 8007dca:	f7ff ff5f 	bl	8007c8c <__sflush_r>
 8007dce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dd0:	07da      	lsls	r2, r3, #31
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	d4e4      	bmi.n	8007da0 <_fflush_r+0xc>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	059b      	lsls	r3, r3, #22
 8007dda:	d4e1      	bmi.n	8007da0 <_fflush_r+0xc>
 8007ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dde:	f7fe fb29 	bl	8006434 <__retarget_lock_release_recursive>
 8007de2:	e7dd      	b.n	8007da0 <_fflush_r+0xc>

08007de4 <memmove>:
 8007de4:	4288      	cmp	r0, r1
 8007de6:	b510      	push	{r4, lr}
 8007de8:	eb01 0402 	add.w	r4, r1, r2
 8007dec:	d902      	bls.n	8007df4 <memmove+0x10>
 8007dee:	4284      	cmp	r4, r0
 8007df0:	4623      	mov	r3, r4
 8007df2:	d807      	bhi.n	8007e04 <memmove+0x20>
 8007df4:	1e43      	subs	r3, r0, #1
 8007df6:	42a1      	cmp	r1, r4
 8007df8:	d008      	beq.n	8007e0c <memmove+0x28>
 8007dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e02:	e7f8      	b.n	8007df6 <memmove+0x12>
 8007e04:	4402      	add	r2, r0
 8007e06:	4601      	mov	r1, r0
 8007e08:	428a      	cmp	r2, r1
 8007e0a:	d100      	bne.n	8007e0e <memmove+0x2a>
 8007e0c:	bd10      	pop	{r4, pc}
 8007e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e16:	e7f7      	b.n	8007e08 <memmove+0x24>

08007e18 <_sbrk_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4d06      	ldr	r5, [pc, #24]	@ (8007e34 <_sbrk_r+0x1c>)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4604      	mov	r4, r0
 8007e20:	4608      	mov	r0, r1
 8007e22:	602b      	str	r3, [r5, #0]
 8007e24:	f7f9 fcaa 	bl	800177c <_sbrk>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d102      	bne.n	8007e32 <_sbrk_r+0x1a>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	b103      	cbz	r3, 8007e32 <_sbrk_r+0x1a>
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	200004bc 	.word	0x200004bc

08007e38 <memcpy>:
 8007e38:	440a      	add	r2, r1
 8007e3a:	4291      	cmp	r1, r2
 8007e3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e40:	d100      	bne.n	8007e44 <memcpy+0xc>
 8007e42:	4770      	bx	lr
 8007e44:	b510      	push	{r4, lr}
 8007e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e4e:	4291      	cmp	r1, r2
 8007e50:	d1f9      	bne.n	8007e46 <memcpy+0xe>
 8007e52:	bd10      	pop	{r4, pc}

08007e54 <__assert_func>:
 8007e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e56:	4614      	mov	r4, r2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4b09      	ldr	r3, [pc, #36]	@ (8007e80 <__assert_func+0x2c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4605      	mov	r5, r0
 8007e60:	68d8      	ldr	r0, [r3, #12]
 8007e62:	b14c      	cbz	r4, 8007e78 <__assert_func+0x24>
 8007e64:	4b07      	ldr	r3, [pc, #28]	@ (8007e84 <__assert_func+0x30>)
 8007e66:	9100      	str	r1, [sp, #0]
 8007e68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e6c:	4906      	ldr	r1, [pc, #24]	@ (8007e88 <__assert_func+0x34>)
 8007e6e:	462b      	mov	r3, r5
 8007e70:	f000 f870 	bl	8007f54 <fiprintf>
 8007e74:	f000 f880 	bl	8007f78 <abort>
 8007e78:	4b04      	ldr	r3, [pc, #16]	@ (8007e8c <__assert_func+0x38>)
 8007e7a:	461c      	mov	r4, r3
 8007e7c:	e7f3      	b.n	8007e66 <__assert_func+0x12>
 8007e7e:	bf00      	nop
 8007e80:	20000018 	.word	0x20000018
 8007e84:	0800867d 	.word	0x0800867d
 8007e88:	0800868a 	.word	0x0800868a
 8007e8c:	080086b8 	.word	0x080086b8

08007e90 <_calloc_r>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	fba1 5402 	umull	r5, r4, r1, r2
 8007e96:	b934      	cbnz	r4, 8007ea6 <_calloc_r+0x16>
 8007e98:	4629      	mov	r1, r5
 8007e9a:	f7ff f999 	bl	80071d0 <_malloc_r>
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	b928      	cbnz	r0, 8007eae <_calloc_r+0x1e>
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
 8007ea6:	220c      	movs	r2, #12
 8007ea8:	6002      	str	r2, [r0, #0]
 8007eaa:	2600      	movs	r6, #0
 8007eac:	e7f9      	b.n	8007ea2 <_calloc_r+0x12>
 8007eae:	462a      	mov	r2, r5
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	f7fe fa40 	bl	8006336 <memset>
 8007eb6:	e7f4      	b.n	8007ea2 <_calloc_r+0x12>

08007eb8 <__ascii_mbtowc>:
 8007eb8:	b082      	sub	sp, #8
 8007eba:	b901      	cbnz	r1, 8007ebe <__ascii_mbtowc+0x6>
 8007ebc:	a901      	add	r1, sp, #4
 8007ebe:	b142      	cbz	r2, 8007ed2 <__ascii_mbtowc+0x1a>
 8007ec0:	b14b      	cbz	r3, 8007ed6 <__ascii_mbtowc+0x1e>
 8007ec2:	7813      	ldrb	r3, [r2, #0]
 8007ec4:	600b      	str	r3, [r1, #0]
 8007ec6:	7812      	ldrb	r2, [r2, #0]
 8007ec8:	1e10      	subs	r0, r2, #0
 8007eca:	bf18      	it	ne
 8007ecc:	2001      	movne	r0, #1
 8007ece:	b002      	add	sp, #8
 8007ed0:	4770      	bx	lr
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	e7fb      	b.n	8007ece <__ascii_mbtowc+0x16>
 8007ed6:	f06f 0001 	mvn.w	r0, #1
 8007eda:	e7f8      	b.n	8007ece <__ascii_mbtowc+0x16>

08007edc <_realloc_r>:
 8007edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee0:	4607      	mov	r7, r0
 8007ee2:	4614      	mov	r4, r2
 8007ee4:	460d      	mov	r5, r1
 8007ee6:	b921      	cbnz	r1, 8007ef2 <_realloc_r+0x16>
 8007ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eec:	4611      	mov	r1, r2
 8007eee:	f7ff b96f 	b.w	80071d0 <_malloc_r>
 8007ef2:	b92a      	cbnz	r2, 8007f00 <_realloc_r+0x24>
 8007ef4:	f7ff f8f8 	bl	80070e8 <_free_r>
 8007ef8:	4625      	mov	r5, r4
 8007efa:	4628      	mov	r0, r5
 8007efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f00:	f000 f841 	bl	8007f86 <_malloc_usable_size_r>
 8007f04:	4284      	cmp	r4, r0
 8007f06:	4606      	mov	r6, r0
 8007f08:	d802      	bhi.n	8007f10 <_realloc_r+0x34>
 8007f0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f0e:	d8f4      	bhi.n	8007efa <_realloc_r+0x1e>
 8007f10:	4621      	mov	r1, r4
 8007f12:	4638      	mov	r0, r7
 8007f14:	f7ff f95c 	bl	80071d0 <_malloc_r>
 8007f18:	4680      	mov	r8, r0
 8007f1a:	b908      	cbnz	r0, 8007f20 <_realloc_r+0x44>
 8007f1c:	4645      	mov	r5, r8
 8007f1e:	e7ec      	b.n	8007efa <_realloc_r+0x1e>
 8007f20:	42b4      	cmp	r4, r6
 8007f22:	4622      	mov	r2, r4
 8007f24:	4629      	mov	r1, r5
 8007f26:	bf28      	it	cs
 8007f28:	4632      	movcs	r2, r6
 8007f2a:	f7ff ff85 	bl	8007e38 <memcpy>
 8007f2e:	4629      	mov	r1, r5
 8007f30:	4638      	mov	r0, r7
 8007f32:	f7ff f8d9 	bl	80070e8 <_free_r>
 8007f36:	e7f1      	b.n	8007f1c <_realloc_r+0x40>

08007f38 <__ascii_wctomb>:
 8007f38:	4603      	mov	r3, r0
 8007f3a:	4608      	mov	r0, r1
 8007f3c:	b141      	cbz	r1, 8007f50 <__ascii_wctomb+0x18>
 8007f3e:	2aff      	cmp	r2, #255	@ 0xff
 8007f40:	d904      	bls.n	8007f4c <__ascii_wctomb+0x14>
 8007f42:	228a      	movs	r2, #138	@ 0x8a
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4a:	4770      	bx	lr
 8007f4c:	700a      	strb	r2, [r1, #0]
 8007f4e:	2001      	movs	r0, #1
 8007f50:	4770      	bx	lr
	...

08007f54 <fiprintf>:
 8007f54:	b40e      	push	{r1, r2, r3}
 8007f56:	b503      	push	{r0, r1, lr}
 8007f58:	4601      	mov	r1, r0
 8007f5a:	ab03      	add	r3, sp, #12
 8007f5c:	4805      	ldr	r0, [pc, #20]	@ (8007f74 <fiprintf+0x20>)
 8007f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f62:	6800      	ldr	r0, [r0, #0]
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	f000 f83f 	bl	8007fe8 <_vfiprintf_r>
 8007f6a:	b002      	add	sp, #8
 8007f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f70:	b003      	add	sp, #12
 8007f72:	4770      	bx	lr
 8007f74:	20000018 	.word	0x20000018

08007f78 <abort>:
 8007f78:	b508      	push	{r3, lr}
 8007f7a:	2006      	movs	r0, #6
 8007f7c:	f000 fa08 	bl	8008390 <raise>
 8007f80:	2001      	movs	r0, #1
 8007f82:	f7f9 fb83 	bl	800168c <_exit>

08007f86 <_malloc_usable_size_r>:
 8007f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f8a:	1f18      	subs	r0, r3, #4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bfbc      	itt	lt
 8007f90:	580b      	ldrlt	r3, [r1, r0]
 8007f92:	18c0      	addlt	r0, r0, r3
 8007f94:	4770      	bx	lr

08007f96 <__sfputc_r>:
 8007f96:	6893      	ldr	r3, [r2, #8]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	b410      	push	{r4}
 8007f9e:	6093      	str	r3, [r2, #8]
 8007fa0:	da08      	bge.n	8007fb4 <__sfputc_r+0x1e>
 8007fa2:	6994      	ldr	r4, [r2, #24]
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	db01      	blt.n	8007fac <__sfputc_r+0x16>
 8007fa8:	290a      	cmp	r1, #10
 8007faa:	d103      	bne.n	8007fb4 <__sfputc_r+0x1e>
 8007fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fb0:	f000 b932 	b.w	8008218 <__swbuf_r>
 8007fb4:	6813      	ldr	r3, [r2, #0]
 8007fb6:	1c58      	adds	r0, r3, #1
 8007fb8:	6010      	str	r0, [r2, #0]
 8007fba:	7019      	strb	r1, [r3, #0]
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <__sfputs_r>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	460f      	mov	r7, r1
 8007fca:	4614      	mov	r4, r2
 8007fcc:	18d5      	adds	r5, r2, r3
 8007fce:	42ac      	cmp	r4, r5
 8007fd0:	d101      	bne.n	8007fd6 <__sfputs_r+0x12>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e007      	b.n	8007fe6 <__sfputs_r+0x22>
 8007fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fda:	463a      	mov	r2, r7
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f7ff ffda 	bl	8007f96 <__sfputc_r>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d1f3      	bne.n	8007fce <__sfputs_r+0xa>
 8007fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fe8 <_vfiprintf_r>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	460d      	mov	r5, r1
 8007fee:	b09d      	sub	sp, #116	@ 0x74
 8007ff0:	4614      	mov	r4, r2
 8007ff2:	4698      	mov	r8, r3
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	b118      	cbz	r0, 8008000 <_vfiprintf_r+0x18>
 8007ff8:	6a03      	ldr	r3, [r0, #32]
 8007ffa:	b90b      	cbnz	r3, 8008000 <_vfiprintf_r+0x18>
 8007ffc:	f7fe f900 	bl	8006200 <__sinit>
 8008000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008002:	07d9      	lsls	r1, r3, #31
 8008004:	d405      	bmi.n	8008012 <_vfiprintf_r+0x2a>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	059a      	lsls	r2, r3, #22
 800800a:	d402      	bmi.n	8008012 <_vfiprintf_r+0x2a>
 800800c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800800e:	f7fe fa10 	bl	8006432 <__retarget_lock_acquire_recursive>
 8008012:	89ab      	ldrh	r3, [r5, #12]
 8008014:	071b      	lsls	r3, r3, #28
 8008016:	d501      	bpl.n	800801c <_vfiprintf_r+0x34>
 8008018:	692b      	ldr	r3, [r5, #16]
 800801a:	b99b      	cbnz	r3, 8008044 <_vfiprintf_r+0x5c>
 800801c:	4629      	mov	r1, r5
 800801e:	4630      	mov	r0, r6
 8008020:	f000 f938 	bl	8008294 <__swsetup_r>
 8008024:	b170      	cbz	r0, 8008044 <_vfiprintf_r+0x5c>
 8008026:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008028:	07dc      	lsls	r4, r3, #31
 800802a:	d504      	bpl.n	8008036 <_vfiprintf_r+0x4e>
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
 8008030:	b01d      	add	sp, #116	@ 0x74
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	0598      	lsls	r0, r3, #22
 800803a:	d4f7      	bmi.n	800802c <_vfiprintf_r+0x44>
 800803c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800803e:	f7fe f9f9 	bl	8006434 <__retarget_lock_release_recursive>
 8008042:	e7f3      	b.n	800802c <_vfiprintf_r+0x44>
 8008044:	2300      	movs	r3, #0
 8008046:	9309      	str	r3, [sp, #36]	@ 0x24
 8008048:	2320      	movs	r3, #32
 800804a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800804e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008052:	2330      	movs	r3, #48	@ 0x30
 8008054:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008204 <_vfiprintf_r+0x21c>
 8008058:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800805c:	f04f 0901 	mov.w	r9, #1
 8008060:	4623      	mov	r3, r4
 8008062:	469a      	mov	sl, r3
 8008064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008068:	b10a      	cbz	r2, 800806e <_vfiprintf_r+0x86>
 800806a:	2a25      	cmp	r2, #37	@ 0x25
 800806c:	d1f9      	bne.n	8008062 <_vfiprintf_r+0x7a>
 800806e:	ebba 0b04 	subs.w	fp, sl, r4
 8008072:	d00b      	beq.n	800808c <_vfiprintf_r+0xa4>
 8008074:	465b      	mov	r3, fp
 8008076:	4622      	mov	r2, r4
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff ffa2 	bl	8007fc4 <__sfputs_r>
 8008080:	3001      	adds	r0, #1
 8008082:	f000 80a7 	beq.w	80081d4 <_vfiprintf_r+0x1ec>
 8008086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008088:	445a      	add	r2, fp
 800808a:	9209      	str	r2, [sp, #36]	@ 0x24
 800808c:	f89a 3000 	ldrb.w	r3, [sl]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 809f 	beq.w	80081d4 <_vfiprintf_r+0x1ec>
 8008096:	2300      	movs	r3, #0
 8008098:	f04f 32ff 	mov.w	r2, #4294967295
 800809c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080a0:	f10a 0a01 	add.w	sl, sl, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	9307      	str	r3, [sp, #28]
 80080a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80080ae:	4654      	mov	r4, sl
 80080b0:	2205      	movs	r2, #5
 80080b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b6:	4853      	ldr	r0, [pc, #332]	@ (8008204 <_vfiprintf_r+0x21c>)
 80080b8:	f7f8 f8b2 	bl	8000220 <memchr>
 80080bc:	9a04      	ldr	r2, [sp, #16]
 80080be:	b9d8      	cbnz	r0, 80080f8 <_vfiprintf_r+0x110>
 80080c0:	06d1      	lsls	r1, r2, #27
 80080c2:	bf44      	itt	mi
 80080c4:	2320      	movmi	r3, #32
 80080c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ca:	0713      	lsls	r3, r2, #28
 80080cc:	bf44      	itt	mi
 80080ce:	232b      	movmi	r3, #43	@ 0x2b
 80080d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080d4:	f89a 3000 	ldrb.w	r3, [sl]
 80080d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080da:	d015      	beq.n	8008108 <_vfiprintf_r+0x120>
 80080dc:	9a07      	ldr	r2, [sp, #28]
 80080de:	4654      	mov	r4, sl
 80080e0:	2000      	movs	r0, #0
 80080e2:	f04f 0c0a 	mov.w	ip, #10
 80080e6:	4621      	mov	r1, r4
 80080e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ec:	3b30      	subs	r3, #48	@ 0x30
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d94b      	bls.n	800818a <_vfiprintf_r+0x1a2>
 80080f2:	b1b0      	cbz	r0, 8008122 <_vfiprintf_r+0x13a>
 80080f4:	9207      	str	r2, [sp, #28]
 80080f6:	e014      	b.n	8008122 <_vfiprintf_r+0x13a>
 80080f8:	eba0 0308 	sub.w	r3, r0, r8
 80080fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008100:	4313      	orrs	r3, r2
 8008102:	9304      	str	r3, [sp, #16]
 8008104:	46a2      	mov	sl, r4
 8008106:	e7d2      	b.n	80080ae <_vfiprintf_r+0xc6>
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	1d19      	adds	r1, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9103      	str	r1, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfbb      	ittet	lt
 8008114:	425b      	neglt	r3, r3
 8008116:	f042 0202 	orrlt.w	r2, r2, #2
 800811a:	9307      	strge	r3, [sp, #28]
 800811c:	9307      	strlt	r3, [sp, #28]
 800811e:	bfb8      	it	lt
 8008120:	9204      	strlt	r2, [sp, #16]
 8008122:	7823      	ldrb	r3, [r4, #0]
 8008124:	2b2e      	cmp	r3, #46	@ 0x2e
 8008126:	d10a      	bne.n	800813e <_vfiprintf_r+0x156>
 8008128:	7863      	ldrb	r3, [r4, #1]
 800812a:	2b2a      	cmp	r3, #42	@ 0x2a
 800812c:	d132      	bne.n	8008194 <_vfiprintf_r+0x1ac>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	1d1a      	adds	r2, r3, #4
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	9203      	str	r2, [sp, #12]
 8008136:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800813a:	3402      	adds	r4, #2
 800813c:	9305      	str	r3, [sp, #20]
 800813e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008214 <_vfiprintf_r+0x22c>
 8008142:	7821      	ldrb	r1, [r4, #0]
 8008144:	2203      	movs	r2, #3
 8008146:	4650      	mov	r0, sl
 8008148:	f7f8 f86a 	bl	8000220 <memchr>
 800814c:	b138      	cbz	r0, 800815e <_vfiprintf_r+0x176>
 800814e:	9b04      	ldr	r3, [sp, #16]
 8008150:	eba0 000a 	sub.w	r0, r0, sl
 8008154:	2240      	movs	r2, #64	@ 0x40
 8008156:	4082      	lsls	r2, r0
 8008158:	4313      	orrs	r3, r2
 800815a:	3401      	adds	r4, #1
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008162:	4829      	ldr	r0, [pc, #164]	@ (8008208 <_vfiprintf_r+0x220>)
 8008164:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008168:	2206      	movs	r2, #6
 800816a:	f7f8 f859 	bl	8000220 <memchr>
 800816e:	2800      	cmp	r0, #0
 8008170:	d03f      	beq.n	80081f2 <_vfiprintf_r+0x20a>
 8008172:	4b26      	ldr	r3, [pc, #152]	@ (800820c <_vfiprintf_r+0x224>)
 8008174:	bb1b      	cbnz	r3, 80081be <_vfiprintf_r+0x1d6>
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	3307      	adds	r3, #7
 800817a:	f023 0307 	bic.w	r3, r3, #7
 800817e:	3308      	adds	r3, #8
 8008180:	9303      	str	r3, [sp, #12]
 8008182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008184:	443b      	add	r3, r7
 8008186:	9309      	str	r3, [sp, #36]	@ 0x24
 8008188:	e76a      	b.n	8008060 <_vfiprintf_r+0x78>
 800818a:	fb0c 3202 	mla	r2, ip, r2, r3
 800818e:	460c      	mov	r4, r1
 8008190:	2001      	movs	r0, #1
 8008192:	e7a8      	b.n	80080e6 <_vfiprintf_r+0xfe>
 8008194:	2300      	movs	r3, #0
 8008196:	3401      	adds	r4, #1
 8008198:	9305      	str	r3, [sp, #20]
 800819a:	4619      	mov	r1, r3
 800819c:	f04f 0c0a 	mov.w	ip, #10
 80081a0:	4620      	mov	r0, r4
 80081a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a6:	3a30      	subs	r2, #48	@ 0x30
 80081a8:	2a09      	cmp	r2, #9
 80081aa:	d903      	bls.n	80081b4 <_vfiprintf_r+0x1cc>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0c6      	beq.n	800813e <_vfiprintf_r+0x156>
 80081b0:	9105      	str	r1, [sp, #20]
 80081b2:	e7c4      	b.n	800813e <_vfiprintf_r+0x156>
 80081b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b8:	4604      	mov	r4, r0
 80081ba:	2301      	movs	r3, #1
 80081bc:	e7f0      	b.n	80081a0 <_vfiprintf_r+0x1b8>
 80081be:	ab03      	add	r3, sp, #12
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	462a      	mov	r2, r5
 80081c4:	4b12      	ldr	r3, [pc, #72]	@ (8008210 <_vfiprintf_r+0x228>)
 80081c6:	a904      	add	r1, sp, #16
 80081c8:	4630      	mov	r0, r6
 80081ca:	f7fd fbd7 	bl	800597c <_printf_float>
 80081ce:	4607      	mov	r7, r0
 80081d0:	1c78      	adds	r0, r7, #1
 80081d2:	d1d6      	bne.n	8008182 <_vfiprintf_r+0x19a>
 80081d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081d6:	07d9      	lsls	r1, r3, #31
 80081d8:	d405      	bmi.n	80081e6 <_vfiprintf_r+0x1fe>
 80081da:	89ab      	ldrh	r3, [r5, #12]
 80081dc:	059a      	lsls	r2, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_vfiprintf_r+0x1fe>
 80081e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081e2:	f7fe f927 	bl	8006434 <__retarget_lock_release_recursive>
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	065b      	lsls	r3, r3, #25
 80081ea:	f53f af1f 	bmi.w	800802c <_vfiprintf_r+0x44>
 80081ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081f0:	e71e      	b.n	8008030 <_vfiprintf_r+0x48>
 80081f2:	ab03      	add	r3, sp, #12
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	462a      	mov	r2, r5
 80081f8:	4b05      	ldr	r3, [pc, #20]	@ (8008210 <_vfiprintf_r+0x228>)
 80081fa:	a904      	add	r1, sp, #16
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7fd fe55 	bl	8005eac <_printf_i>
 8008202:	e7e4      	b.n	80081ce <_vfiprintf_r+0x1e6>
 8008204:	08008662 	.word	0x08008662
 8008208:	0800866c 	.word	0x0800866c
 800820c:	0800597d 	.word	0x0800597d
 8008210:	08007fc5 	.word	0x08007fc5
 8008214:	08008668 	.word	0x08008668

08008218 <__swbuf_r>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	460e      	mov	r6, r1
 800821c:	4614      	mov	r4, r2
 800821e:	4605      	mov	r5, r0
 8008220:	b118      	cbz	r0, 800822a <__swbuf_r+0x12>
 8008222:	6a03      	ldr	r3, [r0, #32]
 8008224:	b90b      	cbnz	r3, 800822a <__swbuf_r+0x12>
 8008226:	f7fd ffeb 	bl	8006200 <__sinit>
 800822a:	69a3      	ldr	r3, [r4, #24]
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	071a      	lsls	r2, r3, #28
 8008232:	d501      	bpl.n	8008238 <__swbuf_r+0x20>
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	b943      	cbnz	r3, 800824a <__swbuf_r+0x32>
 8008238:	4621      	mov	r1, r4
 800823a:	4628      	mov	r0, r5
 800823c:	f000 f82a 	bl	8008294 <__swsetup_r>
 8008240:	b118      	cbz	r0, 800824a <__swbuf_r+0x32>
 8008242:	f04f 37ff 	mov.w	r7, #4294967295
 8008246:	4638      	mov	r0, r7
 8008248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	6922      	ldr	r2, [r4, #16]
 800824e:	1a98      	subs	r0, r3, r2
 8008250:	6963      	ldr	r3, [r4, #20]
 8008252:	b2f6      	uxtb	r6, r6
 8008254:	4283      	cmp	r3, r0
 8008256:	4637      	mov	r7, r6
 8008258:	dc05      	bgt.n	8008266 <__swbuf_r+0x4e>
 800825a:	4621      	mov	r1, r4
 800825c:	4628      	mov	r0, r5
 800825e:	f7ff fd99 	bl	8007d94 <_fflush_r>
 8008262:	2800      	cmp	r0, #0
 8008264:	d1ed      	bne.n	8008242 <__swbuf_r+0x2a>
 8008266:	68a3      	ldr	r3, [r4, #8]
 8008268:	3b01      	subs	r3, #1
 800826a:	60a3      	str	r3, [r4, #8]
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	6022      	str	r2, [r4, #0]
 8008272:	701e      	strb	r6, [r3, #0]
 8008274:	6962      	ldr	r2, [r4, #20]
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	429a      	cmp	r2, r3
 800827a:	d004      	beq.n	8008286 <__swbuf_r+0x6e>
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	07db      	lsls	r3, r3, #31
 8008280:	d5e1      	bpl.n	8008246 <__swbuf_r+0x2e>
 8008282:	2e0a      	cmp	r6, #10
 8008284:	d1df      	bne.n	8008246 <__swbuf_r+0x2e>
 8008286:	4621      	mov	r1, r4
 8008288:	4628      	mov	r0, r5
 800828a:	f7ff fd83 	bl	8007d94 <_fflush_r>
 800828e:	2800      	cmp	r0, #0
 8008290:	d0d9      	beq.n	8008246 <__swbuf_r+0x2e>
 8008292:	e7d6      	b.n	8008242 <__swbuf_r+0x2a>

08008294 <__swsetup_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4b29      	ldr	r3, [pc, #164]	@ (800833c <__swsetup_r+0xa8>)
 8008298:	4605      	mov	r5, r0
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	460c      	mov	r4, r1
 800829e:	b118      	cbz	r0, 80082a8 <__swsetup_r+0x14>
 80082a0:	6a03      	ldr	r3, [r0, #32]
 80082a2:	b90b      	cbnz	r3, 80082a8 <__swsetup_r+0x14>
 80082a4:	f7fd ffac 	bl	8006200 <__sinit>
 80082a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ac:	0719      	lsls	r1, r3, #28
 80082ae:	d422      	bmi.n	80082f6 <__swsetup_r+0x62>
 80082b0:	06da      	lsls	r2, r3, #27
 80082b2:	d407      	bmi.n	80082c4 <__swsetup_r+0x30>
 80082b4:	2209      	movs	r2, #9
 80082b6:	602a      	str	r2, [r5, #0]
 80082b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082bc:	81a3      	strh	r3, [r4, #12]
 80082be:	f04f 30ff 	mov.w	r0, #4294967295
 80082c2:	e033      	b.n	800832c <__swsetup_r+0x98>
 80082c4:	0758      	lsls	r0, r3, #29
 80082c6:	d512      	bpl.n	80082ee <__swsetup_r+0x5a>
 80082c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082ca:	b141      	cbz	r1, 80082de <__swsetup_r+0x4a>
 80082cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082d0:	4299      	cmp	r1, r3
 80082d2:	d002      	beq.n	80082da <__swsetup_r+0x46>
 80082d4:	4628      	mov	r0, r5
 80082d6:	f7fe ff07 	bl	80070e8 <_free_r>
 80082da:	2300      	movs	r3, #0
 80082dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082e4:	81a3      	strh	r3, [r4, #12]
 80082e6:	2300      	movs	r3, #0
 80082e8:	6063      	str	r3, [r4, #4]
 80082ea:	6923      	ldr	r3, [r4, #16]
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	f043 0308 	orr.w	r3, r3, #8
 80082f4:	81a3      	strh	r3, [r4, #12]
 80082f6:	6923      	ldr	r3, [r4, #16]
 80082f8:	b94b      	cbnz	r3, 800830e <__swsetup_r+0x7a>
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008304:	d003      	beq.n	800830e <__swsetup_r+0x7a>
 8008306:	4621      	mov	r1, r4
 8008308:	4628      	mov	r0, r5
 800830a:	f000 f883 	bl	8008414 <__smakebuf_r>
 800830e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008312:	f013 0201 	ands.w	r2, r3, #1
 8008316:	d00a      	beq.n	800832e <__swsetup_r+0x9a>
 8008318:	2200      	movs	r2, #0
 800831a:	60a2      	str	r2, [r4, #8]
 800831c:	6962      	ldr	r2, [r4, #20]
 800831e:	4252      	negs	r2, r2
 8008320:	61a2      	str	r2, [r4, #24]
 8008322:	6922      	ldr	r2, [r4, #16]
 8008324:	b942      	cbnz	r2, 8008338 <__swsetup_r+0xa4>
 8008326:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800832a:	d1c5      	bne.n	80082b8 <__swsetup_r+0x24>
 800832c:	bd38      	pop	{r3, r4, r5, pc}
 800832e:	0799      	lsls	r1, r3, #30
 8008330:	bf58      	it	pl
 8008332:	6962      	ldrpl	r2, [r4, #20]
 8008334:	60a2      	str	r2, [r4, #8]
 8008336:	e7f4      	b.n	8008322 <__swsetup_r+0x8e>
 8008338:	2000      	movs	r0, #0
 800833a:	e7f7      	b.n	800832c <__swsetup_r+0x98>
 800833c:	20000018 	.word	0x20000018

08008340 <_raise_r>:
 8008340:	291f      	cmp	r1, #31
 8008342:	b538      	push	{r3, r4, r5, lr}
 8008344:	4605      	mov	r5, r0
 8008346:	460c      	mov	r4, r1
 8008348:	d904      	bls.n	8008354 <_raise_r+0x14>
 800834a:	2316      	movs	r3, #22
 800834c:	6003      	str	r3, [r0, #0]
 800834e:	f04f 30ff 	mov.w	r0, #4294967295
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008356:	b112      	cbz	r2, 800835e <_raise_r+0x1e>
 8008358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800835c:	b94b      	cbnz	r3, 8008372 <_raise_r+0x32>
 800835e:	4628      	mov	r0, r5
 8008360:	f000 f830 	bl	80083c4 <_getpid_r>
 8008364:	4622      	mov	r2, r4
 8008366:	4601      	mov	r1, r0
 8008368:	4628      	mov	r0, r5
 800836a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800836e:	f000 b817 	b.w	80083a0 <_kill_r>
 8008372:	2b01      	cmp	r3, #1
 8008374:	d00a      	beq.n	800838c <_raise_r+0x4c>
 8008376:	1c59      	adds	r1, r3, #1
 8008378:	d103      	bne.n	8008382 <_raise_r+0x42>
 800837a:	2316      	movs	r3, #22
 800837c:	6003      	str	r3, [r0, #0]
 800837e:	2001      	movs	r0, #1
 8008380:	e7e7      	b.n	8008352 <_raise_r+0x12>
 8008382:	2100      	movs	r1, #0
 8008384:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008388:	4620      	mov	r0, r4
 800838a:	4798      	blx	r3
 800838c:	2000      	movs	r0, #0
 800838e:	e7e0      	b.n	8008352 <_raise_r+0x12>

08008390 <raise>:
 8008390:	4b02      	ldr	r3, [pc, #8]	@ (800839c <raise+0xc>)
 8008392:	4601      	mov	r1, r0
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	f7ff bfd3 	b.w	8008340 <_raise_r>
 800839a:	bf00      	nop
 800839c:	20000018 	.word	0x20000018

080083a0 <_kill_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4d07      	ldr	r5, [pc, #28]	@ (80083c0 <_kill_r+0x20>)
 80083a4:	2300      	movs	r3, #0
 80083a6:	4604      	mov	r4, r0
 80083a8:	4608      	mov	r0, r1
 80083aa:	4611      	mov	r1, r2
 80083ac:	602b      	str	r3, [r5, #0]
 80083ae:	f7f9 f95d 	bl	800166c <_kill>
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	d102      	bne.n	80083bc <_kill_r+0x1c>
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	b103      	cbz	r3, 80083bc <_kill_r+0x1c>
 80083ba:	6023      	str	r3, [r4, #0]
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
 80083be:	bf00      	nop
 80083c0:	200004bc 	.word	0x200004bc

080083c4 <_getpid_r>:
 80083c4:	f7f9 b94a 	b.w	800165c <_getpid>

080083c8 <__swhatbuf_r>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	460c      	mov	r4, r1
 80083cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d0:	2900      	cmp	r1, #0
 80083d2:	b096      	sub	sp, #88	@ 0x58
 80083d4:	4615      	mov	r5, r2
 80083d6:	461e      	mov	r6, r3
 80083d8:	da0d      	bge.n	80083f6 <__swhatbuf_r+0x2e>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083e0:	f04f 0100 	mov.w	r1, #0
 80083e4:	bf14      	ite	ne
 80083e6:	2340      	movne	r3, #64	@ 0x40
 80083e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083ec:	2000      	movs	r0, #0
 80083ee:	6031      	str	r1, [r6, #0]
 80083f0:	602b      	str	r3, [r5, #0]
 80083f2:	b016      	add	sp, #88	@ 0x58
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	466a      	mov	r2, sp
 80083f8:	f000 f848 	bl	800848c <_fstat_r>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	dbec      	blt.n	80083da <__swhatbuf_r+0x12>
 8008400:	9901      	ldr	r1, [sp, #4]
 8008402:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008406:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800840a:	4259      	negs	r1, r3
 800840c:	4159      	adcs	r1, r3
 800840e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008412:	e7eb      	b.n	80083ec <__swhatbuf_r+0x24>

08008414 <__smakebuf_r>:
 8008414:	898b      	ldrh	r3, [r1, #12]
 8008416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008418:	079d      	lsls	r5, r3, #30
 800841a:	4606      	mov	r6, r0
 800841c:	460c      	mov	r4, r1
 800841e:	d507      	bpl.n	8008430 <__smakebuf_r+0x1c>
 8008420:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	2301      	movs	r3, #1
 800842a:	6163      	str	r3, [r4, #20]
 800842c:	b003      	add	sp, #12
 800842e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008430:	ab01      	add	r3, sp, #4
 8008432:	466a      	mov	r2, sp
 8008434:	f7ff ffc8 	bl	80083c8 <__swhatbuf_r>
 8008438:	9f00      	ldr	r7, [sp, #0]
 800843a:	4605      	mov	r5, r0
 800843c:	4639      	mov	r1, r7
 800843e:	4630      	mov	r0, r6
 8008440:	f7fe fec6 	bl	80071d0 <_malloc_r>
 8008444:	b948      	cbnz	r0, 800845a <__smakebuf_r+0x46>
 8008446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844a:	059a      	lsls	r2, r3, #22
 800844c:	d4ee      	bmi.n	800842c <__smakebuf_r+0x18>
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	f043 0302 	orr.w	r3, r3, #2
 8008456:	81a3      	strh	r3, [r4, #12]
 8008458:	e7e2      	b.n	8008420 <__smakebuf_r+0xc>
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	6020      	str	r0, [r4, #0]
 800845e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	9b01      	ldr	r3, [sp, #4]
 8008466:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800846a:	b15b      	cbz	r3, 8008484 <__smakebuf_r+0x70>
 800846c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008470:	4630      	mov	r0, r6
 8008472:	f000 f81d 	bl	80084b0 <_isatty_r>
 8008476:	b128      	cbz	r0, 8008484 <__smakebuf_r+0x70>
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	f023 0303 	bic.w	r3, r3, #3
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	431d      	orrs	r5, r3
 8008488:	81a5      	strh	r5, [r4, #12]
 800848a:	e7cf      	b.n	800842c <__smakebuf_r+0x18>

0800848c <_fstat_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d07      	ldr	r5, [pc, #28]	@ (80084ac <_fstat_r+0x20>)
 8008490:	2300      	movs	r3, #0
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	4611      	mov	r1, r2
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	f7f9 f947 	bl	800172c <_fstat>
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	d102      	bne.n	80084a8 <_fstat_r+0x1c>
 80084a2:	682b      	ldr	r3, [r5, #0]
 80084a4:	b103      	cbz	r3, 80084a8 <_fstat_r+0x1c>
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	bd38      	pop	{r3, r4, r5, pc}
 80084aa:	bf00      	nop
 80084ac:	200004bc 	.word	0x200004bc

080084b0 <_isatty_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d06      	ldr	r5, [pc, #24]	@ (80084cc <_isatty_r+0x1c>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	f7f9 f946 	bl	800174c <_isatty>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_isatty_r+0x1a>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_isatty_r+0x1a>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	200004bc 	.word	0x200004bc

080084d0 <_init>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr

080084dc <_fini>:
 80084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084de:	bf00      	nop
 80084e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e2:	bc08      	pop	{r3}
 80084e4:	469e      	mov	lr, r3
 80084e6:	4770      	bx	lr
